
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `/gb3-resources/processor/yscripts/sail.ys' --

1. Executing Verilog-2005 frontend: verilog/pll.v
Parsing Verilog input from `verilog/pll.v' to AST representation.
Generating RTLIL representation for module `\pll'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: verilog/adder.v
Parsing Verilog input from `verilog/adder.v' to AST representation.
Generating RTLIL representation for module `\adder'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: verilog/cpu.v
Parsing Verilog input from `verilog/cpu.v' to AST representation.
Generating RTLIL representation for module `\cpu'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: verilog/mux2to1.v
Parsing Verilog input from `verilog/mux2to1.v' to AST representation.
Generating RTLIL representation for module `\mux2to1'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: verilog/alu_control.v
Parsing Verilog input from `verilog/alu_control.v' to AST representation.
Generating RTLIL representation for module `\ALUControl'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: verilog/pipeline_registers.v
Parsing Verilog input from `verilog/pipeline_registers.v' to AST representation.
Generating RTLIL representation for module `\if_id'.
Generating RTLIL representation for module `\id_ex'.
Generating RTLIL representation for module `\ex_mem'.
Generating RTLIL representation for module `\mem_wb'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: verilog/alu.v
Parsing Verilog input from `verilog/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Note: Assuming pure combinatorial block at verilog/alu.v:78.2-145.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at verilog/alu.v:147.2-158.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: verilog/program_counter.v
Parsing Verilog input from `verilog/program_counter.v' to AST representation.
Generating RTLIL representation for module `\program_counter'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: verilog/branch_decide.v
Parsing Verilog input from `verilog/branch_decide.v' to AST representation.
Generating RTLIL representation for module `\branch_decision'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: verilog/forwarding_unit.v
Parsing Verilog input from `verilog/forwarding_unit.v' to AST representation.
Generating RTLIL representation for module `\ForwardingUnit'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: verilog/branch_predictor.v
Parsing Verilog input from `verilog/branch_predictor.v' to AST representation.
Generating RTLIL representation for module `\branch_predictor'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: verilog/imm_gen.v
Parsing Verilog input from `verilog/imm_gen.v' to AST representation.
Generating RTLIL representation for module `\imm_gen'.
Note: Assuming pure combinatorial block at verilog/imm_gen.v:54.2-72.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: verilog/control_unit.v
Parsing Verilog input from `verilog/control_unit.v' to AST representation.
Generating RTLIL representation for module `\control'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: verilog/instruction_mem.v
Parsing Verilog input from `verilog/instruction_mem.v' to AST representation.
Generating RTLIL representation for module `\instruction_memory'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: verilog/data_mem.v
Parsing Verilog input from `verilog/data_mem.v' to AST representation.
Generating RTLIL representation for module `\data_mem'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: verilog/register_file.v
Parsing Verilog input from `verilog/register_file.v' to AST representation.
Generating RTLIL representation for module `\regfile'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: verilog/CSR.v
Parsing Verilog input from `verilog/CSR.v' to AST representation.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: verilog/dataMem_mask_gen.v
Parsing Verilog input from `verilog/dataMem_mask_gen.v' to AST representation.
Generating RTLIL representation for module `\sign_mask_gen'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: toplevel.v
Parsing Verilog input from `toplevel.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

20. Executing SYNTH_ICE40 pass.

20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

20.2. Executing HIERARCHY pass (managing design hierarchy).

20.2.1. Finding top of design hierarchy..
root of   2 design levels: top                 
root of   0 design levels: sign_mask_gen       
root of   0 design levels: regfile             
root of   0 design levels: data_mem            
root of   0 design levels: instruction_memory  
root of   0 design levels: control             
root of   0 design levels: imm_gen             
root of   0 design levels: branch_predictor    
root of   0 design levels: ForwardingUnit      
root of   0 design levels: branch_decision     
root of   0 design levels: program_counter     
root of   0 design levels: alu                 
root of   0 design levels: mem_wb              
root of   0 design levels: ex_mem              
root of   0 design levels: id_ex               
root of   0 design levels: if_id               
root of   0 design levels: ALUControl          
root of   0 design levels: mux2to1             
root of   1 design levels: cpu                 
root of   0 design levels: adder               
root of   1 design levels: pll                 
Automatically selected top as design top module.

20.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:         \adder
Used module:         \id_ex
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Used module:     \pll

20.2.3. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:         \adder
Used module:         \id_ex
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Used module:     \pll
Removed 0 unused modules.

20.3. Executing PROC pass (convert processes to netlists).

20.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `regfile.$proc$verilog/register_file.v:0$361'.
Removing empty process `instruction_memory.$proc$verilog/instruction_mem.v:0$252'.
Cleaned up 0 empty switches.

20.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$verilog/dataMem_mask_gen.v:58$362 in module sign_mask_gen.
Marked 1 switch rules as full_case in process $proc$verilog/data_mem.v:240$322 in module data_mem.
Marked 1 switch rules as full_case in process $proc$verilog/imm_gen.v:54$190 in module imm_gen.
Marked 1 switch rules as full_case in process $proc$verilog/branch_predictor.v:110$121 in module branch_predictor.
Marked 1 switch rules as full_case in process $proc$verilog/program_counter.v:69$41 in module program_counter.
Marked 1 switch rules as full_case in process $proc$verilog/alu.v:147$32 in module alu.
Marked 1 switch rules as full_case in process $proc$verilog/alu.v:78$18 in module alu.
Removed 5 dead cases from process $proc$verilog/alu_control.v:82$8 in module ALUControl.
Marked 10 switch rules as full_case in process $proc$verilog/alu_control.v:82$8 in module ALUControl.
Removed a total of 5 dead cases.

20.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 47 assignments to connections.

20.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\data_mem.$proc$verilog/data_mem.v:0$337'.
  Set init value: \clk_stall = 1'0
Found init rule in `\data_mem.$proc$verilog/data_mem.v:60$336'.
  Set init value: \state = 0
Found init rule in `\imm_gen.$proc$verilog/imm_gen.v:0$191'.
  Set init value: \imm = 0
Found init rule in `\branch_predictor.$proc$verilog/branch_predictor.v:0$189'.
  Set init value: \branch_mem_sig_reg = 1'0
Found init rule in `\program_counter.$proc$verilog/program_counter.v:0$44'.
  Set init value: \outAddr = 0
  Set init value: \counter = 14'00000000000000
  Set init value: \enable = 1'0
Found init rule in `\alu.$proc$verilog/alu.v:0$40'.
  Set init value: \ALUOut = 0
  Set init value: \Branch_Enable = 1'0
Found init rule in `\mem_wb.$proc$verilog/pipeline_registers.v:0$17'.
  Set init value: \data_out = 117'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\ex_mem.$proc$verilog/pipeline_registers.v:0$15'.
  Set init value: \data_out = 155'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\id_ex.$proc$verilog/pipeline_registers.v:0$13'.
  Set init value: \data_out = 178'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\if_id.$proc$verilog/pipeline_registers.v:0$11'.
  Set init value: \data_out = 64'0000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\ALUControl.$proc$verilog/alu_control.v:0$9'.
  Set init value: \ALUCtl = 7'0000000

20.3.5. Executing PROC_ARST pass (detect async resets in processes).

20.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$toplevel.v:57$369'.
Creating decoders for process `\top.$proc$toplevel.v:56$368'.
Creating decoders for process `\top.$proc$toplevel.v:76$364'.
Creating decoders for process `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$362'.
     1/1: $1\mask[2:0]
Creating decoders for process `\regfile.$proc$verilog/register_file.v:95$340'.
     1/3: $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343
     2/3: $0$memwr$\regfile$verilog/register_file.v:97$339_DATA[31:0]$342
     3/3: $0$memwr$\regfile$verilog/register_file.v:97$339_ADDR[4:0]$341
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:0$337'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:60$336'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:240$322'.
     1/12: $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325
     2/12: $0$memwr$\data_block$verilog/data_mem.v:283$253_DATA[31:0]$324
     3/12: $0$memwr$\data_block$verilog/data_mem.v:283$253_ADDR[31:0]$323
     4/12: $0\sign_mask_buf[3:0]
     5/12: $0\addr_buf[31:0]
     6/12: $0\write_data_buffer[31:0]
     7/12: $0\memwrite_buf[0:0]
     8/12: $0\memread_buf[0:0]
     9/12: $0\word_buf[31:0]
    10/12: $0\state[31:0]
    11/12: $0\clk_stall[0:0]
    12/12: $0\read_data[31:0]
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:231$318'.
     1/1: $0\led_reg[31:0]
Creating decoders for process `\instruction_memory.$proc$verilog/instruction_mem.v:83$248'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:0$191'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:54$190'.
     1/1: $1\imm[31:0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:0$189'.
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:0$168'.
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:121$165'.
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
     1/15: $1$mem2bits$\s_table$verilog/branch_predictor.v:114$100[1:0]$143
     2/15: $1$mem2bits$\s_table$verilog/branch_predictor.v:114$99[1:0]$142
     3/15: $1$mem2bits$\s_table$verilog/branch_predictor.v:114$98[1:0]$141
     4/15: $1$mem2bits$\s_table$verilog/branch_predictor.v:114$97[1:0]$140
     5/15: $1$mem2bits$\s_table$verilog/branch_predictor.v:113$96[1:0]$139
     6/15: $1$mem2bits$\s_table$verilog/branch_predictor.v:113$95[1:0]$138
     7/15: $1$mem2bits$\s_table$verilog/branch_predictor.v:113$94[1:0]$137
     8/15: $1$mem2bits$\s_table$verilog/branch_predictor.v:113$93[1:0]$136
     9/15: $0$memwr$\s_table$verilog/branch_predictor.v:113$118_EN[1:0]$132
    10/15: $0$memwr$\s_table$verilog/branch_predictor.v:113$118_DATA[1:0]$131
    11/15: $0$memwr$\s_table$verilog/branch_predictor.v:113$118_ADDR[3:0]$130
    12/15: $0$memwr$\s_table$verilog/branch_predictor.v:114$119_EN[1:0]$135
    13/15: $0$memwr$\s_table$verilog/branch_predictor.v:114$119_DATA[1:0]$134
    14/15: $0$memwr$\s_table$verilog/branch_predictor.v:114$119_ADDR[3:0]$133
    15/15: $0\global_history[3:0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:101$120'.
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:0$44'.
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:69$41'.
     1/3: $0\enable[0:0]
     2/3: $0\counter[13:0]
     3/3: $0\outAddr[31:0]
Creating decoders for process `\alu.$proc$verilog/alu.v:0$40'.
Creating decoders for process `\alu.$proc$verilog/alu.v:147$32'.
     1/1: $1\Branch_Enable[0:0]
Creating decoders for process `\alu.$proc$verilog/alu.v:78$18'.
     1/1: $1\ALUOut[31:0]
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:0$17'.
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:145$16'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:0$15'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:118$14'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:0$13'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:91$12'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:0$11'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:64$10'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:0$9'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:82$8'.
     1/10: $10\ALUCtl[6:0]
     2/10: $9\ALUCtl[6:0]
     3/10: $8\ALUCtl[6:0]
     4/10: $7\ALUCtl[6:0]
     5/10: $6\ALUCtl[6:0]
     6/10: $5\ALUCtl[6:0]
     7/10: $4\ALUCtl[6:0]
     8/10: $3\ALUCtl[6:0]
     9/10: $2\ALUCtl[6:0]
    10/10: $1\ALUCtl[6:0]

20.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\CLKHF_POWERUP' from process `\top.$proc$toplevel.v:57$369'.
No latch inferred for signal `\top.\ENCLKHF' from process `\top.$proc$toplevel.v:56$368'.
No latch inferred for signal `\sign_mask_gen.\mask' from process `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$362'.
No latch inferred for signal `\imm_gen.\imm' from process `\imm_gen.$proc$verilog/imm_gen.v:54$190'.
No latch inferred for signal `\branch_predictor.\k' from process `\branch_predictor.$proc$verilog/branch_predictor.v:0$189'.
No latch inferred for signal `\branch_predictor.$mem2bits$\s_table$verilog/branch_predictor.v:127$101' from process `\branch_predictor.$proc$verilog/branch_predictor.v:0$168'.
No latch inferred for signal `\alu.\Branch_Enable' from process `\alu.$proc$verilog/alu.v:147$32'.
No latch inferred for signal `\alu.\ALUOut' from process `\alu.$proc$verilog/alu.v:78$18'.
No latch inferred for signal `\ALUControl.\ALUCtl' from process `\ALUControl.$proc$verilog/alu_control.v:82$8'.

20.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\clk' using process `\top.$proc$toplevel.v:76$364'.
  created $dff cell `$procdff$988' with positive edge clock.
Creating register for signal `\regfile.\rdAddrA_buf' using process `\regfile.$proc$verilog/register_file.v:95$340'.
  created $dff cell `$procdff$989' with positive edge clock.
Creating register for signal `\regfile.\rdAddrB_buf' using process `\regfile.$proc$verilog/register_file.v:95$340'.
  created $dff cell `$procdff$990' with positive edge clock.
Creating register for signal `\regfile.\regDatA' using process `\regfile.$proc$verilog/register_file.v:95$340'.
  created $dff cell `$procdff$991' with positive edge clock.
Creating register for signal `\regfile.\regDatB' using process `\regfile.$proc$verilog/register_file.v:95$340'.
  created $dff cell `$procdff$992' with positive edge clock.
Creating register for signal `\regfile.\wrAddr_buf' using process `\regfile.$proc$verilog/register_file.v:95$340'.
  created $dff cell `$procdff$993' with positive edge clock.
Creating register for signal `\regfile.\wrData_buf' using process `\regfile.$proc$verilog/register_file.v:95$340'.
  created $dff cell `$procdff$994' with positive edge clock.
Creating register for signal `\regfile.\write_buf' using process `\regfile.$proc$verilog/register_file.v:95$340'.
  created $dff cell `$procdff$995' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$339_ADDR' using process `\regfile.$proc$verilog/register_file.v:95$340'.
  created $dff cell `$procdff$996' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$339_DATA' using process `\regfile.$proc$verilog/register_file.v:95$340'.
  created $dff cell `$procdff$997' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$339_EN' using process `\regfile.$proc$verilog/register_file.v:95$340'.
  created $dff cell `$procdff$998' with positive edge clock.
Creating register for signal `\data_mem.\read_data' using process `\data_mem.$proc$verilog/data_mem.v:240$322'.
  created $dff cell `$procdff$999' with positive edge clock.
Creating register for signal `\data_mem.\clk_stall' using process `\data_mem.$proc$verilog/data_mem.v:240$322'.
  created $dff cell `$procdff$1000' with positive edge clock.
Creating register for signal `\data_mem.\state' using process `\data_mem.$proc$verilog/data_mem.v:240$322'.
  created $dff cell `$procdff$1001' with positive edge clock.
Creating register for signal `\data_mem.\word_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$322'.
  created $dff cell `$procdff$1002' with positive edge clock.
Creating register for signal `\data_mem.\memread_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$322'.
  created $dff cell `$procdff$1003' with positive edge clock.
Creating register for signal `\data_mem.\memwrite_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$322'.
  created $dff cell `$procdff$1004' with positive edge clock.
Creating register for signal `\data_mem.\write_data_buffer' using process `\data_mem.$proc$verilog/data_mem.v:240$322'.
  created $dff cell `$procdff$1005' with positive edge clock.
Creating register for signal `\data_mem.\addr_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$322'.
  created $dff cell `$procdff$1006' with positive edge clock.
Creating register for signal `\data_mem.\sign_mask_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$322'.
  created $dff cell `$procdff$1007' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$253_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:240$322'.
  created $dff cell `$procdff$1008' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$253_DATA' using process `\data_mem.$proc$verilog/data_mem.v:240$322'.
  created $dff cell `$procdff$1009' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$253_EN' using process `\data_mem.$proc$verilog/data_mem.v:240$322'.
  created $dff cell `$procdff$1010' with positive edge clock.
Creating register for signal `\data_mem.\led_reg' using process `\data_mem.$proc$verilog/data_mem.v:231$318'.
  created $dff cell `$procdff$1011' with positive edge clock.
Creating register for signal `\instruction_memory.\out' using process `\instruction_memory.$proc$verilog/instruction_mem.v:83$248'.
  created $dff cell `$procdff$1012' with positive edge clock.
Creating register for signal `\branch_predictor.\hash_buff1' using process `\branch_predictor.$proc$verilog/branch_predictor.v:121$165'.
  created $dff cell `$procdff$1013' with positive edge clock.
Creating register for signal `\branch_predictor.\hash_buff2' using process `\branch_predictor.$proc$verilog/branch_predictor.v:121$165'.
  created $dff cell `$procdff$1014' with positive edge clock.
Creating register for signal `\branch_predictor.\global_history' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1015' with positive edge clock.
Creating register for signal `\branch_predictor.$mem2bits$\s_table$verilog/branch_predictor.v:113$93' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1016' with positive edge clock.
Creating register for signal `\branch_predictor.$mem2bits$\s_table$verilog/branch_predictor.v:113$94' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1017' with positive edge clock.
Creating register for signal `\branch_predictor.$mem2bits$\s_table$verilog/branch_predictor.v:113$95' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1018' with positive edge clock.
Creating register for signal `\branch_predictor.$mem2bits$\s_table$verilog/branch_predictor.v:113$96' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1019' with positive edge clock.
Creating register for signal `\branch_predictor.$mem2bits$\s_table$verilog/branch_predictor.v:114$97' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1020' with positive edge clock.
Creating register for signal `\branch_predictor.$mem2bits$\s_table$verilog/branch_predictor.v:114$98' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1021' with positive edge clock.
Creating register for signal `\branch_predictor.$mem2bits$\s_table$verilog/branch_predictor.v:114$99' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1022' with positive edge clock.
Creating register for signal `\branch_predictor.$mem2bits$\s_table$verilog/branch_predictor.v:114$100' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1023' with positive edge clock.
Creating register for signal `\branch_predictor.$memwr$\s_table$verilog/branch_predictor.v:113$118_ADDR' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1024' with positive edge clock.
Creating register for signal `\branch_predictor.$memwr$\s_table$verilog/branch_predictor.v:113$118_DATA' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1025' with positive edge clock.
Creating register for signal `\branch_predictor.$memwr$\s_table$verilog/branch_predictor.v:113$118_EN' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1026' with positive edge clock.
Creating register for signal `\branch_predictor.$memwr$\s_table$verilog/branch_predictor.v:114$119_ADDR' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1027' with positive edge clock.
Creating register for signal `\branch_predictor.$memwr$\s_table$verilog/branch_predictor.v:114$119_DATA' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1028' with positive edge clock.
Creating register for signal `\branch_predictor.$memwr$\s_table$verilog/branch_predictor.v:114$119_EN' using process `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
  created $dff cell `$procdff$1029' with positive edge clock.
Creating register for signal `\branch_predictor.\branch_mem_sig_reg' using process `\branch_predictor.$proc$verilog/branch_predictor.v:101$120'.
  created $dff cell `$procdff$1030' with negative edge clock.
Creating register for signal `\program_counter.\outAddr' using process `\program_counter.$proc$verilog/program_counter.v:69$41'.
  created $dff cell `$procdff$1031' with positive edge clock.
Creating register for signal `\program_counter.\counter' using process `\program_counter.$proc$verilog/program_counter.v:69$41'.
  created $dff cell `$procdff$1032' with positive edge clock.
Creating register for signal `\program_counter.\enable' using process `\program_counter.$proc$verilog/program_counter.v:69$41'.
  created $dff cell `$procdff$1033' with positive edge clock.
Creating register for signal `\mem_wb.\data_out' using process `\mem_wb.$proc$verilog/pipeline_registers.v:145$16'.
  created $dff cell `$procdff$1034' with positive edge clock.
Creating register for signal `\ex_mem.\data_out' using process `\ex_mem.$proc$verilog/pipeline_registers.v:118$14'.
  created $dff cell `$procdff$1035' with positive edge clock.
Creating register for signal `\id_ex.\data_out' using process `\id_ex.$proc$verilog/pipeline_registers.v:91$12'.
  created $dff cell `$procdff$1036' with positive edge clock.
Creating register for signal `\if_id.\data_out' using process `\if_id.$proc$verilog/pipeline_registers.v:64$10'.
  created $dff cell `$procdff$1037' with positive edge clock.

20.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$toplevel.v:57$369'.
Removing empty process `top.$proc$toplevel.v:56$368'.
Removing empty process `top.$proc$toplevel.v:76$364'.
Found and cleaned up 1 empty switch in `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$362'.
Removing empty process `sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$362'.
Found and cleaned up 1 empty switch in `\regfile.$proc$verilog/register_file.v:95$340'.
Removing empty process `regfile.$proc$verilog/register_file.v:95$340'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:0$337'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:60$336'.
Found and cleaned up 4 empty switches in `\data_mem.$proc$verilog/data_mem.v:240$322'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:240$322'.
Found and cleaned up 1 empty switch in `\data_mem.$proc$verilog/data_mem.v:231$318'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:231$318'.
Removing empty process `instruction_memory.$proc$verilog/instruction_mem.v:83$248'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:0$191'.
Found and cleaned up 1 empty switch in `\imm_gen.$proc$verilog/imm_gen.v:54$190'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:54$190'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:0$189'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:0$168'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:121$165'.
Found and cleaned up 1 empty switch in `\branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:110$121'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:101$120'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:0$44'.
Found and cleaned up 2 empty switches in `\program_counter.$proc$verilog/program_counter.v:69$41'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:69$41'.
Removing empty process `alu.$proc$verilog/alu.v:0$40'.
Found and cleaned up 1 empty switch in `\alu.$proc$verilog/alu.v:147$32'.
Removing empty process `alu.$proc$verilog/alu.v:147$32'.
Found and cleaned up 1 empty switch in `\alu.$proc$verilog/alu.v:78$18'.
Removing empty process `alu.$proc$verilog/alu.v:78$18'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:0$17'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:145$16'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:0$15'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:118$14'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:0$13'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:91$12'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:0$11'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:64$10'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:0$9'.
Found and cleaned up 10 empty switches in `\ALUControl.$proc$verilog/alu_control.v:82$8'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:82$8'.
Cleaned up 23 empty switches.

20.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module sign_mask_gen.
<suppressed ~1 debug messages>
Optimizing module regfile.
<suppressed ~4 debug messages>
Optimizing module data_mem.
<suppressed ~24 debug messages>
Optimizing module instruction_memory.
<suppressed ~1 debug messages>
Optimizing module control.
Optimizing module imm_gen.
Optimizing module branch_predictor.
Optimizing module ForwardingUnit.
<suppressed ~6 debug messages>
Optimizing module branch_decision.
Optimizing module program_counter.
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module mem_wb.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module ALUControl.
<suppressed ~9 debug messages>
Optimizing module mux2to1.
Optimizing module cpu.
Optimizing module adder.
Optimizing module pll.

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \pll..
Removed 16 unused cells and 222 unused wires.
<suppressed ~36 debug messages>

20.6. Executing CHECK pass (checking for obvious problems).
checking module ALUControl..
checking module ForwardingUnit..
checking module adder..
checking module alu..
checking module branch_decision..
checking module branch_predictor..
checking module control..
checking module cpu..
checking module data_mem..
checking module ex_mem..
checking module id_ex..
checking module if_id..
checking module imm_gen..
checking module instruction_memory..
checking module mem_wb..
checking module mux2to1..
checking module pll..
checking module program_counter..
checking module regfile..
checking module sign_mask_gen..
checking module top..
found and reported 0 problems.

20.7. Executing OPT pass (performing simple optimizations).

20.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
<suppressed ~108 debug messages>
Finding identical cells in module `\ForwardingUnit'.
<suppressed ~9 debug messages>
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
<suppressed ~9 debug messages>
Finding identical cells in module `\branch_decision'.
<suppressed ~6 debug messages>
Finding identical cells in module `\branch_predictor'.
<suppressed ~27 debug messages>
Finding identical cells in module `\control'.
<suppressed ~60 debug messages>
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
<suppressed ~72 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 98 cells.

20.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$880.
    dead port 2/2 on $mux $procmux$882.
    dead port 2/2 on $mux $procmux$896.
    dead port 2/2 on $mux $procmux$935.
    dead port 2/2 on $mux $procmux$898.
    dead port 2/2 on $mux $procmux$946.
    dead port 2/2 on $mux $procmux$960.
    dead port 2/2 on $mux $procmux$911.
    dead port 2/2 on $mux $procmux$871.
    dead port 2/2 on $mux $procmux$976.
    dead port 2/2 on $mux $procmux$919.
    dead port 2/2 on $mux $procmux$921.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 12 multiplexer ports.
<suppressed ~39 debug messages>

20.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
    New ctrl vector for $pmux cell $procmux$902: { $procmux$897_CMP $procmux$909_CMP $auto$opt_reduce.cc:134:opt_mux$1039 $procmux$906_CMP $procmux$881_CMP $procmux$904_CMP $procmux$903_CMP }
    New ctrl vector for $pmux cell $procmux$954: $auto$opt_reduce.cc:134:opt_mux$1041
    New ctrl vector for $pmux cell $procmux$979: { $auto$opt_reduce.cc:134:opt_mux$1043 $procmux$977_CMP $procmux$961_CMP $procmux$947_CMP $procmux$922_CMP $procmux$883_CMP $procmux$872_CMP }
    New ctrl vector for $pmux cell $procmux$942: $auto$opt_reduce.cc:134:opt_mux$1045
    New ctrl vector for $pmux cell $procmux$926: { $procmux$897_CMP $auto$opt_reduce.cc:134:opt_mux$1047 $procmux$906_CMP $procmux$904_CMP $procmux$903_CMP $procmux$909_CMP $procmux$881_CMP }
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
    New ctrl vector for $pmux cell $procmux$852: { $procmux$864_CMP $procmux$862_CMP $procmux$861_CMP $procmux$860_CMP $procmux$859_CMP $procmux$858_CMP $procmux$857_CMP $procmux$856_CMP $procmux$855_CMP $auto$opt_reduce.cc:134:opt_mux$1049 $procmux$853_CMP }
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
    Consolidated identical input bits for $mux cell $procmux$812:
      Old ports: A=2'00, B=2'10, Y=$0$memwr$\s_table$verilog/branch_predictor.v:113$118_EN[1:0]$132
      New ports: A=1'0, B=1'1, Y=$0$memwr$\s_table$verilog/branch_predictor.v:113$118_EN[1:0]$132 [1]
      New connections: $0$memwr$\s_table$verilog/branch_predictor.v:113$118_EN[1:0]$132 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$821:
      Old ports: A=2'00, B=2'01, Y=$0$memwr$\s_table$verilog/branch_predictor.v:114$119_EN[1:0]$135
      New ports: A=1'0, B=1'1, Y=$0$memwr$\s_table$verilog/branch_predictor.v:114$119_EN[1:0]$135 [0]
      New connections: $0$memwr$\s_table$verilog/branch_predictor.v:114$119_EN[1:0]$135 [1] = 1'0
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $procmux$721:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325
      New ports: A=1'0, B=1'1, Y=$0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0]
      New connections: $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [31:1] = { $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] $0$memwr$\data_block$verilog/data_mem.v:283$253_EN[31:0]$325 [0] }
    New ctrl vector for $pmux cell $procmux$756: { $procmux$731_CMP $procmux$755_CMP $auto$opt_reduce.cc:134:opt_mux$1051 }
    New ctrl vector for $pmux cell $procmux$768: { $procmux$731_CMP $auto$opt_reduce.cc:134:opt_mux$1053 }
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
    New ctrl vector for $pmux cell $procmux$780: { $procmux$786_CMP $procmux$785_CMP $auto$opt_reduce.cc:134:opt_mux$1055 $procmux$782_CMP $procmux$781_CMP }
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
    Consolidated identical input bits for $mux cell $procmux$715:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343
      New ports: A=1'0, B=1'1, Y=$0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0]
      New connections: $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [31:1] = { $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] $0$memwr$\regfile$verilog/register_file.v:97$339_EN[31:0]$343 [0] }
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 13 changes.

20.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
<suppressed ~6 debug messages>
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
<suppressed ~9 debug messages>
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
<suppressed ~3 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 6 cells.

20.7.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 116 unused wires.
<suppressed ~8 debug messages>

20.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.7.9. Rerunning OPT passes. (Maybe there is more to do..)

20.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~38 debug messages>

20.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

20.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.7.13. Executing OPT_RMDFF pass (remove dff with constant values).

20.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.7.16. Finished OPT passes. (There is nothing left to do.)

20.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$867 ($pmux).
Removed top 1 bits (of 2) from port B of cell ALUControl.$procmux$870_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$883_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$893 ($pmux).
Removed top 1 bits (of 3) from port B of cell ALUControl.$procmux$907_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell ALUControl.$procmux$908_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell ALUControl.$procmux$909_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$916 ($pmux).
Removed top 2 bits (of 7) from port B of cell ALUControl.$procmux$922_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$926 ($pmux).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$942 ($mux).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$947_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$954 ($mux).
Removed top 5 bits (of 7) from port B of cell ALUControl.$procmux$961_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell ALUControl.$procmux$986_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$987_CMP0 ($eq).
Removed top 4 bits (of 7) from wire ALUControl.$10\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire ALUControl.$3\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire ALUControl.$4\ALUCtl[6:0].
Removed top 31 bits (of 32) from mux cell alu.$ternary$verilog/alu.v:103$24 ($mux).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$848_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$849_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell alu.$procmux$850_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$857_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$858_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$859_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$860_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$861_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$862_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$863_CMP0 ($eq).
Removed top 31 bits (of 32) from wire alu.$ternary$verilog/alu.v:103$24_Y.
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$171 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$172 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$173 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$174 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$175 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$176 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$177 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$178 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$179 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$180 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$181 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$182 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$183 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$184 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$185 (s_table).
Removed top 28 address bits (of 32) from memory init port branch_predictor.$meminit$\s_table$verilog/branch_predictor.v:0$186 (s_table).
Removed cell branch_predictor.$procmux$815 ($mux).
Removed cell branch_predictor.$procmux$818 ($mux).
Removed cell branch_predictor.$procmux$824 ($mux).
Removed top 1 bits (of 2) from FF cell branch_predictor.$procdff$1028 ($dff).
Removed top 1 bits (of 2) from FF cell branch_predictor.$procdff$1029 ($dff).
Removed top 1 bits (of 2) from wire branch_predictor.$memwr$\s_table$verilog/branch_predictor.v:114$119_DATA.
Removed top 25 address bits (of 32) from memory init port data_mem.$meminit$\data_block$verilog/data_mem.v:0$334 (data_block).
Removed top 25 address bits (of 32) from memory read port data_mem.$memrd$\data_block$verilog/data_mem.v:261$329 (data_block).
Removed top 25 address bits (of 32) from memory write port data_mem.$memwr$\data_block$verilog/data_mem.v:0$335 (data_block).
Removed top 18 bits (of 32) from port B of cell data_mem.$eq$verilog/data_mem.v:232$320 ($eq).
Removed top 19 bits (of 32) from port B of cell data_mem.$sub$verilog/data_mem.v:261$330 ($sub).
Removed top 18 bits (of 32) from port Y of cell data_mem.$sub$verilog/data_mem.v:261$330 ($sub).
Removed top 30 bits (of 32) from port B of cell data_mem.$procmux$722_CMP0 ($eq).
Removed cell data_mem.$procmux$723 ($mux).
Removed cell data_mem.$procmux$725 ($mux).
Removed top 31 bits (of 32) from port B of cell data_mem.$procmux$755_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell data_mem.$procmux$758_CMP0 ($eq).
Removed top 18 bits (of 32) from FF cell data_mem.$procdff$1008 ($dff).
Removed top 31 bits (of 32) from FF cell data_mem.$procdff$1010 ($dff).
Removed top 7 bits (of 14) from FF cell data_mem.$procdff$1008 ($dff).
Removed top 7 bits (of 14) from port Y of cell data_mem.$sub$verilog/data_mem.v:261$330 ($sub).
Removed top 3 bits (of 10) from port A of cell data_mem.$sub$verilog/data_mem.v:261$330 ($sub).
Removed top 12 bits (of 13) from port B of cell data_mem.$sub$verilog/data_mem.v:261$330 ($sub).
Removed top 25 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:283$253_ADDR[31:0]$323.
Removed top 25 bits (of 32) from wire data_mem.$memwr$\data_block$verilog/data_mem.v:283$253_ADDR.
Removed top 25 bits (of 32) from wire data_mem.$sub$verilog/data_mem.v:261$330_Y.
Removed top 1 bits (of 32) from mux cell imm_gen.$procmux$780 ($pmux).
Removed top 3 bits (of 4) from port B of cell imm_gen.$procmux$783_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell imm_gen.$procmux$784_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell imm_gen.$procmux$785_CMP0 ($eq).
Removed top 22 address bits (of 32) from memory init port instruction_memory.$meminit$\instruction_memory$verilog/instruction_mem.v:0$251 (instruction_memory).
Removed top 22 address bits (of 32) from memory read port instruction_memory.$memrd$\instruction_memory$verilog/instruction_mem.v:84$249 (instruction_memory).
Removed top 18 bits (of 32) from port B of cell program_counter.$lt$verilog/program_counter.v:72$42 ($lt).
Removed top 31 bits (of 32) from port B of cell program_counter.$add$verilog/program_counter.v:73$43 ($add).
Removed top 18 bits (of 32) from port Y of cell program_counter.$add$verilog/program_counter.v:73$43 ($add).
Removed top 18 bits (of 32) from wire program_counter.$add$verilog/program_counter.v:73$43_Y.
Removed top 27 address bits (of 32) from memory init port regfile.$meminit$\regfile$verilog/register_file.v:0$359 (regfile).
Removed cell regfile.$procmux$717 ($mux).
Removed cell regfile.$procmux$719 ($mux).
Removed top 27 bits (of 32) from FF cell regfile.$procdff$993 ($dff).
Removed top 31 bits (of 32) from FF cell regfile.$procdff$998 ($dff).
Removed top 27 bits (of 32) from port A of cell regfile.$eq$verilog/register_file.v:108$349 ($eq).
Removed top 27 bits (of 32) from port A of cell regfile.$eq$verilog/register_file.v:109$354 ($eq).
Removed top 27 bits (of 32) from wire regfile.wrAddr_buf.
Removed top 1 bits (of 2) from port B of cell sign_mask_gen.$procmux$713_CMP0 ($eq).

20.9. Executing PEEPOPT pass (run peephole optimizers).

20.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 17 unused wires.
<suppressed ~6 debug messages>

20.11. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module alu that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$verilog/alu.v:113$26 ($sshr):
    Found 1 activation_patterns using ctrl signal $procmux$858_CMP.
    No candidates found.
  Analyzing resource sharing options for $shr$verilog/alu.v:108$25 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$859_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$verilog/alu.v:118$27 ($shl):
    Found 1 activation_patterns using ctrl signal $procmux$857_CMP.
    No candidates found.

20.12. Executing TECHMAP pass (map to technology primitives).

20.12.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

20.12.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~138 debug messages>

20.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
<suppressed ~1 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

20.15. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ALUControl:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ForwardingUnit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module adder:
  creating $macc model for $add$verilog/adder.v:53$1 ($add).
  creating $alu model for $macc $add$verilog/adder.v:53$1.
  creating $alu cell for $add$verilog/adder.v:53$1: $auto$alumacc.cc:485:replace_alu$1066
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$verilog/alu.v:93$21 ($add).
  creating $macc model for $sub$verilog/alu.v:98$22 ($sub).
  creating $alu model for $macc $sub$verilog/alu.v:98$22.
  creating $alu model for $macc $add$verilog/alu.v:93$21.
  creating $alu model for $ge$verilog/alu.v:152$37 ($ge): new $alu
  creating $alu model for $ge$verilog/alu.v:154$39 ($ge): merged with $sub$verilog/alu.v:98$22.
  creating $alu model for $lt$verilog/alu.v:103$23 ($lt): merged with $ge$verilog/alu.v:152$37.
  creating $alu model for $lt$verilog/alu.v:153$38 ($lt): merged with $sub$verilog/alu.v:98$22.
  creating $alu cell for $ge$verilog/alu.v:152$37, $lt$verilog/alu.v:103$23: $auto$alumacc.cc:485:replace_alu$1070
  creating $alu cell for $add$verilog/alu.v:93$21: $auto$alumacc.cc:485:replace_alu$1085
  creating $alu cell for $sub$verilog/alu.v:98$22, $ge$verilog/alu.v:154$39, $lt$verilog/alu.v:153$38: $auto$alumacc.cc:485:replace_alu$1088
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module branch_decision:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module branch_predictor:
  creating $macc model for $add$verilog/branch_predictor.v:126$166 ($add).
  creating $alu model for $macc $add$verilog/branch_predictor.v:126$166.
  creating $alu cell for $add$verilog/branch_predictor.v:126$166: $auto$alumacc.cc:485:replace_alu$1101
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cpu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_mem:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ex_mem:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module id_ex:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module if_id:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module imm_gen:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module instruction_memory:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mem_wb:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux2to1:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module pll:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module program_counter:
  creating $macc model for $add$verilog/program_counter.v:73$43 ($add).
  creating $alu model for $macc $add$verilog/program_counter.v:73$43.
  creating $alu model for $lt$verilog/program_counter.v:72$42 ($lt): new $alu
  creating $alu cell for $lt$verilog/program_counter.v:72$42: $auto$alumacc.cc:485:replace_alu$1105
  creating $alu cell for $add$verilog/program_counter.v:73$43: $auto$alumacc.cc:485:replace_alu$1110
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module regfile:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sign_mask_gen:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

20.16. Executing OPT pass (performing simple optimizations).

20.16.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
<suppressed ~3 debug messages>
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
<suppressed ~6 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 2 cells.

20.16.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

20.16.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

20.16.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.16.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.16.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 8 unused wires.
<suppressed ~4 debug messages>

20.16.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.16.9. Rerunning OPT passes. (Maybe there is more to do..)

20.16.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

20.16.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

20.16.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.16.13. Executing OPT_RMDFF pass (remove dff with constant values).

20.16.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.16.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.16.16. Finished OPT passes. (There is nothing left to do.)

20.17. Executing FSM pass (extract and optimize FSM).

20.17.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking branch_predictor.$memwr$\s_table$verilog/branch_predictor.v:113$118_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking data_mem.state as FSM state register:
    Register has an initialization value.

20.17.2. Executing FSM_EXTRACT pass (extracting FSM from design).

20.17.3. Executing FSM_OPT pass (simple optimizations of FSMs).

20.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.17.5. Executing FSM_OPT pass (simple optimizations of FSMs).

20.17.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

20.17.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

20.17.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

20.18. Executing OPT pass (performing simple optimizations).

20.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

20.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.18.5. Finished fast OPT passes.

20.19. Executing MEMORY pass.

20.19.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.19.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\s_table$verilog/branch_predictor.v:0$187' in module `\branch_predictor': merged $dff to cell.
Checking cell `$memwr$\s_table$verilog/branch_predictor.v:0$188' in module `\branch_predictor': merged $dff to cell.
Checking cell `$memrd$\s_table$verilog/branch_predictor.v:113$144' in module `\branch_predictor': merged address $dff to cell.
Checking cell `$memrd$\s_table$verilog/branch_predictor.v:127$170' in module `\branch_predictor': no (compatible) $dff found.
Checking cell `$memwr$\data_block$verilog/data_mem.v:0$335' in module `\data_mem': merged $dff to cell.
Checking cell `$memrd$\data_block$verilog/data_mem.v:261$329' in module `\data_mem': merged data $dff with rd enable to cell.
Checking cell `$memrd$\instruction_memory$verilog/instruction_mem.v:84$249' in module `\instruction_memory': merged data $dff to cell.
Checking cell `$memwr$\regfile$verilog/register_file.v:0$360' in module `\regfile': merged $dff to cell.
Checking cell `$memrd$\regfile$verilog/register_file.v:104$347' in module `\regfile': merged data $dff to cell.
Checking cell `$memrd$\regfile$verilog/register_file.v:105$348' in module `\regfile': merged data $dff to cell.

20.19.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 14 unused cells and 18 unused wires.
<suppressed ~18 debug messages>

20.19.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating write ports of memory branch_predictor.s_table by address:
  New clock domain: posedge \clk
    Port 0 ($memwr$\s_table$verilog/branch_predictor.v:0$187) has addr \hash_buff2.
      Active bits: 10
    Port 1 ($memwr$\s_table$verilog/branch_predictor.v:0$188) has addr \hash_buff2.
      Active bits: 01
      Merging port 0 into this one.
      Active bits: 11

20.19.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.19.6. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\s_table' in module `\branch_predictor':
  $meminit$\s_table$verilog/branch_predictor.v:0$171 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$172 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$173 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$174 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$175 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$176 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$177 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$178 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$179 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$180 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$181 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$182 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$183 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$184 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$185 ($meminit)
  $meminit$\s_table$verilog/branch_predictor.v:0$186 ($meminit)
  $memwr$\s_table$verilog/branch_predictor.v:0$188 ($memwr)
  $memrd$\s_table$verilog/branch_predictor.v:113$144 ($memrd)
  $memrd$\s_table$verilog/branch_predictor.v:127$170 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\data_block' in module `\data_mem':
  $meminit$\data_block$verilog/data_mem.v:0$334 ($meminit)
  $memwr$\data_block$verilog/data_mem.v:0$335 ($memwr)
  $memrd$\data_block$verilog/data_mem.v:261$329 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\instruction_memory' in module `\instruction_memory':
  $meminit$\instruction_memory$verilog/instruction_mem.v:0$251 ($meminit)
  $memrd$\instruction_memory$verilog/instruction_mem.v:84$249 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\regfile' in module `\regfile':
  $meminit$\regfile$verilog/register_file.v:0$359 ($meminit)
  $memwr$\regfile$verilog/register_file.v:0$360 ($memwr)
  $memrd$\regfile$verilog/register_file.v:104$347 ($memrd)
  $memrd$\regfile$verilog/register_file.v:105$348 ($memrd)

20.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.21. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing branch_predictor.s_table:
  Properties: ports=3 bits=32 rports=2 wports=1 dbits=2 abits=4 words=16
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=240 dwaste=14 bwaste=4064 waste=4064 efficiency=0
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=240 dwaste=14 bwaste=4064 waste=4064 efficiency=0
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=240 dwaste=14 bwaste=4064 waste=4064 efficiency=0
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=496 dwaste=6 bwaste=4064 waste=4064 efficiency=0
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1008 dwaste=2 bwaste=4064 waste=4064 efficiency=0
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min efficiency 2' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2032 dwaste=0 bwaste=4064 waste=4064 efficiency=0
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=496 dwaste=6 bwaste=4064 waste=4064 efficiency=0
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1008 dwaste=2 bwaste=4064 waste=4064 efficiency=0
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2032 dwaste=0 bwaste=4064 waste=4064 efficiency=0
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=496 dwaste=6 bwaste=4064 waste=4064 efficiency=0
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1008 dwaste=2 bwaste=4064 waste=4064 efficiency=0
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2032 dwaste=0 bwaste=4064 waste=4064 efficiency=0
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  No acceptable bram resources found.
Processing data_mem.data_block:
  Properties: ports=2 bits=3008 rports=1 wports=1 dbits=32 abits=7 words=94
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=162 dwaste=0 bwaste=2592 waste=2592 efficiency=36
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2592 efficiency=36
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=162 dwaste=0 bwaste=2592 waste=2592 efficiency=36
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=162 dwaste=0 bwaste=2592 waste=2592 efficiency=36
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=418 dwaste=0 bwaste=3344 waste=3344 efficiency=18
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3344 efficiency=18
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=930 dwaste=0 bwaste=3720 waste=3720 efficiency=9
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3720 efficiency=9
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1954 dwaste=0 bwaste=3908 waste=3908 efficiency=4
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3908 efficiency=4
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=418 dwaste=0 bwaste=3344 waste=3344 efficiency=18
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=930 dwaste=0 bwaste=3720 waste=3720 efficiency=9
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1954 dwaste=0 bwaste=3908 waste=3908 efficiency=4
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=418 dwaste=0 bwaste=3344 waste=3344 efficiency=18
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=930 dwaste=0 bwaste=3720 waste=3720 efficiency=9
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1954 dwaste=0 bwaste=3908 waste=3908 efficiency=4
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=4, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=9, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=18, cells=4, acells=1
    Efficiency for rule 1.1: efficiency=36, cells=2, acells=1
    Selected rule 1.1 with efficiency 36.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: data_block.0.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 0>: data_block.1.0.0
Processing instruction_memory.instruction_memory:
  Properties: ports=1 bits=24800 rports=1 wports=0 dbits=32 abits=10 words=775
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=249 dwaste=0 bwaste=3984 waste=3984 efficiency=75
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3984 efficiency=75
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=249 dwaste=0 bwaste=3984 waste=3984 efficiency=75
    Rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min wports 1' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=249 dwaste=0 bwaste=3984 waste=3984 efficiency=75
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=249 dwaste=0 bwaste=1992 waste=1992 efficiency=75
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=1992 efficiency=75
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=249 dwaste=0 bwaste=996 waste=996 efficiency=75
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=996 efficiency=75
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1273 dwaste=0 bwaste=2546 waste=2546 efficiency=37
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2546 efficiency=37
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=249 dwaste=0 bwaste=1992 waste=1992 efficiency=75
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min wports 1' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=249 dwaste=0 bwaste=996 waste=996 efficiency=75
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min wports 1' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1273 dwaste=0 bwaste=2546 waste=2546 efficiency=37
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min wports 1' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=249 dwaste=0 bwaste=1992 waste=1992 efficiency=75
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=249 dwaste=0 bwaste=996 waste=996 efficiency=75
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1273 dwaste=0 bwaste=2546 waste=2546 efficiency=37
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=37, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=75, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=75, cells=8, acells=2
    Efficiency for rule 1.1: efficiency=75, cells=8, acells=4
    Selected rule 4.2 with efficiency 75.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: instruction_memory.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: instruction_memory.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: instruction_memory.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: instruction_memory.3.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 0 0>: instruction_memory.4.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 0 0>: instruction_memory.5.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 0 0>: instruction_memory.6.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 0 0>: instruction_memory.7.0.0
Processing regfile.regfile:
  Properties: ports=3 bits=1024 rports=2 wports=1 dbits=32 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7168 efficiency=6
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7680 efficiency=3
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7936 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 rejected: requirement 'min efficiency 2' not met.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 2 rules:
    Efficiency for rule 4.1: efficiency=3, cells=8, acells=1
    Efficiency for rule 1.1: efficiency=6, cells=4, acells=1
    Selected rule 1.1 with efficiency 6.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: regfile.0.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 1>: regfile.0.0.1
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 0>: regfile.1.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 1>: regfile.1.0.1

20.22. Executing TECHMAP pass (map to technology primitives).

20.22.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

20.22.2. Continuing TECHMAP pass.
Using template $paramod$7c01128c47821c00041f4149da79e5374eeb90af\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$960485841f660243af450c42d6b4560e3d9823f2\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$7b51fc39ddf6be138a17f7f3b82b69837fe95bd7\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$130eaf64caadd20d82a81a2df1b2cf7ea6d408de\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$9dee9abbc3da3b8e8162e9113df14aa70f269df1\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$d5533496fe8e4338c8c87512c5c04977893040eb\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$094270b5d37b0c9314118dc199a60b679c65fde4\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$b778ecf62b88511bec7246d35f90ef6cbf3516fc\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$080d2dfe911525477a6efc3447c0b48ee8c848b7\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$378cd72d33684c04e278820707a24190eee73eae\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$f06f3c5f773df514a3e9198bc2afbc25c7336558\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$b59c4402611a6fb5c05286e6c81f074b5e19089e\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$1d43efe5b9e1370930889e8ae152f168411d88fb\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$da9cdec4625f06a32d640621d289ec6b5a81d498\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$235df307666541e918d6f44fbb7e65f7c92a1834\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$7965664a468812c41c4d58734c9721345d7e14ec\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$edbde0ff655475e3092aeea466c7406ad3457911\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$111f54600ac3f8778766fe100941a3036a48974a\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$990a32251f995c5c54c272c46f7e53b622c5a274\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$6c9aba65d88c37fa18e95b961636105620a624f2\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$12f741998897ebe7244762134afe5673b1af1eed\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$deb60f000c494dfc7731207fdf659e3fc7b24cca\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
No more expansions possible.
<suppressed ~748 debug messages>

20.23. Executing ICE40_BRAMINIT pass.

20.24. Executing OPT pass (performing simple optimizations).

20.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
<suppressed ~4 debug messages>
Optimizing module ForwardingUnit.
<suppressed ~2 debug messages>
Optimizing module adder.
Optimizing module alu.
<suppressed ~1 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
<suppressed ~1 debug messages>
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
<suppressed ~10 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
<suppressed ~61 debug messages>
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
<suppressed ~18 debug messages>
Optimizing module sign_mask_gen.
Optimizing module top.

20.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
<suppressed ~3 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
<suppressed ~9 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 4 cells.

20.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

20.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 12 unused cells and 359 unused wires.
<suppressed ~20 debug messages>

20.24.5. Finished fast OPT passes.

20.25. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \s_table in module \branch_predictor:
  created 16 $dff cells and 0 static cells of width 2.
  read interface: 1 $dff and 30 $mux cells.
  write interface: 16 write mux blocks.

20.26. Executing OPT pass (performing simple optimizations).

20.26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
<suppressed ~8 debug messages>
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
<suppressed ~3 debug messages>
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 1 cells.

20.26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

20.26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
    Consolidated identical input bits for $mux cell $procmux$893:
      Old ports: A=3'010, B=3'110, Y=$8\ALUCtl[6:0] [2:0]
      New ports: A=1'0, B=1'1, Y=$8\ALUCtl[6:0] [2]
      New connections: $8\ALUCtl[6:0] [1:0] = 2'10
    Consolidated identical input bits for $pmux cell $procmux$902:
      Old ports: A={ 4'0000 $8\ALUCtl[6:0] [2:0] }, B={ 25'0000101000011100010000000 $6\ALUCtl[6:0] [2:0] 14'00000010000000 }, Y=$7\ALUCtl[6:0]
      New ports: A={ 1'0 $8\ALUCtl[6:0] [2:0] }, B={ 13'0101011110000 $6\ALUCtl[6:0] [2:0] 8'00010000 }, Y=$7\ALUCtl[6:0] [3:0]
      New connections: $7\ALUCtl[6:0] [6:4] = 3'000
    Consolidated identical input bits for $mux cell $procmux$916:
      Old ports: A=3'011, B=3'100, Y=$6\ALUCtl[6:0] [2:0]
      New ports: A=2'01, B=2'10, Y={ $6\ALUCtl[6:0] [2] $6\ALUCtl[6:0] [0] }
      New connections: $6\ALUCtl[6:0] [1] = $6\ALUCtl[6:0] [0]
    Consolidated identical input bits for $mux cell $procmux$942:
      Old ports: A=4'1111, B=4'0010, Y=$4\ALUCtl[6:0]
      New ports: A=1'1, B=1'0, Y=$4\ALUCtl[6:0] [0]
      New connections: $4\ALUCtl[6:0] [3:1] = { $4\ALUCtl[6:0] [0] $4\ALUCtl[6:0] [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$954:
      Old ports: A=4'1111, B=4'0010, Y=$3\ALUCtl[6:0]
      New ports: A=1'1, B=1'0, Y=$3\ALUCtl[6:0] [0]
      New connections: $3\ALUCtl[6:0] [3:1] = { $3\ALUCtl[6:0] [0] $3\ALUCtl[6:0] [0] 1'1 }
    Consolidated identical input bits for $pmux cell $procmux$969:
      Old ports: A=7'0001111, B=42'001011001001100110110100011010101101100110, Y=$2\ALUCtl[6:0]
      New ports: A=4'0001, B=24'001001000110100010101100, Y={ $2\ALUCtl[6:0] [6:4] $2\ALUCtl[6:0] [0] }
      New connections: $2\ALUCtl[6:0] [3:1] = { $2\ALUCtl[6:0] [0] 2'11 }
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:204$300:
      Old ports: A={ 24'000000000000000000000000 \word_buf [15:8] }, B={ \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15:8] }, Y=$ternary$verilog/data_mem.v:204$300_Y
      New ports: A=1'0, B=\word_buf [15], Y=$ternary$verilog/data_mem.v:204$300_Y [8]
      New connections: { $ternary$verilog/data_mem.v:204$300_Y [31:9] $ternary$verilog/data_mem.v:204$300_Y [7:0] } = { $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] $ternary$verilog/data_mem.v:204$300_Y [8] \word_buf [15:8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:204$302:
      Old ports: A={ 24'000000000000000000000000 \word_buf [7:0] }, B={ \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7:0] }, Y=$ternary$verilog/data_mem.v:204$302_Y
      New ports: A=1'0, B=\word_buf [7], Y=$ternary$verilog/data_mem.v:204$302_Y [8]
      New connections: { $ternary$verilog/data_mem.v:204$302_Y [31:9] $ternary$verilog/data_mem.v:204$302_Y [7:0] } = { $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] $ternary$verilog/data_mem.v:204$302_Y [8] \word_buf [7:0] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:205$305:
      Old ports: A={ 24'000000000000000000000000 \word_buf [31:24] }, B={ \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31:24] }, Y=$ternary$verilog/data_mem.v:205$305_Y
      New ports: A=1'0, B=\word_buf [31], Y=$ternary$verilog/data_mem.v:205$305_Y [8]
      New connections: { $ternary$verilog/data_mem.v:205$305_Y [31:9] $ternary$verilog/data_mem.v:205$305_Y [7:0] } = { $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] $ternary$verilog/data_mem.v:205$305_Y [8] \word_buf [31:24] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:205$307:
      Old ports: A={ 24'000000000000000000000000 \word_buf [23:16] }, B={ \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23:16] }, Y=$ternary$verilog/data_mem.v:205$307_Y
      New ports: A=1'0, B=\word_buf [23], Y=$ternary$verilog/data_mem.v:205$307_Y [8]
      New connections: { $ternary$verilog/data_mem.v:205$307_Y [31:9] $ternary$verilog/data_mem.v:205$307_Y [7:0] } = { $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] $ternary$verilog/data_mem.v:205$307_Y [8] \word_buf [23:16] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:206$310:
      Old ports: A={ 16'0000000000000000 \word_buf [31:16] }, B={ \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31:16] }, Y=$ternary$verilog/data_mem.v:206$310_Y
      New ports: A=1'0, B=\word_buf [31], Y=$ternary$verilog/data_mem.v:206$310_Y [16]
      New connections: { $ternary$verilog/data_mem.v:206$310_Y [31:17] $ternary$verilog/data_mem.v:206$310_Y [15:0] } = { $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] $ternary$verilog/data_mem.v:206$310_Y [16] \word_buf [31:16] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:206$312:
      Old ports: A={ 16'0000000000000000 \word_buf [15:0] }, B={ \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15:0] }, Y=$ternary$verilog/data_mem.v:206$312_Y
      New ports: A=1'0, B=\word_buf [15], Y=$ternary$verilog/data_mem.v:206$312_Y [16]
      New connections: { $ternary$verilog/data_mem.v:206$312_Y [31:17] $ternary$verilog/data_mem.v:206$312_Y [15:0] } = { $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] $ternary$verilog/data_mem.v:206$312_Y [16] \word_buf [15:0] }
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:204$303:
      Old ports: A=$ternary$verilog/data_mem.v:204$302_Y, B=$ternary$verilog/data_mem.v:204$300_Y, Y=\out1
      New ports: A={ $ternary$verilog/data_mem.v:204$302_Y [8] \word_buf [7:0] }, B={ $ternary$verilog/data_mem.v:204$300_Y [8] \word_buf [15:8] }, Y=\out1 [8:0]
      New connections: \out1 [31:9] = { \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:205$308:
      Old ports: A=$ternary$verilog/data_mem.v:205$307_Y, B=$ternary$verilog/data_mem.v:205$305_Y, Y=\out2
      New ports: A={ $ternary$verilog/data_mem.v:205$307_Y [8] \word_buf [23:16] }, B={ $ternary$verilog/data_mem.v:205$305_Y [8] \word_buf [31:24] }, Y=\out2 [8:0]
      New connections: \out2 [31:9] = { \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:206$313:
      Old ports: A=$ternary$verilog/data_mem.v:206$312_Y, B=$ternary$verilog/data_mem.v:206$310_Y, Y=\out3
      New ports: A={ $ternary$verilog/data_mem.v:206$312_Y [16] \word_buf [15:0] }, B={ $ternary$verilog/data_mem.v:206$310_Y [16] \word_buf [31:16] }, Y=\out3 [16:0]
      New connections: \out3 [31:17] = { \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] }
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:209$315:
      Old ports: A=\out1, B=\out2, Y=\out5
      New ports: A=\out1 [8:0], B=\out2 [8:0], Y=\out5 [8:0]
      New connections: \out5 [31:9] = { \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] }
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 16 changes.

20.26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
<suppressed ~6 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 2 cells.

20.26.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 55 unused wires.
<suppressed ~2 debug messages>

20.26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.26.9. Rerunning OPT passes. (Maybe there is more to do..)

20.26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

20.26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

20.26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.26.13. Executing OPT_RMDFF pass (remove dff with constant values).

20.26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.26.16. Finished OPT passes. (There is nothing left to do.)

20.27. Executing ICE40_WRAPCARRY pass (wrap carries).

20.28. Executing TECHMAP pass (map to technology primitives).

20.28.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

20.28.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

20.28.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_pmux\WIDTH=31\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=7 for cells of type $pmux.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$943af4e63d02cf420cf82d17400bd04ea07088b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=11 for cells of type $pmux.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
No more expansions possible.
<suppressed ~1959 debug messages>

20.29. Executing OPT pass (performing simple optimizations).

20.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
<suppressed ~254 debug messages>
Optimizing module ForwardingUnit.
Optimizing module adder.
<suppressed ~32 debug messages>
Optimizing module alu.
<suppressed ~221 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
<suppressed ~32 debug messages>
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
<suppressed ~297 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
<suppressed ~54 debug messages>
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
<suppressed ~37 debug messages>
Optimizing module regfile.
Optimizing module sign_mask_gen.
<suppressed ~16 debug messages>
Optimizing module top.

20.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
<suppressed ~270 debug messages>
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
<suppressed ~909 debug messages>
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
<suppressed ~240 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
<suppressed ~273 debug messages>
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
<suppressed ~6 debug messages>
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
<suppressed ~9 debug messages>
Finding identical cells in module `\top'.
Removed a total of 569 cells.

20.29.3. Executing OPT_RMDFF pass (remove dff with constant values).

20.29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 253 unused cells and 870 unused wires.
<suppressed ~263 debug messages>

20.29.5. Finished fast OPT passes.

20.30. Executing ICE40_OPT pass (performing simple optimizations).

20.30.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) program_counter.$auto$alumacc.cc:485:replace_alu$1105.slice[0].carry: CO=\counter [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) program_counter.$auto$alumacc.cc:485:replace_alu$1110.slice[0].carry: CO=\counter [0]

20.30.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
<suppressed ~47 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.30.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.30.4. Executing OPT_RMDFF pass (remove dff with constant values).

20.30.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 0 unused wires.
<suppressed ~1 debug messages>

20.30.6. Rerunning OPT passes. (Removed registers in this run.)

20.30.7. Running ICE40 specific optimizations.

20.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.30.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.30.10. Executing OPT_RMDFF pass (remove dff with constant values).

20.30.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.30.12. Finished OPT passes. (There is nothing left to do.)

20.31. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module ALUControl:
Transforming FF to FF+Enable cells in module ForwardingUnit:
Transforming FF to FF+Enable cells in module adder:
Transforming FF to FF+Enable cells in module alu:
Transforming FF to FF+Enable cells in module branch_decision:
Transforming FF to FF+Enable cells in module branch_predictor:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7196 to $_DFFE_PP_ for $memory\s_table$wrmux[1][0][0]$y$1365 [0] -> \s_table[1] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7197 to $_DFFE_PP_ for $memory\s_table$wrmux[1][0][0]$y$1365 [1] -> \s_table[1] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7218 to $_DFFE_PP_ for $memory\s_table$wrmux[10][0][0]$y$1433 [0] -> \s_table[10] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7219 to $_DFFE_PP_ for $memory\s_table$wrmux[10][0][0]$y$1433 [1] -> \s_table[10] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7281 to $_DFFE_PP_ for $memory\s_table$wrmux[15][0][0]$y$1465 [0] -> \s_table[15] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7282 to $_DFFE_PP_ for $memory\s_table$wrmux[15][0][0]$y$1465 [1] -> \s_table[15] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7283 to $_DFFE_PP_ for $memory\s_table$wrmux[0][0][0]$y$1355 [0] -> \s_table[0] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7284 to $_DFFE_PP_ for $memory\s_table$wrmux[0][0][0]$y$1355 [1] -> \s_table[0] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7287 to $_DFFE_PP_ for $memory\s_table$wrmux[13][0][0]$y$1453 [0] -> \s_table[13] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7288 to $_DFFE_PP_ for $memory\s_table$wrmux[13][0][0]$y$1453 [1] -> \s_table[13] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7289 to $_DFFE_PP_ for $memory\s_table$wrmux[14][0][0]$y$1459 [0] -> \s_table[14] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7290 to $_DFFE_PP_ for $memory\s_table$wrmux[14][0][0]$y$1459 [1] -> \s_table[14] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7295 to $_DFFE_PP_ for $memory\s_table$wrmux[6][0][0]$y$1405 [0] -> \s_table[6] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7296 to $_DFFE_PP_ for $memory\s_table$wrmux[6][0][0]$y$1405 [1] -> \s_table[6] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7299 to $_DFFE_PP_ for $memory\s_table$wrmux[12][0][0]$y$1447 [0] -> \s_table[12] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7300 to $_DFFE_PP_ for $memory\s_table$wrmux[12][0][0]$y$1447 [1] -> \s_table[12] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7303 to $_DFFE_PP_ for $memory\s_table$wrmux[9][0][0]$y$1427 [0] -> \s_table[9] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7304 to $_DFFE_PP_ for $memory\s_table$wrmux[9][0][0]$y$1427 [1] -> \s_table[9] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7305 to $_DFFE_PP_ for $memory\s_table$wrmux[11][0][0]$y$1439 [0] -> \s_table[11] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7306 to $_DFFE_PP_ for $memory\s_table$wrmux[11][0][0]$y$1439 [1] -> \s_table[11] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7309 to $_DFFE_PP_ for $memory\s_table$wrmux[8][0][0]$y$1421 [0] -> \s_table[8] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7310 to $_DFFE_PP_ for $memory\s_table$wrmux[8][0][0]$y$1421 [1] -> \s_table[8] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7313 to $_DFFE_PP_ for $memory\s_table$wrmux[5][0][0]$y$1399 [0] -> \s_table[5] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7314 to $_DFFE_PP_ for $memory\s_table$wrmux[5][0][0]$y$1399 [1] -> \s_table[5] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7315 to $_DFFE_PP_ for $memory\s_table$wrmux[7][0][0]$y$1411 [0] -> \s_table[7] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7316 to $_DFFE_PP_ for $memory\s_table$wrmux[7][0][0]$y$1411 [1] -> \s_table[7] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7317 to $_DFFE_PP_ for $memory\s_table$wrmux[2][0][0]$y$1375 [0] -> \s_table[2] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7318 to $_DFFE_PP_ for $memory\s_table$wrmux[2][0][0]$y$1375 [1] -> \s_table[2] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7324 to $_DFFE_PP_ for $memory\s_table$wrmux[4][0][0]$y$1393 [0] -> \s_table[4] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7325 to $_DFFE_PP_ for $memory\s_table$wrmux[4][0][0]$y$1393 [1] -> \s_table[4] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7331 to $_DFFE_PP_ for $memory\s_table$wrmux[3][0][0]$y$1383 [0] -> \s_table[3] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7332 to $_DFFE_PP_ for $memory\s_table$wrmux[3][0][0]$y$1383 [1] -> \s_table[3] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7343 to $_DFFE_PP_ for $0\global_history[3:0] [0] -> \global_history [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7344 to $_DFFE_PP_ for $0\global_history[3:0] [1] -> \global_history [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7345 to $_DFFE_PP_ for $0\global_history[3:0] [2] -> \global_history [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7346 to $_DFFE_PP_ for $0\global_history[3:0] [3] -> \global_history [3].
Transforming FF to FF+Enable cells in module control:
Transforming FF to FF+Enable cells in module cpu:
Transforming FF to FF+Enable cells in module data_mem:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8380 to $_DFFE_PP_ for $0\read_data[31:0] [0] -> \read_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8381 to $_DFFE_PP_ for $0\read_data[31:0] [1] -> \read_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8382 to $_DFFE_PP_ for $0\read_data[31:0] [2] -> \read_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8383 to $_DFFE_PP_ for $0\read_data[31:0] [3] -> \read_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8384 to $_DFFE_PP_ for $0\read_data[31:0] [4] -> \read_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8385 to $_DFFE_PP_ for $0\read_data[31:0] [5] -> \read_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8386 to $_DFFE_PP_ for $0\read_data[31:0] [6] -> \read_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8387 to $_DFFE_PP_ for $0\read_data[31:0] [7] -> \read_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8388 to $_DFFE_PP_ for $0\read_data[31:0] [8] -> \read_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8389 to $_DFFE_PP_ for $0\read_data[31:0] [9] -> \read_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8390 to $_DFFE_PP_ for $0\read_data[31:0] [10] -> \read_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8391 to $_DFFE_PP_ for $0\read_data[31:0] [11] -> \read_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8392 to $_DFFE_PP_ for $0\read_data[31:0] [12] -> \read_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8393 to $_DFFE_PP_ for $0\read_data[31:0] [13] -> \read_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8394 to $_DFFE_PP_ for $0\read_data[31:0] [14] -> \read_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8395 to $_DFFE_PP_ for $0\read_data[31:0] [15] -> \read_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8396 to $_DFFE_PP_ for $0\read_data[31:0] [16] -> \read_data [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8397 to $_DFFE_PP_ for $0\read_data[31:0] [17] -> \read_data [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8398 to $_DFFE_PP_ for $0\read_data[31:0] [18] -> \read_data [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8399 to $_DFFE_PP_ for $0\read_data[31:0] [19] -> \read_data [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8400 to $_DFFE_PP_ for $0\read_data[31:0] [20] -> \read_data [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8401 to $_DFFE_PP_ for $0\read_data[31:0] [21] -> \read_data [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8402 to $_DFFE_PP_ for $0\read_data[31:0] [22] -> \read_data [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8403 to $_DFFE_PP_ for $0\read_data[31:0] [23] -> \read_data [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8404 to $_DFFE_PP_ for $0\read_data[31:0] [24] -> \read_data [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8405 to $_DFFE_PP_ for $0\read_data[31:0] [25] -> \read_data [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8406 to $_DFFE_PP_ for $0\read_data[31:0] [26] -> \read_data [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8407 to $_DFFE_PP_ for $0\read_data[31:0] [27] -> \read_data [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8408 to $_DFFE_PP_ for $0\read_data[31:0] [28] -> \read_data [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8409 to $_DFFE_PP_ for $0\read_data[31:0] [29] -> \read_data [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8410 to $_DFFE_PP_ for $0\read_data[31:0] [30] -> \read_data [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8411 to $_DFFE_PP_ for $0\read_data[31:0] [31] -> \read_data [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8412 to $_DFFE_PP_ for $0\clk_stall[0:0] -> \clk_stall.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8413 to $_DFFE_PP_ for $0\state[31:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8414 to $_DFFE_PP_ for $0\state[31:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8415 to $_DFFE_PP_ for $0\state[31:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8416 to $_DFFE_PP_ for $0\state[31:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8417 to $_DFFE_PP_ for $0\state[31:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8418 to $_DFFE_PP_ for $0\state[31:0] [5] -> \state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8419 to $_DFFE_PP_ for $0\state[31:0] [6] -> \state [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8420 to $_DFFE_PP_ for $0\state[31:0] [7] -> \state [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8421 to $_DFFE_PP_ for $0\state[31:0] [8] -> \state [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8422 to $_DFFE_PP_ for $0\state[31:0] [9] -> \state [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8423 to $_DFFE_PP_ for $0\state[31:0] [10] -> \state [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8424 to $_DFFE_PP_ for $0\state[31:0] [11] -> \state [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8425 to $_DFFE_PP_ for $0\state[31:0] [12] -> \state [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8426 to $_DFFE_PP_ for $0\state[31:0] [13] -> \state [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8427 to $_DFFE_PP_ for $0\state[31:0] [14] -> \state [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8428 to $_DFFE_PP_ for $0\state[31:0] [15] -> \state [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8429 to $_DFFE_PP_ for $0\state[31:0] [16] -> \state [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8430 to $_DFFE_PP_ for $0\state[31:0] [17] -> \state [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8431 to $_DFFE_PP_ for $0\state[31:0] [18] -> \state [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8432 to $_DFFE_PP_ for $0\state[31:0] [19] -> \state [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8433 to $_DFFE_PP_ for $0\state[31:0] [20] -> \state [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8434 to $_DFFE_PP_ for $0\state[31:0] [21] -> \state [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8435 to $_DFFE_PP_ for $0\state[31:0] [22] -> \state [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8436 to $_DFFE_PP_ for $0\state[31:0] [23] -> \state [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8437 to $_DFFE_PP_ for $0\state[31:0] [24] -> \state [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8438 to $_DFFE_PP_ for $0\state[31:0] [25] -> \state [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8439 to $_DFFE_PP_ for $0\state[31:0] [26] -> \state [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8440 to $_DFFE_PP_ for $0\state[31:0] [27] -> \state [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8441 to $_DFFE_PP_ for $0\state[31:0] [28] -> \state [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8442 to $_DFFE_PP_ for $0\state[31:0] [29] -> \state [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8443 to $_DFFE_PP_ for $0\state[31:0] [30] -> \state [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8444 to $_DFFE_PP_ for $0\state[31:0] [31] -> \state [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8445 to $_DFFE_PP_ for $0\memread_buf[0:0] -> \memread_buf.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8446 to $_DFFE_PP_ for $0\memwrite_buf[0:0] -> \memwrite_buf.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8447 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [0] -> \write_data_buffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8448 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [1] -> \write_data_buffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8449 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [2] -> \write_data_buffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8450 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [3] -> \write_data_buffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8451 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [4] -> \write_data_buffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8452 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [5] -> \write_data_buffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8453 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [6] -> \write_data_buffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8454 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [7] -> \write_data_buffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8455 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [8] -> \write_data_buffer [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8456 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [9] -> \write_data_buffer [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8457 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [10] -> \write_data_buffer [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8458 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [11] -> \write_data_buffer [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8459 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [12] -> \write_data_buffer [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8460 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [13] -> \write_data_buffer [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8461 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [14] -> \write_data_buffer [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8462 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [15] -> \write_data_buffer [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8463 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [16] -> \write_data_buffer [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8464 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [17] -> \write_data_buffer [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8465 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [18] -> \write_data_buffer [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8466 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [19] -> \write_data_buffer [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8467 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [20] -> \write_data_buffer [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8468 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [21] -> \write_data_buffer [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8469 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [22] -> \write_data_buffer [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8470 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [23] -> \write_data_buffer [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8471 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [24] -> \write_data_buffer [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8472 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [25] -> \write_data_buffer [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8473 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [26] -> \write_data_buffer [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8474 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [27] -> \write_data_buffer [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8475 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [28] -> \write_data_buffer [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8476 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [29] -> \write_data_buffer [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8477 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [30] -> \write_data_buffer [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8478 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [31] -> \write_data_buffer [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8479 to $_DFFE_PP_ for $0\addr_buf[31:0] [0] -> \addr_buf [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8480 to $_DFFE_PP_ for $0\addr_buf[31:0] [1] -> \addr_buf [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8481 to $_DFFE_PP_ for $0\addr_buf[31:0] [2] -> \addr_buf [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8482 to $_DFFE_PP_ for $0\addr_buf[31:0] [3] -> \addr_buf [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8483 to $_DFFE_PP_ for $0\addr_buf[31:0] [4] -> \addr_buf [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8484 to $_DFFE_PP_ for $0\addr_buf[31:0] [5] -> \addr_buf [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8485 to $_DFFE_PP_ for $0\addr_buf[31:0] [6] -> \addr_buf [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8486 to $_DFFE_PP_ for $0\addr_buf[31:0] [7] -> \addr_buf [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8487 to $_DFFE_PP_ for $0\addr_buf[31:0] [8] -> \addr_buf [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8512 to $_DFFE_PP_ for $0\sign_mask_buf[3:0] [1] -> \sign_mask_buf [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8513 to $_DFFE_PP_ for $0\sign_mask_buf[3:0] [2] -> \sign_mask_buf [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8514 to $_DFFE_PP_ for $0\sign_mask_buf[3:0] [3] -> \sign_mask_buf [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8515 to $_DFFE_PP_ for $0\led_reg[31:0] [0] -> \led_reg [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8516 to $_DFFE_PP_ for $0\led_reg[31:0] [1] -> \led_reg [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8517 to $_DFFE_PP_ for $0\led_reg[31:0] [2] -> \led_reg [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8518 to $_DFFE_PP_ for $0\led_reg[31:0] [3] -> \led_reg [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8519 to $_DFFE_PP_ for $0\led_reg[31:0] [4] -> \led_reg [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8520 to $_DFFE_PP_ for $0\led_reg[31:0] [5] -> \led_reg [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8521 to $_DFFE_PP_ for $0\led_reg[31:0] [6] -> \led_reg [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8522 to $_DFFE_PP_ for $0\led_reg[31:0] [7] -> \led_reg [7].
Transforming FF to FF+Enable cells in module ex_mem:
Transforming FF to FF+Enable cells in module id_ex:
Transforming FF to FF+Enable cells in module if_id:
Transforming FF to FF+Enable cells in module imm_gen:
Transforming FF to FF+Enable cells in module instruction_memory:
Transforming FF to FF+Enable cells in module mem_wb:
Transforming FF to FF+Enable cells in module mux2to1:
Transforming FF to FF+Enable cells in module pll:
Transforming FF to FF+Enable cells in module program_counter:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1737 to $_DFFE_PP_ for $0\outAddr[31:0] [0] -> \outAddr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1738 to $_DFFE_PP_ for $0\outAddr[31:0] [1] -> \outAddr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1739 to $_DFFE_PP_ for $0\outAddr[31:0] [2] -> \outAddr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1740 to $_DFFE_PP_ for $0\outAddr[31:0] [3] -> \outAddr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1741 to $_DFFE_PP_ for $0\outAddr[31:0] [4] -> \outAddr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1742 to $_DFFE_PP_ for $0\outAddr[31:0] [5] -> \outAddr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1743 to $_DFFE_PP_ for $0\outAddr[31:0] [6] -> \outAddr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1744 to $_DFFE_PP_ for $0\outAddr[31:0] [7] -> \outAddr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1745 to $_DFFE_PP_ for $0\outAddr[31:0] [8] -> \outAddr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1746 to $_DFFE_PP_ for $0\outAddr[31:0] [9] -> \outAddr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1747 to $_DFFE_PP_ for $0\outAddr[31:0] [10] -> \outAddr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1748 to $_DFFE_PP_ for $0\outAddr[31:0] [11] -> \outAddr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1749 to $_DFFE_PP_ for $0\outAddr[31:0] [12] -> \outAddr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1750 to $_DFFE_PP_ for $0\outAddr[31:0] [13] -> \outAddr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1751 to $_DFFE_PP_ for $0\outAddr[31:0] [14] -> \outAddr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1752 to $_DFFE_PP_ for $0\outAddr[31:0] [15] -> \outAddr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1753 to $_DFFE_PP_ for $0\outAddr[31:0] [16] -> \outAddr [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1754 to $_DFFE_PP_ for $0\outAddr[31:0] [17] -> \outAddr [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1755 to $_DFFE_PP_ for $0\outAddr[31:0] [18] -> \outAddr [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1756 to $_DFFE_PP_ for $0\outAddr[31:0] [19] -> \outAddr [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1757 to $_DFFE_PP_ for $0\outAddr[31:0] [20] -> \outAddr [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1758 to $_DFFE_PP_ for $0\outAddr[31:0] [21] -> \outAddr [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1759 to $_DFFE_PP_ for $0\outAddr[31:0] [22] -> \outAddr [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1760 to $_DFFE_PP_ for $0\outAddr[31:0] [23] -> \outAddr [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1761 to $_DFFE_PP_ for $0\outAddr[31:0] [24] -> \outAddr [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1762 to $_DFFE_PP_ for $0\outAddr[31:0] [25] -> \outAddr [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1763 to $_DFFE_PP_ for $0\outAddr[31:0] [26] -> \outAddr [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1764 to $_DFFE_PP_ for $0\outAddr[31:0] [27] -> \outAddr [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1765 to $_DFFE_PP_ for $0\outAddr[31:0] [28] -> \outAddr [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1766 to $_DFFE_PP_ for $0\outAddr[31:0] [29] -> \outAddr [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1767 to $_DFFE_PP_ for $0\outAddr[31:0] [30] -> \outAddr [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1768 to $_DFFE_PP_ for $0\outAddr[31:0] [31] -> \outAddr [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1769 to $_DFFE_PP_ for $0\counter[13:0] [0] -> \counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1770 to $_DFFE_PP_ for $0\counter[13:0] [1] -> \counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1771 to $_DFFE_PP_ for $0\counter[13:0] [2] -> \counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1772 to $_DFFE_PP_ for $0\counter[13:0] [3] -> \counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1773 to $_DFFE_PP_ for $0\counter[13:0] [4] -> \counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1774 to $_DFFE_PP_ for $0\counter[13:0] [5] -> \counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1775 to $_DFFE_PP_ for $0\counter[13:0] [6] -> \counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1776 to $_DFFE_PP_ for $0\counter[13:0] [7] -> \counter [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1777 to $_DFFE_PP_ for $0\counter[13:0] [8] -> \counter [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1778 to $_DFFE_PP_ for $0\counter[13:0] [9] -> \counter [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1779 to $_DFFE_PP_ for $0\counter[13:0] [10] -> \counter [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1780 to $_DFFE_PP_ for $0\counter[13:0] [11] -> \counter [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1781 to $_DFFE_PP_ for $0\counter[13:0] [12] -> \counter [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1782 to $_DFFE_PP_ for $0\counter[13:0] [13] -> \counter [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1783 to $_DFFE_PP_ for $0\enable[0:0] -> \enable.
Transforming FF to FF+Enable cells in module regfile:
Transforming FF to FF+Enable cells in module sign_mask_gen:
Transforming FF to FF+Enable cells in module top:

20.32. Executing TECHMAP pass (map to technology primitives).

20.32.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

20.32.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_N_ for cells of type $_DFF_N_.
No more expansions possible.
<suppressed ~774 debug messages>

20.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
<suppressed ~72 debug messages>
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
<suppressed ~238 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
<suppressed ~126 debug messages>
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.34. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping program_counter.$auto$alumacc.cc:485:replace_alu$1110.slice[0].carry ($lut).

20.35. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in ALUControl.
Handling FF init values in ForwardingUnit.
Handling FF init values in adder.
Handling FF init values in alu.
Handling FF init values in branch_decision.
Handling FF init values in branch_predictor.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7349 (SB_DFFN): \branch_mem_sig_reg = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7196 (SB_DFFE): \s_table[1] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7197 (SB_DFFE): \s_table[1] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7281 (SB_DFFE): \s_table[15] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7282 (SB_DFFE): \s_table[15] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7283 (SB_DFFE): \s_table[0] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7284 (SB_DFFE): \s_table[0] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7287 (SB_DFFE): \s_table[13] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7288 (SB_DFFE): \s_table[13] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7289 (SB_DFFE): \s_table[14] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7290 (SB_DFFE): \s_table[14] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7295 (SB_DFFE): \s_table[6] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7296 (SB_DFFE): \s_table[6] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7299 (SB_DFFE): \s_table[12] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7300 (SB_DFFE): \s_table[12] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7303 (SB_DFFE): \s_table[9] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7304 (SB_DFFE): \s_table[9] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7305 (SB_DFFE): \s_table[11] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7306 (SB_DFFE): \s_table[11] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7309 (SB_DFFE): \s_table[8] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7310 (SB_DFFE): \s_table[8] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7313 (SB_DFFE): \s_table[5] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7314 (SB_DFFE): \s_table[5] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7315 (SB_DFFE): \s_table[7] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7316 (SB_DFFE): \s_table[7] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7317 (SB_DFFE): \s_table[2] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7318 (SB_DFFE): \s_table[2] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7324 (SB_DFFE): \s_table[4] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7325 (SB_DFFE): \s_table[4] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7218 (SB_DFFE): \s_table[10] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7219 (SB_DFFE): \s_table[10] [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7331 (SB_DFFE): \s_table[3] [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7332 (SB_DFFE): \s_table[3] [1] = 0
Handling FF init values in control.
Handling FF init values in cpu.
Handling FF init values in data_mem.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8412 (SB_DFFE): \clk_stall = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8414 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8415 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8416 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8417 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8418 (SB_DFFE): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8419 (SB_DFFE): \state [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8420 (SB_DFFE): \state [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8421 (SB_DFFE): \state [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8422 (SB_DFFE): \state [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8423 (SB_DFFE): \state [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8424 (SB_DFFE): \state [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8425 (SB_DFFE): \state [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8426 (SB_DFFE): \state [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8427 (SB_DFFE): \state [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8428 (SB_DFFE): \state [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8429 (SB_DFFE): \state [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8430 (SB_DFFE): \state [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8431 (SB_DFFE): \state [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8432 (SB_DFFE): \state [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8433 (SB_DFFE): \state [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8434 (SB_DFFE): \state [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8435 (SB_DFFE): \state [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8436 (SB_DFFE): \state [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8437 (SB_DFFE): \state [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8438 (SB_DFFE): \state [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8439 (SB_DFFE): \state [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8440 (SB_DFFE): \state [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8441 (SB_DFFE): \state [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8442 (SB_DFFE): \state [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8443 (SB_DFFE): \state [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8413 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8444 (SB_DFFE): \state [31] = 0
Handling FF init values in ex_mem.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6915 (SB_DFF): \data_out [154] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6761 (SB_DFF): \data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6762 (SB_DFF): \data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6763 (SB_DFF): \data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6764 (SB_DFF): \data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6765 (SB_DFF): \data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6766 (SB_DFF): \data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6767 (SB_DFF): \data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6768 (SB_DFF): \data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6769 (SB_DFF): \data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6770 (SB_DFF): \data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6771 (SB_DFF): \data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6772 (SB_DFF): \data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6773 (SB_DFF): \data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6774 (SB_DFF): \data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6775 (SB_DFF): \data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6776 (SB_DFF): \data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6777 (SB_DFF): \data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6778 (SB_DFF): \data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6779 (SB_DFF): \data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6780 (SB_DFF): \data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6781 (SB_DFF): \data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6782 (SB_DFF): \data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6783 (SB_DFF): \data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6784 (SB_DFF): \data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6785 (SB_DFF): \data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6786 (SB_DFF): \data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6787 (SB_DFF): \data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6788 (SB_DFF): \data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6789 (SB_DFF): \data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6790 (SB_DFF): \data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6791 (SB_DFF): \data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6792 (SB_DFF): \data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6793 (SB_DFF): \data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6794 (SB_DFF): \data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6795 (SB_DFF): \data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6796 (SB_DFF): \data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6797 (SB_DFF): \data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6798 (SB_DFF): \data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6799 (SB_DFF): \data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6800 (SB_DFF): \data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6801 (SB_DFF): \data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6802 (SB_DFF): \data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6803 (SB_DFF): \data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6804 (SB_DFF): \data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6805 (SB_DFF): \data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6806 (SB_DFF): \data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6807 (SB_DFF): \data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6808 (SB_DFF): \data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6809 (SB_DFF): \data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6810 (SB_DFF): \data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6811 (SB_DFF): \data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6812 (SB_DFF): \data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6813 (SB_DFF): \data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6814 (SB_DFF): \data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6815 (SB_DFF): \data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6816 (SB_DFF): \data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6817 (SB_DFF): \data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6818 (SB_DFF): \data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6819 (SB_DFF): \data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6820 (SB_DFF): \data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6821 (SB_DFF): \data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6822 (SB_DFF): \data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6823 (SB_DFF): \data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6824 (SB_DFF): \data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6825 (SB_DFF): \data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6826 (SB_DFF): \data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6827 (SB_DFF): \data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6828 (SB_DFF): \data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6829 (SB_DFF): \data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6830 (SB_DFF): \data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6831 (SB_DFF): \data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6832 (SB_DFF): \data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6833 (SB_DFF): \data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6834 (SB_DFF): \data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6835 (SB_DFF): \data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6836 (SB_DFF): \data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6837 (SB_DFF): \data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6838 (SB_DFF): \data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6839 (SB_DFF): \data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6840 (SB_DFF): \data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6841 (SB_DFF): \data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6842 (SB_DFF): \data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6843 (SB_DFF): \data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6844 (SB_DFF): \data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6845 (SB_DFF): \data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6846 (SB_DFF): \data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6847 (SB_DFF): \data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6848 (SB_DFF): \data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6849 (SB_DFF): \data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6850 (SB_DFF): \data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6851 (SB_DFF): \data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6852 (SB_DFF): \data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6853 (SB_DFF): \data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6854 (SB_DFF): \data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6855 (SB_DFF): \data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6856 (SB_DFF): \data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6857 (SB_DFF): \data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6858 (SB_DFF): \data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6859 (SB_DFF): \data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6860 (SB_DFF): \data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6861 (SB_DFF): \data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6862 (SB_DFF): \data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6863 (SB_DFF): \data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6864 (SB_DFF): \data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6865 (SB_DFF): \data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6866 (SB_DFF): \data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6867 (SB_DFF): \data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6868 (SB_DFF): \data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6869 (SB_DFF): \data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6870 (SB_DFF): \data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6871 (SB_DFF): \data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6872 (SB_DFF): \data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6873 (SB_DFF): \data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6874 (SB_DFF): \data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6875 (SB_DFF): \data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6876 (SB_DFF): \data_out [115] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6877 (SB_DFF): \data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6878 (SB_DFF): \data_out [117] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6879 (SB_DFF): \data_out [118] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6880 (SB_DFF): \data_out [119] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6881 (SB_DFF): \data_out [120] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6882 (SB_DFF): \data_out [121] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6883 (SB_DFF): \data_out [122] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6884 (SB_DFF): \data_out [123] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6885 (SB_DFF): \data_out [124] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6886 (SB_DFF): \data_out [125] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6887 (SB_DFF): \data_out [126] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6888 (SB_DFF): \data_out [127] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6889 (SB_DFF): \data_out [128] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6890 (SB_DFF): \data_out [129] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6891 (SB_DFF): \data_out [130] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6892 (SB_DFF): \data_out [131] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6893 (SB_DFF): \data_out [132] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6894 (SB_DFF): \data_out [133] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6895 (SB_DFF): \data_out [134] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6896 (SB_DFF): \data_out [135] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6897 (SB_DFF): \data_out [136] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6898 (SB_DFF): \data_out [137] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6899 (SB_DFF): \data_out [138] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6900 (SB_DFF): \data_out [139] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6901 (SB_DFF): \data_out [140] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6902 (SB_DFF): \data_out [141] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6903 (SB_DFF): \data_out [142] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6904 (SB_DFF): \data_out [143] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6905 (SB_DFF): \data_out [144] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6906 (SB_DFF): \data_out [145] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6907 (SB_DFF): \data_out [146] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6908 (SB_DFF): \data_out [147] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6909 (SB_DFF): \data_out [148] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6910 (SB_DFF): \data_out [149] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6911 (SB_DFF): \data_out [150] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6912 (SB_DFF): \data_out [151] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6913 (SB_DFF): \data_out [152] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6914 (SB_DFF): \data_out [153] = 0
Handling FF init values in id_ex.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3590 (SB_DFF): \data_out [177] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3413 (SB_DFF): \data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3414 (SB_DFF): \data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3415 (SB_DFF): \data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3416 (SB_DFF): \data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3417 (SB_DFF): \data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3418 (SB_DFF): \data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3419 (SB_DFF): \data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3420 (SB_DFF): \data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3421 (SB_DFF): \data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3422 (SB_DFF): \data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3423 (SB_DFF): \data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3424 (SB_DFF): \data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3425 (SB_DFF): \data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3426 (SB_DFF): \data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3427 (SB_DFF): \data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3428 (SB_DFF): \data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3429 (SB_DFF): \data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3430 (SB_DFF): \data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3431 (SB_DFF): \data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3432 (SB_DFF): \data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3433 (SB_DFF): \data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3434 (SB_DFF): \data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3435 (SB_DFF): \data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3436 (SB_DFF): \data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3437 (SB_DFF): \data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3438 (SB_DFF): \data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3439 (SB_DFF): \data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3440 (SB_DFF): \data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3441 (SB_DFF): \data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3442 (SB_DFF): \data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3443 (SB_DFF): \data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3444 (SB_DFF): \data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3445 (SB_DFF): \data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3446 (SB_DFF): \data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3447 (SB_DFF): \data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3448 (SB_DFF): \data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3449 (SB_DFF): \data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3450 (SB_DFF): \data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3451 (SB_DFF): \data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3452 (SB_DFF): \data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3453 (SB_DFF): \data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3454 (SB_DFF): \data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3455 (SB_DFF): \data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3456 (SB_DFF): \data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3457 (SB_DFF): \data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3458 (SB_DFF): \data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3459 (SB_DFF): \data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3460 (SB_DFF): \data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3461 (SB_DFF): \data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3462 (SB_DFF): \data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3463 (SB_DFF): \data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3464 (SB_DFF): \data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3465 (SB_DFF): \data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3466 (SB_DFF): \data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3467 (SB_DFF): \data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3468 (SB_DFF): \data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3469 (SB_DFF): \data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3470 (SB_DFF): \data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3471 (SB_DFF): \data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3472 (SB_DFF): \data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3473 (SB_DFF): \data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3474 (SB_DFF): \data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3475 (SB_DFF): \data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3476 (SB_DFF): \data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3477 (SB_DFF): \data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3478 (SB_DFF): \data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3479 (SB_DFF): \data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3480 (SB_DFF): \data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3481 (SB_DFF): \data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3482 (SB_DFF): \data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3483 (SB_DFF): \data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3484 (SB_DFF): \data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3485 (SB_DFF): \data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3486 (SB_DFF): \data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3487 (SB_DFF): \data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3488 (SB_DFF): \data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3489 (SB_DFF): \data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3490 (SB_DFF): \data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3491 (SB_DFF): \data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3492 (SB_DFF): \data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3493 (SB_DFF): \data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3494 (SB_DFF): \data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3495 (SB_DFF): \data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3496 (SB_DFF): \data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3497 (SB_DFF): \data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3498 (SB_DFF): \data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3499 (SB_DFF): \data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3500 (SB_DFF): \data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3501 (SB_DFF): \data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3502 (SB_DFF): \data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3503 (SB_DFF): \data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3504 (SB_DFF): \data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3505 (SB_DFF): \data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3506 (SB_DFF): \data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3507 (SB_DFF): \data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3508 (SB_DFF): \data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3509 (SB_DFF): \data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3510 (SB_DFF): \data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3511 (SB_DFF): \data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3512 (SB_DFF): \data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3513 (SB_DFF): \data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3514 (SB_DFF): \data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3515 (SB_DFF): \data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3516 (SB_DFF): \data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3517 (SB_DFF): \data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3518 (SB_DFF): \data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3519 (SB_DFF): \data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3520 (SB_DFF): \data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3521 (SB_DFF): \data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3522 (SB_DFF): \data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3523 (SB_DFF): \data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3524 (SB_DFF): \data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3525 (SB_DFF): \data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3526 (SB_DFF): \data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3527 (SB_DFF): \data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3528 (SB_DFF): \data_out [115] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3529 (SB_DFF): \data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3530 (SB_DFF): \data_out [117] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3531 (SB_DFF): \data_out [118] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3532 (SB_DFF): \data_out [119] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3533 (SB_DFF): \data_out [120] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3534 (SB_DFF): \data_out [121] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3535 (SB_DFF): \data_out [122] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3536 (SB_DFF): \data_out [123] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3537 (SB_DFF): \data_out [124] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3538 (SB_DFF): \data_out [125] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3539 (SB_DFF): \data_out [126] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3540 (SB_DFF): \data_out [127] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3541 (SB_DFF): \data_out [128] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3542 (SB_DFF): \data_out [129] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3543 (SB_DFF): \data_out [130] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3544 (SB_DFF): \data_out [131] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3545 (SB_DFF): \data_out [132] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3546 (SB_DFF): \data_out [133] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3547 (SB_DFF): \data_out [134] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3548 (SB_DFF): \data_out [135] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3549 (SB_DFF): \data_out [136] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3550 (SB_DFF): \data_out [137] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3551 (SB_DFF): \data_out [138] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3552 (SB_DFF): \data_out [139] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3553 (SB_DFF): \data_out [140] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3554 (SB_DFF): \data_out [141] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3555 (SB_DFF): \data_out [142] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3556 (SB_DFF): \data_out [143] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3557 (SB_DFF): \data_out [144] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3558 (SB_DFF): \data_out [145] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3559 (SB_DFF): \data_out [146] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3560 (SB_DFF): \data_out [147] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3561 (SB_DFF): \data_out [148] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3562 (SB_DFF): \data_out [149] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3563 (SB_DFF): \data_out [150] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3564 (SB_DFF): \data_out [151] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3565 (SB_DFF): \data_out [152] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3566 (SB_DFF): \data_out [153] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3567 (SB_DFF): \data_out [154] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3568 (SB_DFF): \data_out [155] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3569 (SB_DFF): \data_out [156] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3570 (SB_DFF): \data_out [157] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3571 (SB_DFF): \data_out [158] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3572 (SB_DFF): \data_out [159] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3573 (SB_DFF): \data_out [160] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3574 (SB_DFF): \data_out [161] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3575 (SB_DFF): \data_out [162] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3576 (SB_DFF): \data_out [163] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3577 (SB_DFF): \data_out [164] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3578 (SB_DFF): \data_out [165] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3579 (SB_DFF): \data_out [166] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3580 (SB_DFF): \data_out [167] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3581 (SB_DFF): \data_out [168] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3582 (SB_DFF): \data_out [169] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3583 (SB_DFF): \data_out [170] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3584 (SB_DFF): \data_out [171] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3585 (SB_DFF): \data_out [172] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3586 (SB_DFF): \data_out [173] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3587 (SB_DFF): \data_out [174] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3588 (SB_DFF): \data_out [175] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3589 (SB_DFF): \data_out [176] = 0
Handling FF init values in if_id.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1898 (SB_DFF): \data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1837 (SB_DFF): \data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1836 (SB_DFF): \data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1835 (SB_DFF): \data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1838 (SB_DFF): \data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1839 (SB_DFF): \data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1840 (SB_DFF): \data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1841 (SB_DFF): \data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1842 (SB_DFF): \data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1843 (SB_DFF): \data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1844 (SB_DFF): \data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1845 (SB_DFF): \data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1846 (SB_DFF): \data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1847 (SB_DFF): \data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1848 (SB_DFF): \data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1849 (SB_DFF): \data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1850 (SB_DFF): \data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1851 (SB_DFF): \data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1852 (SB_DFF): \data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1853 (SB_DFF): \data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1854 (SB_DFF): \data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1855 (SB_DFF): \data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1856 (SB_DFF): \data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1857 (SB_DFF): \data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1858 (SB_DFF): \data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1859 (SB_DFF): \data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1860 (SB_DFF): \data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1861 (SB_DFF): \data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1862 (SB_DFF): \data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1863 (SB_DFF): \data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1864 (SB_DFF): \data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1865 (SB_DFF): \data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1866 (SB_DFF): \data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1867 (SB_DFF): \data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1868 (SB_DFF): \data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1869 (SB_DFF): \data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1870 (SB_DFF): \data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1871 (SB_DFF): \data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1872 (SB_DFF): \data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1873 (SB_DFF): \data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1874 (SB_DFF): \data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1875 (SB_DFF): \data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1876 (SB_DFF): \data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1877 (SB_DFF): \data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1878 (SB_DFF): \data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1879 (SB_DFF): \data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1880 (SB_DFF): \data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1881 (SB_DFF): \data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1882 (SB_DFF): \data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1883 (SB_DFF): \data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1884 (SB_DFF): \data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1885 (SB_DFF): \data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1886 (SB_DFF): \data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1887 (SB_DFF): \data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1888 (SB_DFF): \data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1889 (SB_DFF): \data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1890 (SB_DFF): \data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1891 (SB_DFF): \data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1892 (SB_DFF): \data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1893 (SB_DFF): \data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1894 (SB_DFF): \data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1895 (SB_DFF): \data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1896 (SB_DFF): \data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1897 (SB_DFF): \data_out [62] = 0
Handling FF init values in imm_gen.
Handling FF init values in instruction_memory.
Handling FF init values in mem_wb.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7038 (SB_DFF): \data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6922 (SB_DFF): \data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6923 (SB_DFF): \data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6924 (SB_DFF): \data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6925 (SB_DFF): \data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6926 (SB_DFF): \data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6927 (SB_DFF): \data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6928 (SB_DFF): \data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6929 (SB_DFF): \data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6930 (SB_DFF): \data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6931 (SB_DFF): \data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6932 (SB_DFF): \data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6933 (SB_DFF): \data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6934 (SB_DFF): \data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6935 (SB_DFF): \data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6936 (SB_DFF): \data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6937 (SB_DFF): \data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6938 (SB_DFF): \data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6939 (SB_DFF): \data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6940 (SB_DFF): \data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6941 (SB_DFF): \data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6942 (SB_DFF): \data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6943 (SB_DFF): \data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6944 (SB_DFF): \data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6945 (SB_DFF): \data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6946 (SB_DFF): \data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6947 (SB_DFF): \data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6948 (SB_DFF): \data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6949 (SB_DFF): \data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6950 (SB_DFF): \data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6951 (SB_DFF): \data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6952 (SB_DFF): \data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6953 (SB_DFF): \data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6954 (SB_DFF): \data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6955 (SB_DFF): \data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6956 (SB_DFF): \data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6957 (SB_DFF): \data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6958 (SB_DFF): \data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6959 (SB_DFF): \data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6960 (SB_DFF): \data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6961 (SB_DFF): \data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6962 (SB_DFF): \data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6963 (SB_DFF): \data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6964 (SB_DFF): \data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6965 (SB_DFF): \data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6966 (SB_DFF): \data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6967 (SB_DFF): \data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6968 (SB_DFF): \data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6969 (SB_DFF): \data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6970 (SB_DFF): \data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6971 (SB_DFF): \data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6972 (SB_DFF): \data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6973 (SB_DFF): \data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6974 (SB_DFF): \data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6975 (SB_DFF): \data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6976 (SB_DFF): \data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6977 (SB_DFF): \data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6978 (SB_DFF): \data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6979 (SB_DFF): \data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6980 (SB_DFF): \data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6981 (SB_DFF): \data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6982 (SB_DFF): \data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6983 (SB_DFF): \data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6984 (SB_DFF): \data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6985 (SB_DFF): \data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6986 (SB_DFF): \data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6987 (SB_DFF): \data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6988 (SB_DFF): \data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6989 (SB_DFF): \data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6990 (SB_DFF): \data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6991 (SB_DFF): \data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6992 (SB_DFF): \data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6993 (SB_DFF): \data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6994 (SB_DFF): \data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6995 (SB_DFF): \data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6996 (SB_DFF): \data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6997 (SB_DFF): \data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6998 (SB_DFF): \data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6999 (SB_DFF): \data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7000 (SB_DFF): \data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7001 (SB_DFF): \data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7002 (SB_DFF): \data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7003 (SB_DFF): \data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7004 (SB_DFF): \data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7005 (SB_DFF): \data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7006 (SB_DFF): \data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7007 (SB_DFF): \data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7008 (SB_DFF): \data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7009 (SB_DFF): \data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7010 (SB_DFF): \data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7011 (SB_DFF): \data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7012 (SB_DFF): \data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7013 (SB_DFF): \data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7014 (SB_DFF): \data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7015 (SB_DFF): \data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7016 (SB_DFF): \data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7017 (SB_DFF): \data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7018 (SB_DFF): \data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7019 (SB_DFF): \data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7020 (SB_DFF): \data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7021 (SB_DFF): \data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7022 (SB_DFF): \data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7023 (SB_DFF): \data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7024 (SB_DFF): \data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7025 (SB_DFF): \data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7026 (SB_DFF): \data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7027 (SB_DFF): \data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7028 (SB_DFF): \data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7029 (SB_DFF): \data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7030 (SB_DFF): \data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7031 (SB_DFF): \data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7032 (SB_DFF): \data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7033 (SB_DFF): \data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7034 (SB_DFF): \data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7035 (SB_DFF): \data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7036 (SB_DFF): \data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7037 (SB_DFF): \data_out [115] = 0
Handling FF init values in mux2to1.
Handling FF init values in pll.
Handling FF init values in program_counter.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1782 (SB_DFFE): \counter [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1783 (SB_DFFE): \enable = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1738 (SB_DFFE): \outAddr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1739 (SB_DFFE): \outAddr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1740 (SB_DFFE): \outAddr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1741 (SB_DFFE): \outAddr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1742 (SB_DFFE): \outAddr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1743 (SB_DFFE): \outAddr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1744 (SB_DFFE): \outAddr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1745 (SB_DFFE): \outAddr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1746 (SB_DFFE): \outAddr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1747 (SB_DFFE): \outAddr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1748 (SB_DFFE): \outAddr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1749 (SB_DFFE): \outAddr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1750 (SB_DFFE): \outAddr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1751 (SB_DFFE): \outAddr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1752 (SB_DFFE): \outAddr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1753 (SB_DFFE): \outAddr [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1754 (SB_DFFE): \outAddr [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1755 (SB_DFFE): \outAddr [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1756 (SB_DFFE): \outAddr [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1757 (SB_DFFE): \outAddr [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1758 (SB_DFFE): \outAddr [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1759 (SB_DFFE): \outAddr [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1760 (SB_DFFE): \outAddr [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1761 (SB_DFFE): \outAddr [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1762 (SB_DFFE): \outAddr [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1763 (SB_DFFE): \outAddr [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1764 (SB_DFFE): \outAddr [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1765 (SB_DFFE): \outAddr [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1766 (SB_DFFE): \outAddr [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1767 (SB_DFFE): \outAddr [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1737 (SB_DFFE): \outAddr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1768 (SB_DFFE): \outAddr [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1770 (SB_DFFE): \counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1771 (SB_DFFE): \counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1772 (SB_DFFE): \counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1773 (SB_DFFE): \counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1774 (SB_DFFE): \counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1775 (SB_DFFE): \counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1776 (SB_DFFE): \counter [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1777 (SB_DFFE): \counter [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1778 (SB_DFFE): \counter [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1779 (SB_DFFE): \counter [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1780 (SB_DFFE): \counter [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1781 (SB_DFFE): \counter [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1769 (SB_DFFE): \counter [0] = 0
Handling FF init values in regfile.
Handling FF init values in sign_mask_gen.
Handling FF init values in top.

20.36. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in ALUControl.
Merging set/reset $_MUX_ cells into SB_FFs in ForwardingUnit.
Merging set/reset $_MUX_ cells into SB_FFs in adder.
Merging set/reset $_MUX_ cells into SB_FFs in alu.
Merging set/reset $_MUX_ cells into SB_FFs in branch_decision.
Merging set/reset $_MUX_ cells into SB_FFs in branch_predictor.
Merging set/reset $_MUX_ cells into SB_FFs in control.
Merging set/reset $_MUX_ cells into SB_FFs in cpu.
Merging set/reset $_MUX_ cells into SB_FFs in data_mem.
Merging set/reset $_MUX_ cells into SB_FFs in ex_mem.
Merging set/reset $_MUX_ cells into SB_FFs in id_ex.
Merging set/reset $_MUX_ cells into SB_FFs in if_id.
Merging set/reset $_MUX_ cells into SB_FFs in imm_gen.
Merging set/reset $_MUX_ cells into SB_FFs in instruction_memory.
Merging set/reset $_MUX_ cells into SB_FFs in mem_wb.
Merging set/reset $_MUX_ cells into SB_FFs in mux2to1.
Merging set/reset $_MUX_ cells into SB_FFs in pll.
Merging set/reset $_MUX_ cells into SB_FFs in program_counter.
  Merging $auto$simplemap.cc:277:simplemap_mux$1706 (A=1'0, B=\inAddr [1], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1738 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1707 (A=1'0, B=\inAddr [2], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1739 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1708 (A=1'0, B=\inAddr [3], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1740 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1709 (A=1'0, B=\inAddr [4], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1741 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1710 (A=1'0, B=\inAddr [5], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1742 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1711 (A=1'0, B=\inAddr [6], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1743 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1712 (A=1'0, B=\inAddr [7], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1744 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1713 (A=1'0, B=\inAddr [8], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1745 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1714 (A=1'0, B=\inAddr [9], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1746 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1715 (A=1'0, B=\inAddr [10], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1747 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1716 (A=1'0, B=\inAddr [11], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1748 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1717 (A=1'0, B=\inAddr [12], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1749 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1718 (A=1'0, B=\inAddr [13], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1750 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1719 (A=1'0, B=\inAddr [14], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1751 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1720 (A=1'0, B=\inAddr [15], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1752 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1721 (A=1'0, B=\inAddr [16], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1753 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1722 (A=1'0, B=\inAddr [17], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1754 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1723 (A=1'0, B=\inAddr [18], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1755 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1724 (A=1'0, B=\inAddr [19], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1756 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1725 (A=1'0, B=\inAddr [20], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1757 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1726 (A=1'0, B=\inAddr [21], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1758 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1727 (A=1'0, B=\inAddr [22], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1759 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1728 (A=1'0, B=\inAddr [23], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1760 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1729 (A=1'0, B=\inAddr [24], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1761 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1730 (A=1'0, B=\inAddr [25], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1762 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1731 (A=1'0, B=\inAddr [26], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1763 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1732 (A=1'0, B=\inAddr [27], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1764 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1733 (A=1'0, B=\inAddr [28], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1765 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1734 (A=1'0, B=\inAddr [29], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1766 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1735 (A=1'0, B=\inAddr [30], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1767 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1705 (A=1'0, B=\inAddr [0], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1737 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1736 (A=1'0, B=\inAddr [31], S=$auto$alumacc.cc:502:replace_alu$1107 [13]) into $auto$simplemap.cc:420:simplemap_dff$1768 (SB_DFFE).
Merging set/reset $_MUX_ cells into SB_FFs in regfile.
Merging set/reset $_MUX_ cells into SB_FFs in sign_mask_gen.
Merging set/reset $_MUX_ cells into SB_FFs in top.

20.37. Executing ICE40_OPT pass (performing simple optimizations).

20.37.1. Running ICE40 specific optimizations.

20.37.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
<suppressed ~11 debug messages>
Optimizing module ForwardingUnit.
<suppressed ~2 debug messages>
Optimizing module adder.
Optimizing module alu.
<suppressed ~33 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
<suppressed ~8 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
<suppressed ~46 debug messages>
Optimizing module regfile.
Optimizing module sign_mask_gen.
<suppressed ~4 debug messages>
Optimizing module top.
<suppressed ~1 debug messages>

20.37.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
<suppressed ~234 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
<suppressed ~324 debug messages>
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 186 cells.

20.37.4. Executing OPT_RMDFF pass (remove dff with constant values).

20.37.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 32 unused cells and 3149 unused wires.
<suppressed ~42 debug messages>

20.37.6. Rerunning OPT passes. (Removed registers in this run.)

20.37.7. Running ICE40 specific optimizations.

20.37.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.37.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.37.10. Executing OPT_RMDFF pass (remove dff with constant values).

20.37.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.37.12. Finished OPT passes. (There is nothing left to do.)

20.38. Executing TECHMAP pass (map to technology primitives).

20.38.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

20.38.2. Continuing TECHMAP pass.
No more expansions possible.

20.39. Executing ABC pass (technology mapping using ABC).

20.39.1. Extracting gate netlist of module `\ALUControl' to `<abc-temp-dir>/input.blif'..
Extracted 167 gates and 179 wires to a netlist network with 11 inputs and 7 outputs.

20.39.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      15.
ABC: Participating nodes from both networks       =      42.
ABC: Participating nodes from the first network   =      14. (  41.18 % of nodes)
ABC: Participating nodes from the second network  =      28. (  82.35 % of nodes)
ABC: Node pairs (any polarity)                    =      14. (  41.18 % of names can be moved)
ABC: Node pairs (same polarity)                   =       9. (  26.47 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       33
ABC RESULTS:        internal signals:      161
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        7
Removing temp directory.

20.39.2. Extracting gate netlist of module `\ForwardingUnit' to `<abc-temp-dir>/input.blif'..
Extracted 67 gates and 89 wires to a netlist network with 22 inputs and 4 outputs.

20.39.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      12.
ABC: Participating nodes from both networks       =      22.
ABC: Participating nodes from the first network   =      11. (  45.83 % of nodes)
ABC: Participating nodes from the second network  =      11. (  45.83 % of nodes)
ABC: Node pairs (any polarity)                    =      11. (  45.83 % of names can be moved)
ABC: Node pairs (same polarity)                   =       4. (  16.67 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.2.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       23
ABC RESULTS:        internal signals:       63
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        4
Removing temp directory.

20.39.3. Extracting gate netlist of module `\adder' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.4. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 1392 gates and 1532 wires to a netlist network with 139 inputs and 65 outputs.

20.39.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     292.
ABC: Participating nodes from both networks       =     638.
ABC: Participating nodes from the first network   =     291. (  45.05 % of nodes)
ABC: Participating nodes from the second network  =     347. (  53.72 % of nodes)
ABC: Node pairs (any polarity)                    =     291. (  45.05 % of names can be moved)
ABC: Node pairs (same polarity)                   =     135. (  20.90 % of names can be moved)
ABC: Total runtime =     0.04 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.4.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      645
ABC RESULTS:        internal signals:     1328
ABC RESULTS:           input signals:      139
ABC RESULTS:          output signals:       65
Removing temp directory.

20.39.5. Extracting gate netlist of module `\branch_decision' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 10 wires to a netlist network with 4 inputs and 3 outputs.

20.39.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       7.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       4. ( 100.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.5.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        3
Removing temp directory.

20.39.6. Extracting gate netlist of module `\branch_predictor' to `<abc-temp-dir>/input.blif'..
Extracted 104 gates and 151 wires to a netlist network with 47 inputs and 23 outputs.

20.39.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      30.
ABC: Participating nodes from both networks       =      59.
ABC: Participating nodes from the first network   =      29. (  43.28 % of nodes)
ABC: Participating nodes from the second network  =      30. (  44.78 % of nodes)
ABC: Node pairs (any polarity)                    =      29. (  43.28 % of names can be moved)
ABC: Node pairs (same polarity)                   =      28. (  41.79 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.6.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       66
ABC RESULTS:        internal signals:       81
ABC RESULTS:           input signals:       47
ABC RESULTS:          output signals:       23
Removing temp directory.

20.39.7. Extracting gate netlist of module `\control' to `<abc-temp-dir>/input.blif'..
Extracted 36 gates and 43 wires to a netlist network with 7 inputs and 12 outputs.

20.39.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      13.
ABC: Participating nodes from both networks       =      24.
ABC: Participating nodes from the first network   =      12. (  85.71 % of nodes)
ABC: Participating nodes from the second network  =      12. (  85.71 % of nodes)
ABC: Node pairs (any polarity)                    =      12. (  85.71 % of names can be moved)
ABC: Node pairs (same polarity)                   =      12. (  85.71 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.7.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       13
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:       12
Removing temp directory.

20.39.8. Extracting gate netlist of module `\cpu' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 3 outputs.

20.39.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       6.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       3. (  75.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.8.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        3
Removing temp directory.

20.39.9. Extracting gate netlist of module `\data_mem' to `<abc-temp-dir>/input.blif'..
Extracted 608 gates and 746 wires to a netlist network with 137 inputs and 105 outputs.

20.39.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      90.
ABC: Participating nodes from both networks       =     301.
ABC: Participating nodes from the first network   =     119. (  49.38 % of nodes)
ABC: Participating nodes from the second network  =     182. (  75.52 % of nodes)
ABC: Node pairs (any polarity)                    =     119. (  49.38 % of names can be moved)
ABC: Node pairs (same polarity)                   =     100. (  41.49 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.9.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      210
ABC RESULTS:        internal signals:      504
ABC RESULTS:           input signals:      137
ABC RESULTS:          output signals:      105
Removing temp directory.

20.39.10. Extracting gate netlist of module `\ex_mem' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.11. Extracting gate netlist of module `\id_ex' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.12. Extracting gate netlist of module `\if_id' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.13. Extracting gate netlist of module `\imm_gen' to `<abc-temp-dir>/input.blif'..
Extracted 231 gates and 260 wires to a netlist network with 29 inputs and 31 outputs.

20.39.13.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      48.
ABC: Participating nodes from both networks       =      95.
ABC: Participating nodes from the first network   =      47. (  88.68 % of nodes)
ABC: Participating nodes from the second network  =      48. (  90.57 % of nodes)
ABC: Node pairs (any polarity)                    =      47. (  88.68 % of names can be moved)
ABC: Node pairs (same polarity)                   =      46. (  86.79 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.13.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       52
ABC RESULTS:        internal signals:      200
ABC RESULTS:           input signals:       29
ABC RESULTS:          output signals:       31
Removing temp directory.

20.39.14. Extracting gate netlist of module `\instruction_memory' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.15. Extracting gate netlist of module `\mem_wb' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.16. Extracting gate netlist of module `\mux2to1' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 97 wires to a netlist network with 65 inputs and 32 outputs.

20.39.16.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      33.
ABC: Participating nodes from both networks       =      64.
ABC: Participating nodes from the first network   =      32. (  96.97 % of nodes)
ABC: Participating nodes from the second network  =      32. (  96.97 % of nodes)
ABC: Node pairs (any polarity)                    =      32. (  96.97 % of names can be moved)
ABC: Node pairs (same polarity)                   =      32. (  96.97 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.16.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

20.39.17. Extracting gate netlist of module `\pll' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.18. Extracting gate netlist of module `\program_counter' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 3 outputs.

20.39.18.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       6.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       3. (  75.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.18.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        3
Removing temp directory.

20.39.19. Extracting gate netlist of module `\regfile' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 216 wires to a netlist network with 118 inputs and 66 outputs.

20.39.19.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      69.
ABC: Participating nodes from both networks       =     138.
ABC: Participating nodes from the first network   =      69. (  84.15 % of nodes)
ABC: Participating nodes from the second network  =      69. (  84.15 % of nodes)
ABC: Node pairs (any polarity)                    =      69. (  84.15 % of names can be moved)
ABC: Node pairs (same polarity)                   =      67. (  81.71 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.19.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       81
ABC RESULTS:        internal signals:       32
ABC RESULTS:           input signals:      118
ABC RESULTS:          output signals:       66
Removing temp directory.

20.39.20. Extracting gate netlist of module `\sign_mask_gen' to `<abc-temp-dir>/input.blif'..
Extracted 13 gates and 16 wires to a netlist network with 3 inputs and 4 outputs.

20.39.20.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       5.
ABC: Participating nodes from both networks       =      11.
ABC: Participating nodes from the first network   =       4. (  80.00 % of nodes)
ABC: Participating nodes from the second network  =       7. ( 140.00 % of nodes)
ABC: Node pairs (any polarity)                    =       4. (  80.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       4. (  80.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.20.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        4
ABC RESULTS:        internal signals:        9
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        4
Removing temp directory.

20.39.21. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 5 wires to a netlist network with 2 inputs and 3 outputs.

20.39.21.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       3.
ABC: Participating nodes from both networks       =       6.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       3. (  75.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.21.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        3
Removing temp directory.

20.40. Executing ICE40_WRAPCARRY pass (wrap carries).

20.41. Executing TECHMAP pass (map to technology primitives).

20.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

20.41.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 37 unused cells and 1528 unused wires.

20.42. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       33
  2-LUT                4
  3-LUT               10
  4-LUT               19

Eliminating LUTs.
Number of LUTs:       33
  2-LUT                4
  3-LUT               10
  4-LUT               19

Combining LUTs.
Number of LUTs:       33
  2-LUT                4
  3-LUT               10
  4-LUT               19
Discovering LUTs.
Number of LUTs:       23
  3-LUT                6
  4-LUT               17

Eliminating LUTs.
Number of LUTs:       23
  3-LUT                6
  4-LUT               17

Combining LUTs.
Number of LUTs:       23
  3-LUT                6
  4-LUT               17
Discovering LUTs.
Number of LUTs:       32
  2-LUT                1
  3-LUT               31

Eliminating LUTs.
Number of LUTs:       32
  2-LUT                1
  3-LUT               31

Combining LUTs.
Number of LUTs:       32
  2-LUT                1
  3-LUT               31
Discovering LUTs.
Number of LUTs:      710
  1-LUT               32
  2-LUT               59
  3-LUT              252
  4-LUT              367

Eliminating LUTs.
Number of LUTs:      710
  1-LUT               32
  2-LUT               59
  3-LUT              252
  4-LUT              367

Combining LUTs.
Number of LUTs:      702
  1-LUT               32
  2-LUT               52
  3-LUT              243
  4-LUT              375
Discovering LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1

Eliminating LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1

Combining LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1
Discovering LUTs.
Number of LUTs:       98
  2-LUT                9
  3-LUT               35
  4-LUT               54

Eliminating LUTs.
Number of LUTs:       98
  2-LUT                9
  3-LUT               35
  4-LUT               54

Combining LUTs.
Number of LUTs:       98
  2-LUT                9
  3-LUT               35
  4-LUT               54
Discovering LUTs.
Number of LUTs:       13
  2-LUT                4
  3-LUT                4
  4-LUT                5

Eliminating LUTs.
Number of LUTs:       13
  2-LUT                4
  3-LUT                4
  4-LUT                5

Combining LUTs.
Number of LUTs:       13
  2-LUT                4
  3-LUT                4
  4-LUT                5
Discovering LUTs.
Number of LUTs:        3
  2-LUT                2
  4-LUT                1

Eliminating LUTs.
Number of LUTs:        3
  2-LUT                2
  4-LUT                1

Combining LUTs.
Number of LUTs:        3
  2-LUT                2
  4-LUT                1
Discovering LUTs.
Number of LUTs:      210
  1-LUT                1
  2-LUT               27
  3-LUT               80
  4-LUT              102

Eliminating LUTs.
Number of LUTs:      210
  1-LUT                1
  2-LUT               27
  3-LUT               80
  4-LUT              102

Combining LUTs.
Number of LUTs:      210
  1-LUT                1
  2-LUT               27
  3-LUT               80
  4-LUT              102
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:       52
  2-LUT               19
  3-LUT               13
  4-LUT               20

Eliminating LUTs.
Number of LUTs:       52
  2-LUT               19
  3-LUT               13
  4-LUT               20

Combining LUTs.
Number of LUTs:       52
  2-LUT               19
  3-LUT               13
  4-LUT               20
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:       32
  3-LUT               32

Eliminating LUTs.
Number of LUTs:       32
  3-LUT               32

Combining LUTs.
Number of LUTs:       32
  3-LUT               32
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:       16
  1-LUT                2
  2-LUT               14

Eliminating LUTs.
Number of LUTs:       16
  1-LUT                2
  2-LUT               14

Combining LUTs.
Number of LUTs:       16
  1-LUT                2
  2-LUT               14
Discovering LUTs.
Number of LUTs:       81
  1-LUT                1
  2-LUT                3
  3-LUT                4
  4-LUT               73

Eliminating LUTs.
Number of LUTs:       81
  1-LUT                1
  2-LUT                3
  3-LUT                4
  4-LUT               73

Combining LUTs.
Number of LUTs:       81
  1-LUT                1
  2-LUT                3
  3-LUT                4
  4-LUT               73
Discovering LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3

Eliminating LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3

Combining LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3
Discovering LUTs.
Number of LUTs:        3
  1-LUT                1
  2-LUT                2

Eliminating LUTs.
Number of LUTs:        3
  1-LUT                1
  2-LUT                2

Combining LUTs.
Number of LUTs:        3
  1-LUT                1
  2-LUT                2

Eliminated 0 LUTs.
Combined 8 LUTs.
<suppressed ~7538 debug messages>

20.43. Executing TECHMAP pass (map to technology primitives).

20.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

20.43.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000010100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101011001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100000010110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111011100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000001000101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110111001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111100010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101000111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011011100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011010010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010000011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101000111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001100000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001100111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110011111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101000011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111001100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100000011001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111001111000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011101010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010101010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101011110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011110100000000 for cells of type $lut.
No more expansions possible.
<suppressed ~3515 debug messages>
Removed 0 unused cells and 2618 unused wires.

20.44. Executing AUTONAME pass.
Renamed 210 objects in module ALUControl (16 iterations).
Renamed 96 objects in module ForwardingUnit (6 iterations).
Renamed 95 objects in module adder (3 iterations).
Renamed 6777 objects in module alu (23 iterations).
Renamed 3 objects in module branch_decision (2 iterations).
Renamed 919 objects in module branch_predictor (13 iterations).
Renamed 16 objects in module control (4 iterations).
Renamed 3 objects in module cpu (2 iterations).
Renamed 1430 objects in module data_mem (23 iterations).
Renamed 155 objects in module ex_mem (2 iterations).
Renamed 178 objects in module id_ex (2 iterations).
Renamed 64 objects in module if_id (2 iterations).
Renamed 169 objects in module imm_gen (12 iterations).
Renamed 8 objects in module instruction_memory (2 iterations).
Renamed 117 objects in module mem_wb (2 iterations).
Renamed 32 objects in module mux2to1 (2 iterations).
Renamed 229 objects in module program_counter (8 iterations).
Renamed 262 objects in module regfile (14 iterations).
Renamed 4 objects in module sign_mask_gen (2 iterations).
Renamed 10 objects in module top (4 iterations).
<suppressed ~3233 debug messages>

20.45. Executing HIERARCHY pass (managing design hierarchy).

20.45.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \pll
Used module:     \cpu
Used module:         \program_counter
Used module:         \mux2to1
Used module:         \adder
Used module:         \ALUControl
Used module:         \alu
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         \control
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen

20.45.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \pll
Used module:     \cpu
Used module:         \program_counter
Used module:         \mux2to1
Used module:         \adder
Used module:         \ALUControl
Used module:         \alu
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         \control
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen
Removed 0 unused modules.

20.46. Printing statistics.

=== ALUControl ===

   Number of wires:                 29
   Number of wire bits:             44
   Number of public wires:          29
   Number of public wire bits:      44
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 33
     SB_LUT4                        33

=== ForwardingUnit ===

   Number of wires:                 34
   Number of wire bits:             83
   Number of public wires:          34
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 23
     SB_LUT4                        23

=== adder ===

   Number of wires:                  4
   Number of wire bits:            128
   Number of public wires:           4
   Number of public wire bits:     128
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 63
     SB_CARRY                       31
     SB_LUT4                        32

=== alu ===

   Number of wires:                680
   Number of wire bits:            872
   Number of public wires:         680
   Number of public wire bits:     872
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                797
     SB_CARRY                       95
     SB_LUT4                       702

=== branch_decision ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     SB_LUT4                         3

=== branch_predictor ===

   Number of wires:                 92
   Number of wire bits:            277
   Number of public wires:          92
   Number of public wire bits:     277
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                174
     SB_CARRY                       31
     SB_DFF                          8
     SB_DFFE                        36
     SB_DFFN                         1
     SB_LUT4                        98

=== control ===

   Number of wires:                 14
   Number of wire bits:             20
   Number of public wires:          14
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     SB_LUT4                        13

=== cpu ===

   Number of wires:                 71
   Number of wire bits:           1740
   Number of public wires:          71
   Number of public wire bits:    1740
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 43
     ALUControl                      1
     ForwardingUnit                  1
     SB_LUT4                         3
     adder                           2
     alu                             1
     branch_decision                 1
     branch_predictor                1
     control                         1
     ex_mem                          1
     id_ex                           1
     if_id                           1
     imm_gen                         1
     mem_wb                          1
     mux2to1                        24
     program_counter                 1
     regfile                         1
     sign_mask_gen                   1

=== data_mem ===

   Number of wires:                176
   Number of wire bits:            723
   Number of public wires:         176
   Number of public wire bits:     723
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                331
     SB_DFFE                       119
     SB_LUT4                       210
     SB_RAM40_4K                     2

=== ex_mem ===

   Number of wires:                  3
   Number of wire bits:            311
   Number of public wires:           3
   Number of public wire bits:     311
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                155
     SB_DFF                        155

=== id_ex ===

   Number of wires:                  3
   Number of wire bits:            357
   Number of public wires:           3
   Number of public wire bits:     357
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                178
     SB_DFF                        178

=== if_id ===

   Number of wires:                  3
   Number of wire bits:            129
   Number of public wires:           3
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 64
     SB_DFF                         64

=== imm_gen ===

   Number of wires:                 23
   Number of wire bits:             85
   Number of public wires:          23
   Number of public wire bits:      85
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     SB_LUT4                        52

=== instruction_memory ===

   Number of wires:                 11
   Number of wire bits:            193
   Number of public wires:          11
   Number of public wire bits:     193
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     SB_RAM40_4K                     8

=== mem_wb ===

   Number of wires:                  3
   Number of wire bits:            235
   Number of public wires:           3
   Number of public wire bits:     235
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                117
     SB_DFF                        117

=== mux2to1 ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     SB_LUT4                        32

=== pll ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     SB_PLL40_CORE                   1

=== program_counter ===

   Number of wires:                 11
   Number of wire bits:            114
   Number of public wires:          11
   Number of public wire bits:     114
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 77
     SB_CARRY                       14
     SB_DFFE                        15
     SB_DFFESR                      32
     SB_LUT4                        16

=== regfile ===

   Number of wires:                 32
   Number of wire bits:            273
   Number of public wires:          32
   Number of public wire bits:     273
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     SB_DFF                         48
     SB_LUT4                        81
     SB_RAM40_4K                     4

=== sign_mask_gen ===

   Number of wires:                  3
   Number of wire bits:             10
   Number of public wires:           3
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     SB_LUT4                         4

=== top ===

   Number of wires:                 19
   Number of wire bits:            184
   Number of public wires:          19
   Number of public wire bits:     184
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     SB_DFF                          1
     SB_HFOSC                        1
     SB_LUT4                         3
     cpu                             1
     data_mem                        1
     instruction_memory              1
     pll                             1

=== design hierarchy ===

   top                               1
     cpu                             1
       ALUControl                    1
       ForwardingUnit                1
       adder                         2
       alu                           1
       branch_decision               1
       branch_predictor              1
       control                       1
       ex_mem                        1
       id_ex                         1
       if_id                         1
       imm_gen                       1
       mem_wb                        1
       mux2to1                      24
       program_counter               1
       regfile                       1
       sign_mask_gen                 1
     data_mem                        1
     instruction_memory              1
     pll                             1

   Number of wires:               1321
   Number of wire bits:           8244
   Number of public wires:        1321
   Number of public wire bits:    8244
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3065
     SB_CARRY                      202
     SB_DFF                        571
     SB_DFFE                       170
     SB_DFFESR                      32
     SB_DFFN                         1
     SB_HFOSC                        1
     SB_LUT4                      2073
     SB_PLL40_CORE                   1
     SB_RAM40_4K                    14

20.47. Executing CHECK pass (checking for obvious problems).
checking module ALUControl..
Warning: Wire ALUControl.ALUCtl has an unprocessed 'init' attribute.
checking module ForwardingUnit..
checking module adder..
checking module alu..
Warning: Wire alu.ALUOut has an unprocessed 'init' attribute.
Warning: Wire alu.Branch_Enable has an unprocessed 'init' attribute.
checking module branch_decision..
checking module branch_predictor..
checking module control..
checking module cpu..
checking module data_mem..
checking module ex_mem..
checking module id_ex..
checking module if_id..
checking module imm_gen..
Warning: Wire imm_gen.imm has an unprocessed 'init' attribute.
checking module instruction_memory..
checking module mem_wb..
checking module mux2to1..
checking module pll..
checking module program_counter..
checking module regfile..
checking module sign_mask_gen..
checking module top..
found and reported 4 problems.

20.48. Executing BLIF backend.

21. Executing JSON backend.

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: f1c511453d, CPU: user 4.47s system 0.06s, MEM: 178.58 MB peak
Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 25% 7x techmap (1 sec), 15% 22x opt_expr (0 sec), ...
