
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `/gb3-resources/processor/yscripts/sail.ys' --

1. Executing Verilog-2005 frontend: verilog/dsp_adder.v
Parsing Verilog input from `verilog/dsp_adder.v' to AST representation.
Generating RTLIL representation for module `\DSPAdder'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: verilog/dsp_subtractor.v
Parsing Verilog input from `verilog/dsp_subtractor.v' to AST representation.
Generating RTLIL representation for module `\DSPSubtractor'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: verilog/cpu.v
Parsing Verilog input from `verilog/cpu.v' to AST representation.
Generating RTLIL representation for module `\cpu'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: verilog/mux2to1.v
Parsing Verilog input from `verilog/mux2to1.v' to AST representation.
Generating RTLIL representation for module `\mux2to1'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: verilog/alu_control.v
Parsing Verilog input from `verilog/alu_control.v' to AST representation.
Generating RTLIL representation for module `\ALUControl'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: verilog/pipeline_registers.v
Parsing Verilog input from `verilog/pipeline_registers.v' to AST representation.
Generating RTLIL representation for module `\if_id'.
Generating RTLIL representation for module `\id_ex'.
Generating RTLIL representation for module `\ex_mem'.
Generating RTLIL representation for module `\mem_wb'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: verilog/alu.v
Parsing Verilog input from `verilog/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Note: Assuming pure combinatorial block at verilog/alu.v:97.2-164.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at verilog/alu.v:166.2-177.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: verilog/program_counter.v
Parsing Verilog input from `verilog/program_counter.v' to AST representation.
Generating RTLIL representation for module `\program_counter'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: verilog/branch_decide.v
Parsing Verilog input from `verilog/branch_decide.v' to AST representation.
Generating RTLIL representation for module `\branch_decision'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: verilog/forwarding_unit.v
Parsing Verilog input from `verilog/forwarding_unit.v' to AST representation.
Generating RTLIL representation for module `\ForwardingUnit'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: verilog/branch_predictor.v
Parsing Verilog input from `verilog/branch_predictor.v' to AST representation.
Generating RTLIL representation for module `\branch_predictor'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: verilog/imm_gen.v
Parsing Verilog input from `verilog/imm_gen.v' to AST representation.
Generating RTLIL representation for module `\imm_gen'.
Note: Assuming pure combinatorial block at verilog/imm_gen.v:54.2-72.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: verilog/control_unit.v
Parsing Verilog input from `verilog/control_unit.v' to AST representation.
Generating RTLIL representation for module `\control'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: verilog/instruction_mem.v
Parsing Verilog input from `verilog/instruction_mem.v' to AST representation.
Generating RTLIL representation for module `\instruction_memory'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: verilog/data_mem.v
Parsing Verilog input from `verilog/data_mem.v' to AST representation.
Generating RTLIL representation for module `\data_mem'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: verilog/register_file.v
Parsing Verilog input from `verilog/register_file.v' to AST representation.
Generating RTLIL representation for module `\regfile'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: verilog/CSR.v
Parsing Verilog input from `verilog/CSR.v' to AST representation.
Generating RTLIL representation for module `\csr_file'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: verilog/dataMem_mask_gen.v
Parsing Verilog input from `verilog/dataMem_mask_gen.v' to AST representation.
Generating RTLIL representation for module `\sign_mask_gen'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: toplevel.v
Parsing Verilog input from `toplevel.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

20. Executing SYNTH_ICE40 pass.

20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

20.2. Executing HIERARCHY pass (managing design hierarchy).

20.2.1. Finding top of design hierarchy..
root of   4 design levels: top                 
root of   0 design levels: sign_mask_gen       
root of   0 design levels: csr_file            
root of   0 design levels: regfile             
root of   0 design levels: data_mem            
root of   0 design levels: instruction_memory  
root of   0 design levels: control             
root of   0 design levels: imm_gen             
root of   0 design levels: branch_predictor    
root of   0 design levels: ForwardingUnit      
root of   0 design levels: branch_decision     
root of   0 design levels: program_counter     
root of   2 design levels: alu                 
root of   0 design levels: mem_wb              
root of   0 design levels: ex_mem              
root of   0 design levels: id_ex               
root of   0 design levels: if_id               
root of   0 design levels: ALUControl          
root of   0 design levels: mux2to1             
root of   3 design levels: cpu                 
root of   1 design levels: DSPSubtractor       
root of   1 design levels: DSPAdder            
Automatically selected top as design top module.

20.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:             \DSPSubtractor
Used module:             \DSPAdder
Used module:         \id_ex
Used module:         \csr_file
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter

20.2.3. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:             \DSPSubtractor
Used module:             \DSPAdder
Used module:         \id_ex
Used module:         \csr_file
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Removed 0 unused modules.

20.3. Executing PROC pass (convert processes to netlists).

20.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `regfile.$proc$verilog/register_file.v:0$272'.
Removing empty process `instruction_memory.$proc$verilog/instruction_mem.v:0$163'.
Cleaned up 0 empty switches.

20.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$verilog/dataMem_mask_gen.v:58$280 in module sign_mask_gen.
Marked 1 switch rules as full_case in process $proc$verilog/data_mem.v:240$233 in module data_mem.
Marked 1 switch rules as full_case in process $proc$verilog/imm_gen.v:54$101 in module imm_gen.
Marked 1 switch rules as full_case in process $proc$verilog/program_counter.v:69$38 in module program_counter.
Marked 1 switch rules as full_case in process $proc$verilog/alu.v:166$29 in module alu.
Marked 1 switch rules as full_case in process $proc$verilog/alu.v:97$17 in module alu.
Removed 5 dead cases from process $proc$verilog/alu_control.v:82$7 in module ALUControl.
Marked 10 switch rules as full_case in process $proc$verilog/alu_control.v:82$7 in module ALUControl.
Removed a total of 5 dead cases.

20.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 37 assignments to connections.

20.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\data_mem.$proc$verilog/data_mem.v:0$248'.
  Set init value: \clk_stall = 1'0
Found init rule in `\data_mem.$proc$verilog/data_mem.v:60$247'.
  Set init value: \state = 0
Found init rule in `\imm_gen.$proc$verilog/imm_gen.v:0$102'.
  Set init value: \imm = 0
Found init rule in `\branch_predictor.$proc$verilog/branch_predictor.v:0$100'.
  Set init value: \s = 2'00
  Set init value: \branch_mem_sig_reg = 1'0
Found init rule in `\program_counter.$proc$verilog/program_counter.v:0$41'.
  Set init value: \outAddr = 0
  Set init value: \counter = 14'00000000000000
  Set init value: \enable = 1'0
Found init rule in `\alu.$proc$verilog/alu.v:0$37'.
  Set init value: \ALUOut = 0
  Set init value: \Branch_Enable = 1'0
Found init rule in `\mem_wb.$proc$verilog/pipeline_registers.v:0$16'.
  Set init value: \data_out = 117'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\ex_mem.$proc$verilog/pipeline_registers.v:0$14'.
  Set init value: \data_out = 155'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\id_ex.$proc$verilog/pipeline_registers.v:0$12'.
  Set init value: \data_out = 178'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\if_id.$proc$verilog/pipeline_registers.v:0$10'.
  Set init value: \data_out = 64'0000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\ALUControl.$proc$verilog/alu_control.v:0$8'.
  Set init value: \ALUCtl = 7'0000000

20.3.5. Executing PROC_ARST pass (detect async resets in processes).

20.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$toplevel.v:54$287'.
Creating decoders for process `\top.$proc$toplevel.v:53$286'.
Creating decoders for process `\top.$proc$toplevel.v:66$282'.
Creating decoders for process `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$280'.
     1/1: $1\mask[2:0]
Creating decoders for process `\csr_file.$proc$verilog/CSR.v:57$274'.
     1/3: $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277
     2/3: $0$memwr$\csr_file$verilog/CSR.v:59$273_DATA[31:0]$276
     3/3: $0$memwr$\csr_file$verilog/CSR.v:59$273_ADDR[11:0]$275
Creating decoders for process `\regfile.$proc$verilog/register_file.v:95$251'.
     1/3: $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254
     2/3: $0$memwr$\regfile$verilog/register_file.v:97$250_DATA[31:0]$253
     3/3: $0$memwr$\regfile$verilog/register_file.v:97$250_ADDR[4:0]$252
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:0$248'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:60$247'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:240$233'.
     1/12: $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236
     2/12: $0$memwr$\data_block$verilog/data_mem.v:283$164_DATA[31:0]$235
     3/12: $0$memwr$\data_block$verilog/data_mem.v:283$164_ADDR[31:0]$234
     4/12: $0\sign_mask_buf[3:0]
     5/12: $0\addr_buf[31:0]
     6/12: $0\write_data_buffer[31:0]
     7/12: $0\memwrite_buf[0:0]
     8/12: $0\memread_buf[0:0]
     9/12: $0\word_buf[31:0]
    10/12: $0\state[31:0]
    11/12: $0\clk_stall[0:0]
    12/12: $0\read_data[31:0]
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:231$229'.
     1/1: $0\led_reg[31:0]
Creating decoders for process `\instruction_memory.$proc$verilog/instruction_mem.v:82$159'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:0$102'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:54$101'.
     1/1: $1\imm[31:0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:0$100'.
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:101$85'.
     1/2: $0\s[1:0] [1]
     2/2: $0\s[1:0] [0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:92$84'.
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:0$41'.
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:69$38'.
     1/3: $0\enable[0:0]
     2/3: $0\counter[13:0]
     3/3: $0\outAddr[31:0]
Creating decoders for process `\alu.$proc$verilog/alu.v:0$37'.
Creating decoders for process `\alu.$proc$verilog/alu.v:166$29'.
     1/1: $1\Branch_Enable[0:0]
Creating decoders for process `\alu.$proc$verilog/alu.v:97$17'.
     1/1: $1\ALUOut[31:0]
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:0$16'.
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:145$15'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:0$14'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:118$13'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:0$12'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:91$11'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:0$10'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:64$9'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:0$8'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:82$7'.
     1/10: $10\ALUCtl[6:0]
     2/10: $9\ALUCtl[6:0]
     3/10: $8\ALUCtl[6:0]
     4/10: $7\ALUCtl[6:0]
     5/10: $6\ALUCtl[6:0]
     6/10: $5\ALUCtl[6:0]
     7/10: $4\ALUCtl[6:0]
     8/10: $3\ALUCtl[6:0]
     9/10: $2\ALUCtl[6:0]
    10/10: $1\ALUCtl[6:0]

20.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\CLKHF_POWERUP' from process `\top.$proc$toplevel.v:54$287'.
No latch inferred for signal `\top.\ENCLKHF' from process `\top.$proc$toplevel.v:53$286'.
No latch inferred for signal `\sign_mask_gen.\mask' from process `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$280'.
No latch inferred for signal `\imm_gen.\imm' from process `\imm_gen.$proc$verilog/imm_gen.v:54$101'.
No latch inferred for signal `\alu.\Branch_Enable' from process `\alu.$proc$verilog/alu.v:166$29'.
No latch inferred for signal `\alu.\ALUOut' from process `\alu.$proc$verilog/alu.v:97$17'.
No latch inferred for signal `\ALUControl.\ALUCtl' from process `\ALUControl.$proc$verilog/alu_control.v:82$7'.

20.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\clk' using process `\top.$proc$toplevel.v:66$282'.
  created $dff cell `$procdff$871' with positive edge clock.
Creating register for signal `\csr_file.\rdVal_CSR' using process `\csr_file.$proc$verilog/CSR.v:57$274'.
  created $dff cell `$procdff$872' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$273_ADDR' using process `\csr_file.$proc$verilog/CSR.v:57$274'.
  created $dff cell `$procdff$873' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$273_DATA' using process `\csr_file.$proc$verilog/CSR.v:57$274'.
  created $dff cell `$procdff$874' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$273_EN' using process `\csr_file.$proc$verilog/CSR.v:57$274'.
  created $dff cell `$procdff$875' with positive edge clock.
Creating register for signal `\regfile.\rdAddrA_buf' using process `\regfile.$proc$verilog/register_file.v:95$251'.
  created $dff cell `$procdff$876' with positive edge clock.
Creating register for signal `\regfile.\rdAddrB_buf' using process `\regfile.$proc$verilog/register_file.v:95$251'.
  created $dff cell `$procdff$877' with positive edge clock.
Creating register for signal `\regfile.\regDatA' using process `\regfile.$proc$verilog/register_file.v:95$251'.
  created $dff cell `$procdff$878' with positive edge clock.
Creating register for signal `\regfile.\regDatB' using process `\regfile.$proc$verilog/register_file.v:95$251'.
  created $dff cell `$procdff$879' with positive edge clock.
Creating register for signal `\regfile.\wrAddr_buf' using process `\regfile.$proc$verilog/register_file.v:95$251'.
  created $dff cell `$procdff$880' with positive edge clock.
Creating register for signal `\regfile.\wrData_buf' using process `\regfile.$proc$verilog/register_file.v:95$251'.
  created $dff cell `$procdff$881' with positive edge clock.
Creating register for signal `\regfile.\write_buf' using process `\regfile.$proc$verilog/register_file.v:95$251'.
  created $dff cell `$procdff$882' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$250_ADDR' using process `\regfile.$proc$verilog/register_file.v:95$251'.
  created $dff cell `$procdff$883' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$250_DATA' using process `\regfile.$proc$verilog/register_file.v:95$251'.
  created $dff cell `$procdff$884' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$250_EN' using process `\regfile.$proc$verilog/register_file.v:95$251'.
  created $dff cell `$procdff$885' with positive edge clock.
Creating register for signal `\data_mem.\read_data' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$886' with positive edge clock.
Creating register for signal `\data_mem.\clk_stall' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$887' with positive edge clock.
Creating register for signal `\data_mem.\state' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$888' with positive edge clock.
Creating register for signal `\data_mem.\word_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$889' with positive edge clock.
Creating register for signal `\data_mem.\memread_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$890' with positive edge clock.
Creating register for signal `\data_mem.\memwrite_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$891' with positive edge clock.
Creating register for signal `\data_mem.\write_data_buffer' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$892' with positive edge clock.
Creating register for signal `\data_mem.\addr_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$893' with positive edge clock.
Creating register for signal `\data_mem.\sign_mask_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$894' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$164_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$895' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$164_DATA' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$896' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$164_EN' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$897' with positive edge clock.
Creating register for signal `\data_mem.\led_reg' using process `\data_mem.$proc$verilog/data_mem.v:231$229'.
  created $dff cell `$procdff$898' with positive edge clock.
Creating register for signal `\instruction_memory.\out' using process `\instruction_memory.$proc$verilog/instruction_mem.v:82$159'.
  created $dff cell `$procdff$899' with positive edge clock.
Creating register for signal `\branch_predictor.\s' using process `\branch_predictor.$proc$verilog/branch_predictor.v:101$85'.
  created $dff cell `$procdff$900' with positive edge clock.
Creating register for signal `\branch_predictor.\branch_mem_sig_reg' using process `\branch_predictor.$proc$verilog/branch_predictor.v:92$84'.
  created $dff cell `$procdff$901' with negative edge clock.
Creating register for signal `\program_counter.\outAddr' using process `\program_counter.$proc$verilog/program_counter.v:69$38'.
  created $dff cell `$procdff$902' with positive edge clock.
Creating register for signal `\program_counter.\counter' using process `\program_counter.$proc$verilog/program_counter.v:69$38'.
  created $dff cell `$procdff$903' with positive edge clock.
Creating register for signal `\program_counter.\enable' using process `\program_counter.$proc$verilog/program_counter.v:69$38'.
  created $dff cell `$procdff$904' with positive edge clock.
Creating register for signal `\mem_wb.\data_out' using process `\mem_wb.$proc$verilog/pipeline_registers.v:145$15'.
  created $dff cell `$procdff$905' with positive edge clock.
Creating register for signal `\ex_mem.\data_out' using process `\ex_mem.$proc$verilog/pipeline_registers.v:118$13'.
  created $dff cell `$procdff$906' with positive edge clock.
Creating register for signal `\id_ex.\data_out' using process `\id_ex.$proc$verilog/pipeline_registers.v:91$11'.
  created $dff cell `$procdff$907' with positive edge clock.
Creating register for signal `\if_id.\data_out' using process `\if_id.$proc$verilog/pipeline_registers.v:64$9'.
  created $dff cell `$procdff$908' with positive edge clock.

20.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$toplevel.v:54$287'.
Removing empty process `top.$proc$toplevel.v:53$286'.
Removing empty process `top.$proc$toplevel.v:66$282'.
Found and cleaned up 1 empty switch in `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$280'.
Removing empty process `sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$280'.
Found and cleaned up 1 empty switch in `\csr_file.$proc$verilog/CSR.v:57$274'.
Removing empty process `csr_file.$proc$verilog/CSR.v:57$274'.
Found and cleaned up 1 empty switch in `\regfile.$proc$verilog/register_file.v:95$251'.
Removing empty process `regfile.$proc$verilog/register_file.v:95$251'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:0$248'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:60$247'.
Found and cleaned up 4 empty switches in `\data_mem.$proc$verilog/data_mem.v:240$233'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:240$233'.
Found and cleaned up 1 empty switch in `\data_mem.$proc$verilog/data_mem.v:231$229'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:231$229'.
Removing empty process `instruction_memory.$proc$verilog/instruction_mem.v:82$159'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:0$102'.
Found and cleaned up 1 empty switch in `\imm_gen.$proc$verilog/imm_gen.v:54$101'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:54$101'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:0$100'.
Found and cleaned up 1 empty switch in `\branch_predictor.$proc$verilog/branch_predictor.v:101$85'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:101$85'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:92$84'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:0$41'.
Found and cleaned up 2 empty switches in `\program_counter.$proc$verilog/program_counter.v:69$38'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:69$38'.
Removing empty process `alu.$proc$verilog/alu.v:0$37'.
Found and cleaned up 1 empty switch in `\alu.$proc$verilog/alu.v:166$29'.
Removing empty process `alu.$proc$verilog/alu.v:166$29'.
Found and cleaned up 1 empty switch in `\alu.$proc$verilog/alu.v:97$17'.
Removing empty process `alu.$proc$verilog/alu.v:97$17'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:0$16'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:145$15'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:0$14'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:118$13'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:0$12'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:91$11'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:0$10'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:64$9'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:0$8'.
Found and cleaned up 10 empty switches in `\ALUControl.$proc$verilog/alu_control.v:82$7'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:82$7'.
Cleaned up 24 empty switches.

20.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module sign_mask_gen.
<suppressed ~1 debug messages>
Optimizing module csr_file.
Optimizing module regfile.
<suppressed ~4 debug messages>
Optimizing module data_mem.
<suppressed ~24 debug messages>
Optimizing module instruction_memory.
<suppressed ~1 debug messages>
Optimizing module control.
Optimizing module imm_gen.
Optimizing module branch_predictor.
Optimizing module ForwardingUnit.
<suppressed ~8 debug messages>
Optimizing module branch_decision.
Optimizing module program_counter.
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module mem_wb.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module ALUControl.
<suppressed ~9 debug messages>
Optimizing module mux2to1.
Optimizing module cpu.
Optimizing module DSPSubtractor.
Optimizing module DSPAdder.

20.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \DSPAdder..
Removed 0 unused cells and 176 unused wires.
<suppressed ~20 debug messages>

20.6. Executing CHECK pass (checking for obvious problems).
checking module ALUControl..
checking module DSPAdder..
checking module DSPSubtractor..
checking module ForwardingUnit..
checking module alu..
checking module branch_decision..
checking module branch_predictor..
checking module control..
checking module cpu..
checking module csr_file..
checking module data_mem..
checking module ex_mem..
checking module id_ex..
checking module if_id..
checking module imm_gen..
checking module instruction_memory..
checking module mem_wb..
checking module mux2to1..
checking module program_counter..
checking module regfile..
checking module sign_mask_gen..
checking module top..
found and reported 0 problems.

20.7. Executing OPT pass (performing simple optimizations).

20.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
<suppressed ~108 debug messages>
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
<suppressed ~9 debug messages>
Finding identical cells in module `\alu'.
<suppressed ~9 debug messages>
Finding identical cells in module `\branch_decision'.
<suppressed ~6 debug messages>
Finding identical cells in module `\branch_predictor'.
<suppressed ~6 debug messages>
Finding identical cells in module `\control'.
<suppressed ~60 debug messages>
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~72 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 91 cells.

20.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$763.
    dead port 2/2 on $mux $procmux$765.
    dead port 2/2 on $mux $procmux$779.
    dead port 2/2 on $mux $procmux$818.
    dead port 2/2 on $mux $procmux$781.
    dead port 2/2 on $mux $procmux$829.
    dead port 2/2 on $mux $procmux$843.
    dead port 2/2 on $mux $procmux$794.
    dead port 2/2 on $mux $procmux$754.
    dead port 2/2 on $mux $procmux$859.
    dead port 2/2 on $mux $procmux$802.
    dead port 2/2 on $mux $procmux$804.
Running muxtree optimizer on module \DSPAdder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DSPSubtractor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 12 multiplexer ports.
<suppressed ~38 debug messages>

20.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
    New ctrl vector for $pmux cell $procmux$785: { $procmux$780_CMP $procmux$792_CMP $auto$opt_reduce.cc:134:opt_mux$910 $procmux$789_CMP $procmux$764_CMP $procmux$787_CMP $procmux$786_CMP }
    New ctrl vector for $pmux cell $procmux$837: $auto$opt_reduce.cc:134:opt_mux$912
    New ctrl vector for $pmux cell $procmux$862: { $auto$opt_reduce.cc:134:opt_mux$914 $procmux$860_CMP $procmux$844_CMP $procmux$830_CMP $procmux$805_CMP $procmux$766_CMP $procmux$755_CMP }
    New ctrl vector for $pmux cell $procmux$825: $auto$opt_reduce.cc:134:opt_mux$916
    New ctrl vector for $pmux cell $procmux$809: { $procmux$780_CMP $auto$opt_reduce.cc:134:opt_mux$918 $procmux$789_CMP $procmux$787_CMP $procmux$786_CMP $procmux$792_CMP $procmux$764_CMP }
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \DSPAdder.
  Optimizing cells in module \DSPSubtractor.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \alu.
    New ctrl vector for $pmux cell $procmux$735: { $procmux$747_CMP $procmux$745_CMP $procmux$744_CMP $procmux$743_CMP $procmux$742_CMP $procmux$741_CMP $procmux$740_CMP $procmux$739_CMP $procmux$738_CMP $auto$opt_reduce.cc:134:opt_mux$920 $procmux$736_CMP }
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
    Consolidated identical input bits for $mux cell $procmux$633:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277
      New ports: A=1'0, B=1'1, Y=$0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0]
      New connections: $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [31:1] = { $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] $0$memwr$\csr_file$verilog/CSR.v:59$273_EN[31:0]$277 [0] }
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $procmux$645:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236
      New ports: A=1'0, B=1'1, Y=$0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0]
      New connections: $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [31:1] = { $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] }
    New ctrl vector for $pmux cell $procmux$680: { $procmux$655_CMP $procmux$679_CMP $auto$opt_reduce.cc:134:opt_mux$922 }
    New ctrl vector for $pmux cell $procmux$692: { $procmux$655_CMP $auto$opt_reduce.cc:134:opt_mux$924 }
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
    New ctrl vector for $pmux cell $procmux$704: { $procmux$710_CMP $procmux$709_CMP $auto$opt_reduce.cc:134:opt_mux$926 $procmux$706_CMP $procmux$705_CMP }
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
    Consolidated identical input bits for $mux cell $procmux$639:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254
      New ports: A=1'0, B=1'1, Y=$0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0]
      New connections: $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [31:1] = { $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] $0$memwr$\regfile$verilog/register_file.v:97$250_EN[31:0]$254 [0] }
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 12 changes.

20.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
<suppressed ~6 debug messages>
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~3 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 3 cells.

20.7.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 106 unused wires.
<suppressed ~8 debug messages>

20.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.7.9. Rerunning OPT passes. (Maybe there is more to do..)

20.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DSPAdder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DSPSubtractor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

20.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \DSPAdder.
  Optimizing cells in module \DSPSubtractor.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

20.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.7.13. Executing OPT_RMDFF pass (remove dff with constant values).

20.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.7.16. Finished OPT passes. (There is nothing left to do.)

20.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$750 ($pmux).
Removed top 1 bits (of 2) from port B of cell ALUControl.$procmux$753_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$766_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$776 ($pmux).
Removed top 1 bits (of 3) from port B of cell ALUControl.$procmux$790_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell ALUControl.$procmux$791_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell ALUControl.$procmux$792_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$799 ($pmux).
Removed top 2 bits (of 7) from port B of cell ALUControl.$procmux$805_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$809 ($pmux).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$825 ($mux).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$830_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$837 ($mux).
Removed top 5 bits (of 7) from port B of cell ALUControl.$procmux$844_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell ALUControl.$procmux$869_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$870_CMP0 ($eq).
Removed top 4 bits (of 7) from wire ALUControl.$10\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire ALUControl.$3\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire ALUControl.$4\ALUCtl[6:0].
Removed top 31 bits (of 32) from mux cell alu.$ternary$verilog/alu.v:122$21 ($mux).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$731_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$732_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell alu.$procmux$733_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$740_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$741_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$742_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$743_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$744_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$745_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$746_CMP0 ($eq).
Removed top 31 bits (of 32) from wire alu.$ternary$verilog/alu.v:122$21_Y.
Removed top 2 address bits (of 12) from memory read port csr_file.$memrd$\csr_file$verilog/CSR.v:61$278 (csr_file).
Removed top 2 address bits (of 12) from memory write port csr_file.$memwr$\csr_file$verilog/CSR.v:0$279 (csr_file).
Removed cell csr_file.$procmux$635 ($mux).
Removed cell csr_file.$procmux$637 ($mux).
Removed top 2 bits (of 12) from FF cell csr_file.$procdff$873 ($dff).
Removed top 31 bits (of 32) from FF cell csr_file.$procdff$875 ($dff).
Removed top 2 bits (of 12) from wire csr_file.$memwr$\csr_file$verilog/CSR.v:59$273_ADDR.
Removed top 22 address bits (of 32) from memory init port data_mem.$meminit$\data_block$verilog/data_mem.v:0$245 (data_block).
Removed top 22 address bits (of 32) from memory read port data_mem.$memrd$\data_block$verilog/data_mem.v:261$240 (data_block).
Removed top 22 address bits (of 32) from memory write port data_mem.$memwr$\data_block$verilog/data_mem.v:0$246 (data_block).
Removed top 18 bits (of 32) from port B of cell data_mem.$eq$verilog/data_mem.v:232$231 ($eq).
Removed top 19 bits (of 32) from port B of cell data_mem.$sub$verilog/data_mem.v:261$241 ($sub).
Removed top 18 bits (of 32) from port Y of cell data_mem.$sub$verilog/data_mem.v:261$241 ($sub).
Removed top 30 bits (of 32) from port B of cell data_mem.$procmux$646_CMP0 ($eq).
Removed cell data_mem.$procmux$647 ($mux).
Removed cell data_mem.$procmux$649 ($mux).
Removed top 31 bits (of 32) from port B of cell data_mem.$procmux$679_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell data_mem.$procmux$682_CMP0 ($eq).
Removed top 18 bits (of 32) from FF cell data_mem.$procdff$895 ($dff).
Removed top 31 bits (of 32) from FF cell data_mem.$procdff$897 ($dff).
Removed top 4 bits (of 14) from FF cell data_mem.$procdff$895 ($dff).
Removed top 4 bits (of 14) from port Y of cell data_mem.$sub$verilog/data_mem.v:261$241 ($sub).
Removed top 12 bits (of 13) from port B of cell data_mem.$sub$verilog/data_mem.v:261$241 ($sub).
Removed top 22 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:283$164_ADDR[31:0]$234.
Removed top 22 bits (of 32) from wire data_mem.$memwr$\data_block$verilog/data_mem.v:283$164_ADDR.
Removed top 22 bits (of 32) from wire data_mem.$sub$verilog/data_mem.v:261$241_Y.
Removed top 1 bits (of 32) from mux cell imm_gen.$procmux$704 ($pmux).
Removed top 3 bits (of 4) from port B of cell imm_gen.$procmux$707_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell imm_gen.$procmux$708_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell imm_gen.$procmux$709_CMP0 ($eq).
Removed top 22 address bits (of 32) from memory init port instruction_memory.$meminit$\instruction_memory$verilog/instruction_mem.v:0$162 (instruction_memory).
Removed top 22 address bits (of 32) from memory read port instruction_memory.$memrd$\instruction_memory$verilog/instruction_mem.v:83$160 (instruction_memory).
Removed top 18 bits (of 32) from port B of cell program_counter.$lt$verilog/program_counter.v:72$39 ($lt).
Removed top 31 bits (of 32) from port B of cell program_counter.$add$verilog/program_counter.v:73$40 ($add).
Removed top 18 bits (of 32) from port Y of cell program_counter.$add$verilog/program_counter.v:73$40 ($add).
Removed top 18 bits (of 32) from wire program_counter.$add$verilog/program_counter.v:73$40_Y.
Removed top 27 address bits (of 32) from memory init port regfile.$meminit$\regfile$verilog/register_file.v:0$270 (regfile).
Removed cell regfile.$procmux$641 ($mux).
Removed cell regfile.$procmux$643 ($mux).
Removed top 27 bits (of 32) from FF cell regfile.$procdff$880 ($dff).
Removed top 31 bits (of 32) from FF cell regfile.$procdff$885 ($dff).
Removed top 27 bits (of 32) from port A of cell regfile.$eq$verilog/register_file.v:108$260 ($eq).
Removed top 27 bits (of 32) from port A of cell regfile.$eq$verilog/register_file.v:109$265 ($eq).
Removed top 27 bits (of 32) from wire regfile.wrAddr_buf.
Removed top 1 bits (of 2) from port B of cell sign_mask_gen.$procmux$631_CMP0 ($eq).

20.9. Executing PEEPOPT pass (run peephole optimizers).

20.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 16 unused wires.
<suppressed ~6 debug messages>

20.11. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module alu that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$verilog/alu.v:132$23 ($sshr):
    Found 1 activation_patterns using ctrl signal $procmux$741_CMP.
    No candidates found.
  Analyzing resource sharing options for $shr$verilog/alu.v:127$22 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$742_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$verilog/alu.v:137$24 ($shl):
    Found 1 activation_patterns using ctrl signal $procmux$740_CMP.
    No candidates found.

20.12. Executing TECHMAP pass (map to technology primitives).

20.12.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

20.12.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~138 debug messages>

20.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~1 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

20.15. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ALUControl:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module DSPAdder:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module DSPSubtractor:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ForwardingUnit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module alu:
  creating $alu model for $ge$verilog/alu.v:171$34 ($ge): new $alu
  creating $alu model for $ge$verilog/alu.v:173$36 ($ge): new $alu
  creating $alu model for $lt$verilog/alu.v:122$20 ($lt): merged with $ge$verilog/alu.v:171$34.
  creating $alu model for $lt$verilog/alu.v:172$35 ($lt): merged with $ge$verilog/alu.v:173$36.
  creating $alu cell for $ge$verilog/alu.v:173$36, $lt$verilog/alu.v:172$35: $auto$alumacc.cc:485:replace_alu$939
  creating $alu cell for $ge$verilog/alu.v:171$34, $lt$verilog/alu.v:122$20: $auto$alumacc.cc:485:replace_alu$952
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module branch_decision:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module branch_predictor:
  creating $macc model for $add$verilog/branch_predictor.v:108$98 ($add).
  creating $alu model for $macc $add$verilog/branch_predictor.v:108$98.
  creating $alu cell for $add$verilog/branch_predictor.v:108$98: $auto$alumacc.cc:485:replace_alu$967
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cpu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module csr_file:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_mem:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ex_mem:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module id_ex:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module if_id:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module imm_gen:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module instruction_memory:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mem_wb:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux2to1:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module program_counter:
  creating $macc model for $add$verilog/program_counter.v:73$40 ($add).
  creating $alu model for $macc $add$verilog/program_counter.v:73$40.
  creating $alu model for $lt$verilog/program_counter.v:72$39 ($lt): new $alu
  creating $alu cell for $lt$verilog/program_counter.v:72$39: $auto$alumacc.cc:485:replace_alu$971
  creating $alu cell for $add$verilog/program_counter.v:73$40: $auto$alumacc.cc:485:replace_alu$976
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module regfile:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sign_mask_gen:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

20.16. Executing OPT pass (performing simple optimizations).

20.16.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
<suppressed ~3 debug messages>
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
<suppressed ~6 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 2 cells.

20.16.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DSPAdder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DSPSubtractor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

20.16.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \DSPAdder.
  Optimizing cells in module \DSPSubtractor.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

20.16.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.16.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.16.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 8 unused wires.
<suppressed ~4 debug messages>

20.16.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.16.9. Rerunning OPT passes. (Maybe there is more to do..)

20.16.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DSPAdder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DSPSubtractor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

20.16.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \DSPAdder.
  Optimizing cells in module \DSPSubtractor.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

20.16.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.16.13. Executing OPT_RMDFF pass (remove dff with constant values).

20.16.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.16.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.16.16. Finished OPT passes. (There is nothing left to do.)

20.17. Executing FSM pass (extract and optimize FSM).

20.17.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking data_mem.state as FSM state register:
    Register has an initialization value.

20.17.2. Executing FSM_EXTRACT pass (extracting FSM from design).

20.17.3. Executing FSM_OPT pass (simple optimizations of FSMs).

20.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.17.5. Executing FSM_OPT pass (simple optimizations of FSMs).

20.17.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

20.17.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

20.17.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

20.18. Executing OPT pass (performing simple optimizations).

20.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

20.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.18.5. Finished fast OPT passes.

20.19. Executing MEMORY pass.

20.19.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.19.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\csr_file$verilog/CSR.v:0$279' in module `\csr_file': merged $dff to cell.
Checking cell `$memrd$\csr_file$verilog/CSR.v:61$278' in module `\csr_file': merged data $dff to cell.
Checking cell `$memwr$\data_block$verilog/data_mem.v:0$246' in module `\data_mem': merged $dff to cell.
Checking cell `$memrd$\data_block$verilog/data_mem.v:261$240' in module `\data_mem': merged data $dff with rd enable to cell.
Checking cell `$memrd$\instruction_memory$verilog/instruction_mem.v:83$160' in module `\instruction_memory': merged data $dff to cell.
Checking cell `$memwr$\regfile$verilog/register_file.v:0$271' in module `\regfile': merged $dff to cell.
Checking cell `$memrd$\regfile$verilog/register_file.v:104$258' in module `\regfile': merged data $dff to cell.
Checking cell `$memrd$\regfile$verilog/register_file.v:105$259' in module `\regfile': merged data $dff to cell.

20.19.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 13 unused cells and 18 unused wires.
<suppressed ~17 debug messages>

20.19.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.19.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.19.6. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\csr_file' in module `\csr_file':
  $memwr$\csr_file$verilog/CSR.v:0$279 ($memwr)
  $memrd$\csr_file$verilog/CSR.v:61$278 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\data_block' in module `\data_mem':
  $meminit$\data_block$verilog/data_mem.v:0$245 ($meminit)
  $memwr$\data_block$verilog/data_mem.v:0$246 ($memwr)
  $memrd$\data_block$verilog/data_mem.v:261$240 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\instruction_memory' in module `\instruction_memory':
  $meminit$\instruction_memory$verilog/instruction_mem.v:0$162 ($meminit)
  $memrd$\instruction_memory$verilog/instruction_mem.v:83$160 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\regfile' in module `\regfile':
  $meminit$\regfile$verilog/register_file.v:0$270 ($meminit)
  $memwr$\regfile$verilog/register_file.v:0$271 ($memwr)
  $memrd$\regfile$verilog/register_file.v:104$258 ($memrd)
  $memrd$\regfile$verilog/register_file.v:105$259 ($memrd)

20.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.21. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing csr_file.csr_file:
  Properties: ports=2 bits=32768 rports=1 wports=1 dbits=32 abits=10 words=1024
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=50
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=50, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=100, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=100, cells=8, acells=2
    Efficiency for rule 1.1: efficiency=100, cells=8, acells=4
    Selected rule 4.2 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: csr_file.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: csr_file.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: csr_file.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: csr_file.3.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 0 0>: csr_file.4.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 0 0>: csr_file.5.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 0 0>: csr_file.6.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 0 0>: csr_file.7.0.0
Processing data_mem.data_block:
  Properties: ports=2 bits=32768 rports=1 wports=1 dbits=32 abits=10 words=1024
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=50
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=50, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=100, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=100, cells=8, acells=2
    Efficiency for rule 1.1: efficiency=100, cells=8, acells=4
    Selected rule 4.2 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: data_block.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: data_block.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: data_block.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: data_block.3.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 0 0>: data_block.4.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 0 0>: data_block.5.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 0 0>: data_block.6.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 0 0>: data_block.7.0.0
Processing instruction_memory.instruction_memory:
  Properties: ports=1 bits=32768 rports=1 wports=0 dbits=32 abits=10 words=1024
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min wports 1' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=50
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min wports 1' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min wports 1' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min wports 1' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=50, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=100, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=100, cells=8, acells=2
    Efficiency for rule 1.1: efficiency=100, cells=8, acells=4
    Selected rule 4.2 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: instruction_memory.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: instruction_memory.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: instruction_memory.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: instruction_memory.3.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 0 0>: instruction_memory.4.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 0 0>: instruction_memory.5.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 0 0>: instruction_memory.6.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 0 0>: instruction_memory.7.0.0
Processing regfile.regfile:
  Properties: ports=3 bits=1024 rports=2 wports=1 dbits=32 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7168 efficiency=6
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7680 efficiency=3
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7936 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 rejected: requirement 'min efficiency 2' not met.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 2 rules:
    Efficiency for rule 4.1: efficiency=3, cells=8, acells=1
    Efficiency for rule 1.1: efficiency=6, cells=4, acells=1
    Selected rule 1.1 with efficiency 6.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: regfile.0.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 1>: regfile.0.0.1
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 0>: regfile.1.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 1>: regfile.1.0.1

20.22. Executing TECHMAP pass (map to technology primitives).

20.22.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

20.22.2. Continuing TECHMAP pass.
Using template $paramod$7c01128c47821c00041f4149da79e5374eeb90af\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$960485841f660243af450c42d6b4560e3d9823f2\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod\$__ICE40_RAM4K_M123\CFG_ABITS=10\CFG_DBITS=4\CLKPOL2=1\CLKPOL3=1 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$e960588dacff89b8f882c5a0277b8c8d527c9965\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$afddd2e575696083b1d22dcc6cf0d9a911bdc9a2\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$35d134eb2829a5cd58d89132cd9a05d9d5a35ac6\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$9c91c2d1b45a0ad1f4f6186cb85f86c10fc4d5dd\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$203ba9f91aefc7fdc22fa4180c5daae9586074f4\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$74a1414779e974f2dcd48d759ebd4552e3d0e363\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$6f0ea6cbc3869e87bafaddc3ad9209c80f5d0ceb\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$07d926a3ed31a263d7c0605eaedaf2d97782ceaa\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$9f5463b294b7bcd8c0ee8773fa342ef6e3c2df87\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$e57f7011e88b886f40331efbd76736c2ac45f4a2\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$c7e937323408a3e2cf701c43f9b4c3073b23df51\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$9778d6e082b122a1bf7852292e2525c6f4cd4fb8\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$68c73959bd382899231114fb06e98d4a0cb9d5e6\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$f116a0725d16569b0bc3a23f99538b529302785e\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$4fe0b1ef263dd26c23fcde747c49c099bb0b9965\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$d929529949e07607efa0abf661890a29e4cf189f\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$19ad296d813db6dab0b879cd6cc382f39c83be3b\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$24e4d5d94b19a5ff2e22b0a596d1aa661f3fbdbb\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$071e9e940ae204582c907e84694da5ae0b694481\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$facc2c6b05b6fa89272278929062cfa713dbe901\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$478d40ee96c005316923c7c123d41b246bf11767\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$24c5e8ba08f94068f4ada26029478b0a90977797\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$80c29f2d541c562c0526d877a4413bed1d9028bb\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$2e4da63d41c8ddf7c7482551ab3b1963e1289ba4\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$84cb4546cbf714f7e263a630eab3a97d33e697ac\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$ffb1be1349f991391cb323e7040bb853ff124187\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$4a538a55326f038f667e5da5b48e76a6775ab67f\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$6c3922d95c41f38f7781aa40dee3da3d27f92b46\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$b9fb9f1124a86e94f604258e3e379b6021263e47\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$9b3127451e30a0701afe852ba90905dc0803c9a1\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$b7a5e2dc785bf5d71c22df6dba5bab32d8922c8f\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$f549ab22d989f56dd5126da02d1e893402691f94\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$39e1cb78515844d5b00c450a5cb8958ae6ea05cf\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
No more expansions possible.
<suppressed ~1258 debug messages>

20.23. Executing ICE40_BRAMINIT pass.

20.24. Executing OPT pass (performing simple optimizations).

20.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
<suppressed ~4 debug messages>
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
<suppressed ~2 debug messages>
Optimizing module alu.
<suppressed ~1 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
<suppressed ~68 debug messages>
Optimizing module data_mem.
<suppressed ~65 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
<suppressed ~61 debug messages>
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
<suppressed ~18 debug messages>
Optimizing module sign_mask_gen.
Optimizing module top.

20.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
<suppressed ~9 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 3 cells.

20.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

20.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 12 unused cells and 694 unused wires.
<suppressed ~20 debug messages>

20.24.5. Finished fast OPT passes.

20.25. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

20.26. Executing OPT pass (performing simple optimizations).

20.26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DSPAdder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DSPSubtractor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

20.26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
    Consolidated identical input bits for $mux cell $procmux$776:
      Old ports: A=3'010, B=3'110, Y=$8\ALUCtl[6:0] [2:0]
      New ports: A=1'0, B=1'1, Y=$8\ALUCtl[6:0] [2]
      New connections: $8\ALUCtl[6:0] [1:0] = 2'10
    Consolidated identical input bits for $pmux cell $procmux$785:
      Old ports: A={ 4'0000 $8\ALUCtl[6:0] [2:0] }, B={ 25'0000101000011100010000000 $6\ALUCtl[6:0] [2:0] 14'00000010000000 }, Y=$7\ALUCtl[6:0]
      New ports: A={ 1'0 $8\ALUCtl[6:0] [2:0] }, B={ 13'0101011110000 $6\ALUCtl[6:0] [2:0] 8'00010000 }, Y=$7\ALUCtl[6:0] [3:0]
      New connections: $7\ALUCtl[6:0] [6:4] = 3'000
    Consolidated identical input bits for $mux cell $procmux$799:
      Old ports: A=3'011, B=3'100, Y=$6\ALUCtl[6:0] [2:0]
      New ports: A=2'01, B=2'10, Y={ $6\ALUCtl[6:0] [2] $6\ALUCtl[6:0] [0] }
      New connections: $6\ALUCtl[6:0] [1] = $6\ALUCtl[6:0] [0]
    Consolidated identical input bits for $mux cell $procmux$825:
      Old ports: A=4'1111, B=4'0010, Y=$4\ALUCtl[6:0]
      New ports: A=1'1, B=1'0, Y=$4\ALUCtl[6:0] [0]
      New connections: $4\ALUCtl[6:0] [3:1] = { $4\ALUCtl[6:0] [0] $4\ALUCtl[6:0] [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$837:
      Old ports: A=4'1111, B=4'0010, Y=$3\ALUCtl[6:0]
      New ports: A=1'1, B=1'0, Y=$3\ALUCtl[6:0] [0]
      New connections: $3\ALUCtl[6:0] [3:1] = { $3\ALUCtl[6:0] [0] $3\ALUCtl[6:0] [0] 1'1 }
    Consolidated identical input bits for $pmux cell $procmux$852:
      Old ports: A=7'0001111, B=42'001011001001100110110100011010101101100110, Y=$2\ALUCtl[6:0]
      New ports: A=4'0001, B=24'001001000110100010101100, Y={ $2\ALUCtl[6:0] [6:4] $2\ALUCtl[6:0] [0] }
      New connections: $2\ALUCtl[6:0] [3:1] = { $2\ALUCtl[6:0] [0] 2'11 }
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \DSPAdder.
  Optimizing cells in module \DSPSubtractor.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:204$211:
      Old ports: A={ 24'000000000000000000000000 \word_buf [15:8] }, B={ \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15:8] }, Y=$ternary$verilog/data_mem.v:204$211_Y
      New ports: A=1'0, B=\word_buf [15], Y=$ternary$verilog/data_mem.v:204$211_Y [8]
      New connections: { $ternary$verilog/data_mem.v:204$211_Y [31:9] $ternary$verilog/data_mem.v:204$211_Y [7:0] } = { $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] \word_buf [15:8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:204$213:
      Old ports: A={ 24'000000000000000000000000 \word_buf [7:0] }, B={ \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7:0] }, Y=$ternary$verilog/data_mem.v:204$213_Y
      New ports: A=1'0, B=\word_buf [7], Y=$ternary$verilog/data_mem.v:204$213_Y [8]
      New connections: { $ternary$verilog/data_mem.v:204$213_Y [31:9] $ternary$verilog/data_mem.v:204$213_Y [7:0] } = { $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] \word_buf [7:0] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:205$216:
      Old ports: A={ 24'000000000000000000000000 \word_buf [31:24] }, B={ \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31:24] }, Y=$ternary$verilog/data_mem.v:205$216_Y
      New ports: A=1'0, B=\word_buf [31], Y=$ternary$verilog/data_mem.v:205$216_Y [8]
      New connections: { $ternary$verilog/data_mem.v:205$216_Y [31:9] $ternary$verilog/data_mem.v:205$216_Y [7:0] } = { $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] \word_buf [31:24] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:205$218:
      Old ports: A={ 24'000000000000000000000000 \word_buf [23:16] }, B={ \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23:16] }, Y=$ternary$verilog/data_mem.v:205$218_Y
      New ports: A=1'0, B=\word_buf [23], Y=$ternary$verilog/data_mem.v:205$218_Y [8]
      New connections: { $ternary$verilog/data_mem.v:205$218_Y [31:9] $ternary$verilog/data_mem.v:205$218_Y [7:0] } = { $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] \word_buf [23:16] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:206$221:
      Old ports: A={ 16'0000000000000000 \word_buf [31:16] }, B={ \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31:16] }, Y=$ternary$verilog/data_mem.v:206$221_Y
      New ports: A=1'0, B=\word_buf [31], Y=$ternary$verilog/data_mem.v:206$221_Y [16]
      New connections: { $ternary$verilog/data_mem.v:206$221_Y [31:17] $ternary$verilog/data_mem.v:206$221_Y [15:0] } = { $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] \word_buf [31:16] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:206$223:
      Old ports: A={ 16'0000000000000000 \word_buf [15:0] }, B={ \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15:0] }, Y=$ternary$verilog/data_mem.v:206$223_Y
      New ports: A=1'0, B=\word_buf [15], Y=$ternary$verilog/data_mem.v:206$223_Y [16]
      New connections: { $ternary$verilog/data_mem.v:206$223_Y [31:17] $ternary$verilog/data_mem.v:206$223_Y [15:0] } = { $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] \word_buf [15:0] }
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:204$214:
      Old ports: A=$ternary$verilog/data_mem.v:204$213_Y, B=$ternary$verilog/data_mem.v:204$211_Y, Y=\out1
      New ports: A={ $ternary$verilog/data_mem.v:204$213_Y [8] \word_buf [7:0] }, B={ $ternary$verilog/data_mem.v:204$211_Y [8] \word_buf [15:8] }, Y=\out1 [8:0]
      New connections: \out1 [31:9] = { \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:205$219:
      Old ports: A=$ternary$verilog/data_mem.v:205$218_Y, B=$ternary$verilog/data_mem.v:205$216_Y, Y=\out2
      New ports: A={ $ternary$verilog/data_mem.v:205$218_Y [8] \word_buf [23:16] }, B={ $ternary$verilog/data_mem.v:205$216_Y [8] \word_buf [31:24] }, Y=\out2 [8:0]
      New connections: \out2 [31:9] = { \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:206$224:
      Old ports: A=$ternary$verilog/data_mem.v:206$223_Y, B=$ternary$verilog/data_mem.v:206$221_Y, Y=\out3
      New ports: A={ $ternary$verilog/data_mem.v:206$223_Y [16] \word_buf [15:0] }, B={ $ternary$verilog/data_mem.v:206$221_Y [16] \word_buf [31:16] }, Y=\out3 [16:0]
      New connections: \out3 [31:17] = { \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] }
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:209$226:
      Old ports: A=\out1, B=\out2, Y=\out5
      New ports: A=\out1 [8:0], B=\out2 [8:0], Y=\out5 [8:0]
      New connections: \out5 [31:9] = { \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] }
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 16 changes.

20.26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~6 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 2 cells.

20.26.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

20.26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.26.9. Rerunning OPT passes. (Maybe there is more to do..)

20.26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DSPAdder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DSPSubtractor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

20.26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \DSPAdder.
  Optimizing cells in module \DSPSubtractor.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

20.26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.26.13. Executing OPT_RMDFF pass (remove dff with constant values).

20.26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.26.16. Finished OPT passes. (There is nothing left to do.)

20.27. Executing ICE40_WRAPCARRY pass (wrap carries).

20.28. Executing TECHMAP pass (map to technology primitives).

20.28.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

20.28.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

20.28.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_pmux\WIDTH=31\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=7 for cells of type $pmux.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$943af4e63d02cf420cf82d17400bd04ea07088b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=11 for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
No more expansions possible.
<suppressed ~1846 debug messages>

20.29. Executing OPT pass (performing simple optimizations).

20.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
<suppressed ~254 debug messages>
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
<suppressed ~189 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
<suppressed ~32 debug messages>
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~296 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
<suppressed ~54 debug messages>
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
<suppressed ~37 debug messages>
Optimizing module regfile.
Optimizing module sign_mask_gen.
<suppressed ~16 debug messages>
Optimizing module top.

20.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
<suppressed ~270 debug messages>
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
<suppressed ~717 debug messages>
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~240 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
<suppressed ~273 debug messages>
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
<suppressed ~6 debug messages>
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
<suppressed ~9 debug messages>
Finding identical cells in module `\top'.
Removed a total of 505 cells.

20.29.3. Executing OPT_RMDFF pass (remove dff with constant values).

20.29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 168 unused cells and 840 unused wires.
<suppressed ~177 debug messages>

20.29.5. Finished fast OPT passes.

20.30. Executing ICE40_OPT pass (performing simple optimizations).

20.30.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) program_counter.$auto$alumacc.cc:485:replace_alu$971.slice[0].carry: CO=\counter [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) program_counter.$auto$alumacc.cc:485:replace_alu$976.slice[0].carry: CO=\counter [0]

20.30.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~40 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.30.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.30.4. Executing OPT_RMDFF pass (remove dff with constant values).

20.30.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 0 unused wires.
<suppressed ~1 debug messages>

20.30.6. Rerunning OPT passes. (Removed registers in this run.)

20.30.7. Running ICE40 specific optimizations.

20.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.30.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.30.10. Executing OPT_RMDFF pass (remove dff with constant values).

20.30.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.30.12. Finished OPT passes. (There is nothing left to do.)

20.31. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module ALUControl:
Transforming FF to FF+Enable cells in module DSPAdder:
Transforming FF to FF+Enable cells in module DSPSubtractor:
Transforming FF to FF+Enable cells in module ForwardingUnit:
Transforming FF to FF+Enable cells in module alu:
Transforming FF to FF+Enable cells in module branch_decision:
Transforming FF to FF+Enable cells in module branch_predictor:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6730 to $_DFFE_PP_ for $0\s[1:0] [0] -> \s [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6731 to $_DFFE_PP_ for $0\s[1:0] [1] -> \s [1].
Transforming FF to FF+Enable cells in module control:
Transforming FF to FF+Enable cells in module cpu:
Transforming FF to FF+Enable cells in module csr_file:
Transforming FF to FF+Enable cells in module data_mem:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7762 to $_DFFE_PP_ for $0\read_data[31:0] [0] -> \read_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7763 to $_DFFE_PP_ for $0\read_data[31:0] [1] -> \read_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7764 to $_DFFE_PP_ for $0\read_data[31:0] [2] -> \read_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7765 to $_DFFE_PP_ for $0\read_data[31:0] [3] -> \read_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7766 to $_DFFE_PP_ for $0\read_data[31:0] [4] -> \read_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7767 to $_DFFE_PP_ for $0\read_data[31:0] [5] -> \read_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7768 to $_DFFE_PP_ for $0\read_data[31:0] [6] -> \read_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7769 to $_DFFE_PP_ for $0\read_data[31:0] [7] -> \read_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7770 to $_DFFE_PP_ for $0\read_data[31:0] [8] -> \read_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7771 to $_DFFE_PP_ for $0\read_data[31:0] [9] -> \read_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7772 to $_DFFE_PP_ for $0\read_data[31:0] [10] -> \read_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7773 to $_DFFE_PP_ for $0\read_data[31:0] [11] -> \read_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7774 to $_DFFE_PP_ for $0\read_data[31:0] [12] -> \read_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7775 to $_DFFE_PP_ for $0\read_data[31:0] [13] -> \read_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7776 to $_DFFE_PP_ for $0\read_data[31:0] [14] -> \read_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7777 to $_DFFE_PP_ for $0\read_data[31:0] [15] -> \read_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7778 to $_DFFE_PP_ for $0\read_data[31:0] [16] -> \read_data [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7779 to $_DFFE_PP_ for $0\read_data[31:0] [17] -> \read_data [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7780 to $_DFFE_PP_ for $0\read_data[31:0] [18] -> \read_data [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7781 to $_DFFE_PP_ for $0\read_data[31:0] [19] -> \read_data [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7782 to $_DFFE_PP_ for $0\read_data[31:0] [20] -> \read_data [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7783 to $_DFFE_PP_ for $0\read_data[31:0] [21] -> \read_data [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7784 to $_DFFE_PP_ for $0\read_data[31:0] [22] -> \read_data [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7785 to $_DFFE_PP_ for $0\read_data[31:0] [23] -> \read_data [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7786 to $_DFFE_PP_ for $0\read_data[31:0] [24] -> \read_data [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7787 to $_DFFE_PP_ for $0\read_data[31:0] [25] -> \read_data [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7788 to $_DFFE_PP_ for $0\read_data[31:0] [26] -> \read_data [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7789 to $_DFFE_PP_ for $0\read_data[31:0] [27] -> \read_data [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7790 to $_DFFE_PP_ for $0\read_data[31:0] [28] -> \read_data [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7791 to $_DFFE_PP_ for $0\read_data[31:0] [29] -> \read_data [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7792 to $_DFFE_PP_ for $0\read_data[31:0] [30] -> \read_data [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7793 to $_DFFE_PP_ for $0\read_data[31:0] [31] -> \read_data [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7794 to $_DFFE_PP_ for $0\clk_stall[0:0] -> \clk_stall.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7795 to $_DFFE_PP_ for $0\state[31:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7796 to $_DFFE_PP_ for $0\state[31:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7797 to $_DFFE_PP_ for $0\state[31:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7798 to $_DFFE_PP_ for $0\state[31:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7799 to $_DFFE_PP_ for $0\state[31:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7800 to $_DFFE_PP_ for $0\state[31:0] [5] -> \state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7801 to $_DFFE_PP_ for $0\state[31:0] [6] -> \state [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7802 to $_DFFE_PP_ for $0\state[31:0] [7] -> \state [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7803 to $_DFFE_PP_ for $0\state[31:0] [8] -> \state [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7804 to $_DFFE_PP_ for $0\state[31:0] [9] -> \state [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7805 to $_DFFE_PP_ for $0\state[31:0] [10] -> \state [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7806 to $_DFFE_PP_ for $0\state[31:0] [11] -> \state [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7807 to $_DFFE_PP_ for $0\state[31:0] [12] -> \state [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7808 to $_DFFE_PP_ for $0\state[31:0] [13] -> \state [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7809 to $_DFFE_PP_ for $0\state[31:0] [14] -> \state [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7810 to $_DFFE_PP_ for $0\state[31:0] [15] -> \state [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7811 to $_DFFE_PP_ for $0\state[31:0] [16] -> \state [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7812 to $_DFFE_PP_ for $0\state[31:0] [17] -> \state [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7813 to $_DFFE_PP_ for $0\state[31:0] [18] -> \state [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7814 to $_DFFE_PP_ for $0\state[31:0] [19] -> \state [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7815 to $_DFFE_PP_ for $0\state[31:0] [20] -> \state [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7816 to $_DFFE_PP_ for $0\state[31:0] [21] -> \state [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7817 to $_DFFE_PP_ for $0\state[31:0] [22] -> \state [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7818 to $_DFFE_PP_ for $0\state[31:0] [23] -> \state [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7819 to $_DFFE_PP_ for $0\state[31:0] [24] -> \state [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7820 to $_DFFE_PP_ for $0\state[31:0] [25] -> \state [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7821 to $_DFFE_PP_ for $0\state[31:0] [26] -> \state [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7822 to $_DFFE_PP_ for $0\state[31:0] [27] -> \state [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7823 to $_DFFE_PP_ for $0\state[31:0] [28] -> \state [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7824 to $_DFFE_PP_ for $0\state[31:0] [29] -> \state [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7825 to $_DFFE_PP_ for $0\state[31:0] [30] -> \state [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7826 to $_DFFE_PP_ for $0\state[31:0] [31] -> \state [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7827 to $_DFFE_PP_ for $0\memread_buf[0:0] -> \memread_buf.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7828 to $_DFFE_PP_ for $0\memwrite_buf[0:0] -> \memwrite_buf.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7829 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [0] -> \write_data_buffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7830 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [1] -> \write_data_buffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7831 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [2] -> \write_data_buffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7832 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [3] -> \write_data_buffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7833 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [4] -> \write_data_buffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7834 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [5] -> \write_data_buffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7835 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [6] -> \write_data_buffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7836 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [7] -> \write_data_buffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7837 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [8] -> \write_data_buffer [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7838 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [9] -> \write_data_buffer [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7839 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [10] -> \write_data_buffer [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7840 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [11] -> \write_data_buffer [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7841 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [12] -> \write_data_buffer [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7842 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [13] -> \write_data_buffer [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7843 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [14] -> \write_data_buffer [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7844 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [15] -> \write_data_buffer [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7845 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [16] -> \write_data_buffer [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7846 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [17] -> \write_data_buffer [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7847 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [18] -> \write_data_buffer [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7848 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [19] -> \write_data_buffer [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7849 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [20] -> \write_data_buffer [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7850 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [21] -> \write_data_buffer [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7851 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [22] -> \write_data_buffer [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7852 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [23] -> \write_data_buffer [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7853 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [24] -> \write_data_buffer [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7854 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [25] -> \write_data_buffer [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7855 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [26] -> \write_data_buffer [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7856 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [27] -> \write_data_buffer [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7857 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [28] -> \write_data_buffer [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7858 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [29] -> \write_data_buffer [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7859 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [30] -> \write_data_buffer [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7860 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [31] -> \write_data_buffer [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7861 to $_DFFE_PP_ for $0\addr_buf[31:0] [0] -> \addr_buf [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7862 to $_DFFE_PP_ for $0\addr_buf[31:0] [1] -> \addr_buf [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7863 to $_DFFE_PP_ for $0\addr_buf[31:0] [2] -> \addr_buf [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7864 to $_DFFE_PP_ for $0\addr_buf[31:0] [3] -> \addr_buf [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7865 to $_DFFE_PP_ for $0\addr_buf[31:0] [4] -> \addr_buf [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7866 to $_DFFE_PP_ for $0\addr_buf[31:0] [5] -> \addr_buf [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7867 to $_DFFE_PP_ for $0\addr_buf[31:0] [6] -> \addr_buf [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7868 to $_DFFE_PP_ for $0\addr_buf[31:0] [7] -> \addr_buf [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7869 to $_DFFE_PP_ for $0\addr_buf[31:0] [8] -> \addr_buf [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7870 to $_DFFE_PP_ for $0\addr_buf[31:0] [9] -> \addr_buf [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7871 to $_DFFE_PP_ for $0\addr_buf[31:0] [10] -> \addr_buf [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7872 to $_DFFE_PP_ for $0\addr_buf[31:0] [11] -> \addr_buf [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7894 to $_DFFE_PP_ for $0\sign_mask_buf[3:0] [1] -> \sign_mask_buf [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7895 to $_DFFE_PP_ for $0\sign_mask_buf[3:0] [2] -> \sign_mask_buf [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7896 to $_DFFE_PP_ for $0\sign_mask_buf[3:0] [3] -> \sign_mask_buf [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7897 to $_DFFE_PP_ for $0\led_reg[31:0] [0] -> \led_reg [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7898 to $_DFFE_PP_ for $0\led_reg[31:0] [1] -> \led_reg [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7899 to $_DFFE_PP_ for $0\led_reg[31:0] [2] -> \led_reg [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7900 to $_DFFE_PP_ for $0\led_reg[31:0] [3] -> \led_reg [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7901 to $_DFFE_PP_ for $0\led_reg[31:0] [4] -> \led_reg [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7902 to $_DFFE_PP_ for $0\led_reg[31:0] [5] -> \led_reg [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7903 to $_DFFE_PP_ for $0\led_reg[31:0] [6] -> \led_reg [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7904 to $_DFFE_PP_ for $0\led_reg[31:0] [7] -> \led_reg [7].
Transforming FF to FF+Enable cells in module ex_mem:
Transforming FF to FF+Enable cells in module id_ex:
Transforming FF to FF+Enable cells in module if_id:
Transforming FF to FF+Enable cells in module imm_gen:
Transforming FF to FF+Enable cells in module instruction_memory:
Transforming FF to FF+Enable cells in module mem_wb:
Transforming FF to FF+Enable cells in module mux2to1:
Transforming FF to FF+Enable cells in module program_counter:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1296 to $_DFFE_PP_ for $0\outAddr[31:0] [0] -> \outAddr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1297 to $_DFFE_PP_ for $0\outAddr[31:0] [1] -> \outAddr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1298 to $_DFFE_PP_ for $0\outAddr[31:0] [2] -> \outAddr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1299 to $_DFFE_PP_ for $0\outAddr[31:0] [3] -> \outAddr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1300 to $_DFFE_PP_ for $0\outAddr[31:0] [4] -> \outAddr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1301 to $_DFFE_PP_ for $0\outAddr[31:0] [5] -> \outAddr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1302 to $_DFFE_PP_ for $0\outAddr[31:0] [6] -> \outAddr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1303 to $_DFFE_PP_ for $0\outAddr[31:0] [7] -> \outAddr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1304 to $_DFFE_PP_ for $0\outAddr[31:0] [8] -> \outAddr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1305 to $_DFFE_PP_ for $0\outAddr[31:0] [9] -> \outAddr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1306 to $_DFFE_PP_ for $0\outAddr[31:0] [10] -> \outAddr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1307 to $_DFFE_PP_ for $0\outAddr[31:0] [11] -> \outAddr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1308 to $_DFFE_PP_ for $0\outAddr[31:0] [12] -> \outAddr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1309 to $_DFFE_PP_ for $0\outAddr[31:0] [13] -> \outAddr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1310 to $_DFFE_PP_ for $0\outAddr[31:0] [14] -> \outAddr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1311 to $_DFFE_PP_ for $0\outAddr[31:0] [15] -> \outAddr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1312 to $_DFFE_PP_ for $0\outAddr[31:0] [16] -> \outAddr [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1313 to $_DFFE_PP_ for $0\outAddr[31:0] [17] -> \outAddr [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1314 to $_DFFE_PP_ for $0\outAddr[31:0] [18] -> \outAddr [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1315 to $_DFFE_PP_ for $0\outAddr[31:0] [19] -> \outAddr [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1316 to $_DFFE_PP_ for $0\outAddr[31:0] [20] -> \outAddr [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1317 to $_DFFE_PP_ for $0\outAddr[31:0] [21] -> \outAddr [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1318 to $_DFFE_PP_ for $0\outAddr[31:0] [22] -> \outAddr [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1319 to $_DFFE_PP_ for $0\outAddr[31:0] [23] -> \outAddr [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1320 to $_DFFE_PP_ for $0\outAddr[31:0] [24] -> \outAddr [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1321 to $_DFFE_PP_ for $0\outAddr[31:0] [25] -> \outAddr [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1322 to $_DFFE_PP_ for $0\outAddr[31:0] [26] -> \outAddr [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1323 to $_DFFE_PP_ for $0\outAddr[31:0] [27] -> \outAddr [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1324 to $_DFFE_PP_ for $0\outAddr[31:0] [28] -> \outAddr [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1325 to $_DFFE_PP_ for $0\outAddr[31:0] [29] -> \outAddr [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1326 to $_DFFE_PP_ for $0\outAddr[31:0] [30] -> \outAddr [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1327 to $_DFFE_PP_ for $0\outAddr[31:0] [31] -> \outAddr [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1328 to $_DFFE_PP_ for $0\counter[13:0] [0] -> \counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1329 to $_DFFE_PP_ for $0\counter[13:0] [1] -> \counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1330 to $_DFFE_PP_ for $0\counter[13:0] [2] -> \counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1331 to $_DFFE_PP_ for $0\counter[13:0] [3] -> \counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1332 to $_DFFE_PP_ for $0\counter[13:0] [4] -> \counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1333 to $_DFFE_PP_ for $0\counter[13:0] [5] -> \counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1334 to $_DFFE_PP_ for $0\counter[13:0] [6] -> \counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1335 to $_DFFE_PP_ for $0\counter[13:0] [7] -> \counter [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1336 to $_DFFE_PP_ for $0\counter[13:0] [8] -> \counter [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1337 to $_DFFE_PP_ for $0\counter[13:0] [9] -> \counter [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1338 to $_DFFE_PP_ for $0\counter[13:0] [10] -> \counter [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1339 to $_DFFE_PP_ for $0\counter[13:0] [11] -> \counter [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1340 to $_DFFE_PP_ for $0\counter[13:0] [12] -> \counter [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1341 to $_DFFE_PP_ for $0\counter[13:0] [13] -> \counter [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1342 to $_DFFE_PP_ for $0\enable[0:0] -> \enable.
Transforming FF to FF+Enable cells in module regfile:
Transforming FF to FF+Enable cells in module sign_mask_gen:
Transforming FF to FF+Enable cells in module top:

20.32. Executing TECHMAP pass (map to technology primitives).

20.32.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

20.32.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_N_ for cells of type $_DFF_N_.
No more expansions possible.
<suppressed ~735 debug messages>

20.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
<suppressed ~4 debug messages>
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~244 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
<suppressed ~126 debug messages>
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.34. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping program_counter.$auto$alumacc.cc:485:replace_alu$976.slice[0].carry ($lut).

20.35. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in ALUControl.
Handling FF init values in DSPAdder.
Handling FF init values in DSPSubtractor.
Handling FF init values in ForwardingUnit.
Handling FF init values in alu.
Handling FF init values in branch_decision.
Handling FF init values in branch_predictor.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6731 (SB_DFFE): \s [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6732 (SB_DFFN): \branch_mem_sig_reg = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6730 (SB_DFFE): \s [0] = 0
Handling FF init values in control.
Handling FF init values in cpu.
Handling FF init values in csr_file.
Handling FF init values in data_mem.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7794 (SB_DFFE): \clk_stall = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7796 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7797 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7798 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7799 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7800 (SB_DFFE): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7801 (SB_DFFE): \state [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7802 (SB_DFFE): \state [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7803 (SB_DFFE): \state [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7804 (SB_DFFE): \state [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7805 (SB_DFFE): \state [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7806 (SB_DFFE): \state [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7807 (SB_DFFE): \state [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7808 (SB_DFFE): \state [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7809 (SB_DFFE): \state [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7810 (SB_DFFE): \state [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7811 (SB_DFFE): \state [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7812 (SB_DFFE): \state [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7813 (SB_DFFE): \state [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7814 (SB_DFFE): \state [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7815 (SB_DFFE): \state [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7816 (SB_DFFE): \state [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7817 (SB_DFFE): \state [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7818 (SB_DFFE): \state [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7819 (SB_DFFE): \state [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7820 (SB_DFFE): \state [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7821 (SB_DFFE): \state [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7822 (SB_DFFE): \state [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7823 (SB_DFFE): \state [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7824 (SB_DFFE): \state [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7825 (SB_DFFE): \state [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7795 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7826 (SB_DFFE): \state [31] = 0
Handling FF init values in ex_mem.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6381 (SB_DFF): \data_out [154] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6227 (SB_DFF): \data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6228 (SB_DFF): \data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6229 (SB_DFF): \data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6230 (SB_DFF): \data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6231 (SB_DFF): \data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6232 (SB_DFF): \data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6233 (SB_DFF): \data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6234 (SB_DFF): \data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6235 (SB_DFF): \data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6236 (SB_DFF): \data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6237 (SB_DFF): \data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6238 (SB_DFF): \data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6239 (SB_DFF): \data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6240 (SB_DFF): \data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6241 (SB_DFF): \data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6242 (SB_DFF): \data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6243 (SB_DFF): \data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6244 (SB_DFF): \data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6245 (SB_DFF): \data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6246 (SB_DFF): \data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6247 (SB_DFF): \data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6248 (SB_DFF): \data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6249 (SB_DFF): \data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6250 (SB_DFF): \data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6251 (SB_DFF): \data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6252 (SB_DFF): \data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6253 (SB_DFF): \data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6254 (SB_DFF): \data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6255 (SB_DFF): \data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6256 (SB_DFF): \data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6257 (SB_DFF): \data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6258 (SB_DFF): \data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6259 (SB_DFF): \data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6260 (SB_DFF): \data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6261 (SB_DFF): \data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6262 (SB_DFF): \data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6263 (SB_DFF): \data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6264 (SB_DFF): \data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6265 (SB_DFF): \data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6266 (SB_DFF): \data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6267 (SB_DFF): \data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6268 (SB_DFF): \data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6269 (SB_DFF): \data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6270 (SB_DFF): \data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6271 (SB_DFF): \data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6272 (SB_DFF): \data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6273 (SB_DFF): \data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6274 (SB_DFF): \data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6275 (SB_DFF): \data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6276 (SB_DFF): \data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6277 (SB_DFF): \data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6278 (SB_DFF): \data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6279 (SB_DFF): \data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6280 (SB_DFF): \data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6281 (SB_DFF): \data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6282 (SB_DFF): \data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6283 (SB_DFF): \data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6284 (SB_DFF): \data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6285 (SB_DFF): \data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6286 (SB_DFF): \data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6287 (SB_DFF): \data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6288 (SB_DFF): \data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6289 (SB_DFF): \data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6290 (SB_DFF): \data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6291 (SB_DFF): \data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6292 (SB_DFF): \data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6293 (SB_DFF): \data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6294 (SB_DFF): \data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6295 (SB_DFF): \data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6296 (SB_DFF): \data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6297 (SB_DFF): \data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6298 (SB_DFF): \data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6299 (SB_DFF): \data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6300 (SB_DFF): \data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6301 (SB_DFF): \data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6302 (SB_DFF): \data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6303 (SB_DFF): \data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6304 (SB_DFF): \data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6305 (SB_DFF): \data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6306 (SB_DFF): \data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6307 (SB_DFF): \data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6308 (SB_DFF): \data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6309 (SB_DFF): \data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6310 (SB_DFF): \data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6311 (SB_DFF): \data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6312 (SB_DFF): \data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6313 (SB_DFF): \data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6314 (SB_DFF): \data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6315 (SB_DFF): \data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6316 (SB_DFF): \data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6317 (SB_DFF): \data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6318 (SB_DFF): \data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6319 (SB_DFF): \data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6320 (SB_DFF): \data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6321 (SB_DFF): \data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6322 (SB_DFF): \data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6323 (SB_DFF): \data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6324 (SB_DFF): \data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6325 (SB_DFF): \data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6326 (SB_DFF): \data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6327 (SB_DFF): \data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6328 (SB_DFF): \data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6329 (SB_DFF): \data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6330 (SB_DFF): \data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6331 (SB_DFF): \data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6332 (SB_DFF): \data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6333 (SB_DFF): \data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6334 (SB_DFF): \data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6335 (SB_DFF): \data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6336 (SB_DFF): \data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6337 (SB_DFF): \data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6338 (SB_DFF): \data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6339 (SB_DFF): \data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6340 (SB_DFF): \data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6341 (SB_DFF): \data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6342 (SB_DFF): \data_out [115] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6343 (SB_DFF): \data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6344 (SB_DFF): \data_out [117] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6345 (SB_DFF): \data_out [118] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6346 (SB_DFF): \data_out [119] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6347 (SB_DFF): \data_out [120] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6348 (SB_DFF): \data_out [121] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6349 (SB_DFF): \data_out [122] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6350 (SB_DFF): \data_out [123] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6351 (SB_DFF): \data_out [124] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6352 (SB_DFF): \data_out [125] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6353 (SB_DFF): \data_out [126] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6354 (SB_DFF): \data_out [127] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6355 (SB_DFF): \data_out [128] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6356 (SB_DFF): \data_out [129] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6357 (SB_DFF): \data_out [130] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6358 (SB_DFF): \data_out [131] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6359 (SB_DFF): \data_out [132] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6360 (SB_DFF): \data_out [133] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6361 (SB_DFF): \data_out [134] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6362 (SB_DFF): \data_out [135] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6363 (SB_DFF): \data_out [136] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6364 (SB_DFF): \data_out [137] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6365 (SB_DFF): \data_out [138] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6366 (SB_DFF): \data_out [139] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6367 (SB_DFF): \data_out [140] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6368 (SB_DFF): \data_out [141] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6369 (SB_DFF): \data_out [142] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6370 (SB_DFF): \data_out [143] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6371 (SB_DFF): \data_out [144] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6372 (SB_DFF): \data_out [145] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6373 (SB_DFF): \data_out [146] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6374 (SB_DFF): \data_out [147] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6375 (SB_DFF): \data_out [148] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6376 (SB_DFF): \data_out [149] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6377 (SB_DFF): \data_out [150] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6378 (SB_DFF): \data_out [151] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6379 (SB_DFF): \data_out [152] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6380 (SB_DFF): \data_out [153] = 0
Handling FF init values in id_ex.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3149 (SB_DFF): \data_out [177] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2972 (SB_DFF): \data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2973 (SB_DFF): \data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2974 (SB_DFF): \data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2975 (SB_DFF): \data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2976 (SB_DFF): \data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2977 (SB_DFF): \data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2978 (SB_DFF): \data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2979 (SB_DFF): \data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2980 (SB_DFF): \data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2981 (SB_DFF): \data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2982 (SB_DFF): \data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2983 (SB_DFF): \data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2984 (SB_DFF): \data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2985 (SB_DFF): \data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2986 (SB_DFF): \data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2987 (SB_DFF): \data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2988 (SB_DFF): \data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2989 (SB_DFF): \data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2990 (SB_DFF): \data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2991 (SB_DFF): \data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2992 (SB_DFF): \data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2993 (SB_DFF): \data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2994 (SB_DFF): \data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2995 (SB_DFF): \data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2996 (SB_DFF): \data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2997 (SB_DFF): \data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2998 (SB_DFF): \data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2999 (SB_DFF): \data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3000 (SB_DFF): \data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3001 (SB_DFF): \data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3002 (SB_DFF): \data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3003 (SB_DFF): \data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3004 (SB_DFF): \data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3005 (SB_DFF): \data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3006 (SB_DFF): \data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3007 (SB_DFF): \data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3008 (SB_DFF): \data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3009 (SB_DFF): \data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3010 (SB_DFF): \data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3011 (SB_DFF): \data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3012 (SB_DFF): \data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3013 (SB_DFF): \data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3014 (SB_DFF): \data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3015 (SB_DFF): \data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3016 (SB_DFF): \data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3017 (SB_DFF): \data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3018 (SB_DFF): \data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3019 (SB_DFF): \data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3020 (SB_DFF): \data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3021 (SB_DFF): \data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3022 (SB_DFF): \data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3023 (SB_DFF): \data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3024 (SB_DFF): \data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3025 (SB_DFF): \data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3026 (SB_DFF): \data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3027 (SB_DFF): \data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3028 (SB_DFF): \data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3029 (SB_DFF): \data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3030 (SB_DFF): \data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3031 (SB_DFF): \data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3032 (SB_DFF): \data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3033 (SB_DFF): \data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3034 (SB_DFF): \data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3035 (SB_DFF): \data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3036 (SB_DFF): \data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3037 (SB_DFF): \data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3038 (SB_DFF): \data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3039 (SB_DFF): \data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3040 (SB_DFF): \data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3041 (SB_DFF): \data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3042 (SB_DFF): \data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3043 (SB_DFF): \data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3044 (SB_DFF): \data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3045 (SB_DFF): \data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3046 (SB_DFF): \data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3047 (SB_DFF): \data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3048 (SB_DFF): \data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3049 (SB_DFF): \data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3050 (SB_DFF): \data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3051 (SB_DFF): \data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3052 (SB_DFF): \data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3053 (SB_DFF): \data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3054 (SB_DFF): \data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3055 (SB_DFF): \data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3056 (SB_DFF): \data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3057 (SB_DFF): \data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3058 (SB_DFF): \data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3059 (SB_DFF): \data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3060 (SB_DFF): \data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3061 (SB_DFF): \data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3062 (SB_DFF): \data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3063 (SB_DFF): \data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3064 (SB_DFF): \data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3065 (SB_DFF): \data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3066 (SB_DFF): \data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3067 (SB_DFF): \data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3068 (SB_DFF): \data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3069 (SB_DFF): \data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3070 (SB_DFF): \data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3071 (SB_DFF): \data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3072 (SB_DFF): \data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3073 (SB_DFF): \data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3074 (SB_DFF): \data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3075 (SB_DFF): \data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3076 (SB_DFF): \data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3077 (SB_DFF): \data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3078 (SB_DFF): \data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3079 (SB_DFF): \data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3080 (SB_DFF): \data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3081 (SB_DFF): \data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3082 (SB_DFF): \data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3083 (SB_DFF): \data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3084 (SB_DFF): \data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3085 (SB_DFF): \data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3086 (SB_DFF): \data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3087 (SB_DFF): \data_out [115] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3088 (SB_DFF): \data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3089 (SB_DFF): \data_out [117] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3090 (SB_DFF): \data_out [118] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3091 (SB_DFF): \data_out [119] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3092 (SB_DFF): \data_out [120] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3093 (SB_DFF): \data_out [121] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3094 (SB_DFF): \data_out [122] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3095 (SB_DFF): \data_out [123] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3096 (SB_DFF): \data_out [124] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3097 (SB_DFF): \data_out [125] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3098 (SB_DFF): \data_out [126] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3099 (SB_DFF): \data_out [127] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3100 (SB_DFF): \data_out [128] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3101 (SB_DFF): \data_out [129] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3102 (SB_DFF): \data_out [130] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3103 (SB_DFF): \data_out [131] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3104 (SB_DFF): \data_out [132] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3105 (SB_DFF): \data_out [133] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3106 (SB_DFF): \data_out [134] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3107 (SB_DFF): \data_out [135] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3108 (SB_DFF): \data_out [136] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3109 (SB_DFF): \data_out [137] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3110 (SB_DFF): \data_out [138] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3111 (SB_DFF): \data_out [139] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3112 (SB_DFF): \data_out [140] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3113 (SB_DFF): \data_out [141] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3114 (SB_DFF): \data_out [142] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3115 (SB_DFF): \data_out [143] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3116 (SB_DFF): \data_out [144] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3117 (SB_DFF): \data_out [145] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3118 (SB_DFF): \data_out [146] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3119 (SB_DFF): \data_out [147] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3120 (SB_DFF): \data_out [148] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3121 (SB_DFF): \data_out [149] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3122 (SB_DFF): \data_out [150] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3123 (SB_DFF): \data_out [151] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3124 (SB_DFF): \data_out [152] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3125 (SB_DFF): \data_out [153] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3126 (SB_DFF): \data_out [154] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3127 (SB_DFF): \data_out [155] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3128 (SB_DFF): \data_out [156] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3129 (SB_DFF): \data_out [157] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3130 (SB_DFF): \data_out [158] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3131 (SB_DFF): \data_out [159] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3132 (SB_DFF): \data_out [160] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3133 (SB_DFF): \data_out [161] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3134 (SB_DFF): \data_out [162] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3135 (SB_DFF): \data_out [163] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3136 (SB_DFF): \data_out [164] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3137 (SB_DFF): \data_out [165] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3138 (SB_DFF): \data_out [166] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3139 (SB_DFF): \data_out [167] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3140 (SB_DFF): \data_out [168] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3141 (SB_DFF): \data_out [169] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3142 (SB_DFF): \data_out [170] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3143 (SB_DFF): \data_out [171] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3144 (SB_DFF): \data_out [172] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3145 (SB_DFF): \data_out [173] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3146 (SB_DFF): \data_out [174] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3147 (SB_DFF): \data_out [175] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3148 (SB_DFF): \data_out [176] = 0
Handling FF init values in if_id.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1399 (SB_DFF): \data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1400 (SB_DFF): \data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1401 (SB_DFF): \data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1403 (SB_DFF): \data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1410 (SB_DFF): \data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1395 (SB_DFF): \data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1396 (SB_DFF): \data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1402 (SB_DFF): \data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1397 (SB_DFF): \data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1404 (SB_DFF): \data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1405 (SB_DFF): \data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1406 (SB_DFF): \data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1411 (SB_DFF): \data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1412 (SB_DFF): \data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1413 (SB_DFF): \data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1415 (SB_DFF): \data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1422 (SB_DFF): \data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1407 (SB_DFF): \data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1408 (SB_DFF): \data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1414 (SB_DFF): \data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1409 (SB_DFF): \data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1416 (SB_DFF): \data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1417 (SB_DFF): \data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1418 (SB_DFF): \data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1423 (SB_DFF): \data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1424 (SB_DFF): \data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1425 (SB_DFF): \data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1427 (SB_DFF): \data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1434 (SB_DFF): \data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1419 (SB_DFF): \data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1420 (SB_DFF): \data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1426 (SB_DFF): \data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1421 (SB_DFF): \data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1428 (SB_DFF): \data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1429 (SB_DFF): \data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1430 (SB_DFF): \data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1435 (SB_DFF): \data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1436 (SB_DFF): \data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1437 (SB_DFF): \data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1439 (SB_DFF): \data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1446 (SB_DFF): \data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1431 (SB_DFF): \data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1432 (SB_DFF): \data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1438 (SB_DFF): \data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1433 (SB_DFF): \data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1440 (SB_DFF): \data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1441 (SB_DFF): \data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1442 (SB_DFF): \data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1447 (SB_DFF): \data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1448 (SB_DFF): \data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1449 (SB_DFF): \data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1451 (SB_DFF): \data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1398 (SB_DFF): \data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1443 (SB_DFF): \data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1444 (SB_DFF): \data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1450 (SB_DFF): \data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1445 (SB_DFF): \data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1452 (SB_DFF): \data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1453 (SB_DFF): \data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1454 (SB_DFF): \data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1455 (SB_DFF): \data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1456 (SB_DFF): \data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1457 (SB_DFF): \data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1394 (SB_DFF): \data_out [0] = 0
Handling FF init values in imm_gen.
Handling FF init values in instruction_memory.
Handling FF init values in mem_wb.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6504 (SB_DFF): \data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6388 (SB_DFF): \data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6389 (SB_DFF): \data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6390 (SB_DFF): \data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6391 (SB_DFF): \data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6392 (SB_DFF): \data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6393 (SB_DFF): \data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6394 (SB_DFF): \data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6395 (SB_DFF): \data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6396 (SB_DFF): \data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6397 (SB_DFF): \data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6398 (SB_DFF): \data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6399 (SB_DFF): \data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6400 (SB_DFF): \data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6401 (SB_DFF): \data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6402 (SB_DFF): \data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6403 (SB_DFF): \data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6404 (SB_DFF): \data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6405 (SB_DFF): \data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6406 (SB_DFF): \data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6407 (SB_DFF): \data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6408 (SB_DFF): \data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6409 (SB_DFF): \data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6410 (SB_DFF): \data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6411 (SB_DFF): \data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6412 (SB_DFF): \data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6413 (SB_DFF): \data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6414 (SB_DFF): \data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6415 (SB_DFF): \data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6416 (SB_DFF): \data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6417 (SB_DFF): \data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6418 (SB_DFF): \data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6419 (SB_DFF): \data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6420 (SB_DFF): \data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6421 (SB_DFF): \data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6422 (SB_DFF): \data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6423 (SB_DFF): \data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6424 (SB_DFF): \data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6425 (SB_DFF): \data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6426 (SB_DFF): \data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6427 (SB_DFF): \data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6428 (SB_DFF): \data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6429 (SB_DFF): \data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6430 (SB_DFF): \data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6431 (SB_DFF): \data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6432 (SB_DFF): \data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6433 (SB_DFF): \data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6434 (SB_DFF): \data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6435 (SB_DFF): \data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6436 (SB_DFF): \data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6437 (SB_DFF): \data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6438 (SB_DFF): \data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6439 (SB_DFF): \data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6440 (SB_DFF): \data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6441 (SB_DFF): \data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6442 (SB_DFF): \data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6443 (SB_DFF): \data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6444 (SB_DFF): \data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6445 (SB_DFF): \data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6446 (SB_DFF): \data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6447 (SB_DFF): \data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6448 (SB_DFF): \data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6449 (SB_DFF): \data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6450 (SB_DFF): \data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6451 (SB_DFF): \data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6452 (SB_DFF): \data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6453 (SB_DFF): \data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6454 (SB_DFF): \data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6455 (SB_DFF): \data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6456 (SB_DFF): \data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6457 (SB_DFF): \data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6458 (SB_DFF): \data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6459 (SB_DFF): \data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6460 (SB_DFF): \data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6461 (SB_DFF): \data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6462 (SB_DFF): \data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6463 (SB_DFF): \data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6464 (SB_DFF): \data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6465 (SB_DFF): \data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6466 (SB_DFF): \data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6467 (SB_DFF): \data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6468 (SB_DFF): \data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6469 (SB_DFF): \data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6470 (SB_DFF): \data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6471 (SB_DFF): \data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6472 (SB_DFF): \data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6473 (SB_DFF): \data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6474 (SB_DFF): \data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6475 (SB_DFF): \data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6476 (SB_DFF): \data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6477 (SB_DFF): \data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6478 (SB_DFF): \data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6479 (SB_DFF): \data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6480 (SB_DFF): \data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6481 (SB_DFF): \data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6482 (SB_DFF): \data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6483 (SB_DFF): \data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6484 (SB_DFF): \data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6485 (SB_DFF): \data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6486 (SB_DFF): \data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6487 (SB_DFF): \data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6488 (SB_DFF): \data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6489 (SB_DFF): \data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6490 (SB_DFF): \data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6491 (SB_DFF): \data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6492 (SB_DFF): \data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6493 (SB_DFF): \data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6494 (SB_DFF): \data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6495 (SB_DFF): \data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6496 (SB_DFF): \data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6497 (SB_DFF): \data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6498 (SB_DFF): \data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6499 (SB_DFF): \data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6500 (SB_DFF): \data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6501 (SB_DFF): \data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6502 (SB_DFF): \data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6503 (SB_DFF): \data_out [115] = 0
Handling FF init values in mux2to1.
Handling FF init values in program_counter.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1297 (SB_DFFE): \outAddr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1298 (SB_DFFE): \outAddr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1299 (SB_DFFE): \outAddr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1300 (SB_DFFE): \outAddr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1301 (SB_DFFE): \outAddr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1307 (SB_DFFE): \outAddr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1308 (SB_DFFE): \outAddr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1310 (SB_DFFE): \outAddr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1312 (SB_DFFE): \outAddr [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1322 (SB_DFFE): \outAddr [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1337 (SB_DFFE): \counter [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1302 (SB_DFFE): \outAddr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1309 (SB_DFFE): \outAddr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1303 (SB_DFFE): \outAddr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1311 (SB_DFFE): \outAddr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1304 (SB_DFFE): \outAddr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1318 (SB_DFFE): \outAddr [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1319 (SB_DFFE): \outAddr [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1321 (SB_DFFE): \outAddr [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1323 (SB_DFFE): \outAddr [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1334 (SB_DFFE): \counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1339 (SB_DFFE): \counter [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1313 (SB_DFFE): \outAddr [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1320 (SB_DFFE): \outAddr [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1314 (SB_DFFE): \outAddr [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1305 (SB_DFFE): \outAddr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1315 (SB_DFFE): \outAddr [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1330 (SB_DFFE): \counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1331 (SB_DFFE): \counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1333 (SB_DFFE): \counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1335 (SB_DFFE): \counter [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1338 (SB_DFFE): \counter [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1296 (SB_DFFE): \outAddr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1340 (SB_DFFE): \counter [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1324 (SB_DFFE): \outAddr [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1332 (SB_DFFE): \counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1325 (SB_DFFE): \outAddr [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1316 (SB_DFFE): \outAddr [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1326 (SB_DFFE): \outAddr [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1341 (SB_DFFE): \counter [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1306 (SB_DFFE): \outAddr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1327 (SB_DFFE): \outAddr [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1317 (SB_DFFE): \outAddr [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1329 (SB_DFFE): \counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1342 (SB_DFFE): \enable = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1336 (SB_DFFE): \counter [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1328 (SB_DFFE): \counter [0] = 0
Handling FF init values in regfile.
Handling FF init values in sign_mask_gen.
Handling FF init values in top.

20.36. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in ALUControl.
Merging set/reset $_MUX_ cells into SB_FFs in DSPAdder.
Merging set/reset $_MUX_ cells into SB_FFs in DSPSubtractor.
Merging set/reset $_MUX_ cells into SB_FFs in ForwardingUnit.
Merging set/reset $_MUX_ cells into SB_FFs in alu.
Merging set/reset $_MUX_ cells into SB_FFs in branch_decision.
Merging set/reset $_MUX_ cells into SB_FFs in branch_predictor.
Merging set/reset $_MUX_ cells into SB_FFs in control.
Merging set/reset $_MUX_ cells into SB_FFs in cpu.
Merging set/reset $_MUX_ cells into SB_FFs in csr_file.
Merging set/reset $_MUX_ cells into SB_FFs in data_mem.
Merging set/reset $_MUX_ cells into SB_FFs in ex_mem.
Merging set/reset $_MUX_ cells into SB_FFs in id_ex.
Merging set/reset $_MUX_ cells into SB_FFs in if_id.
Merging set/reset $_MUX_ cells into SB_FFs in imm_gen.
Merging set/reset $_MUX_ cells into SB_FFs in instruction_memory.
Merging set/reset $_MUX_ cells into SB_FFs in mem_wb.
Merging set/reset $_MUX_ cells into SB_FFs in mux2to1.
Merging set/reset $_MUX_ cells into SB_FFs in program_counter.
  Merging $auto$simplemap.cc:277:simplemap_mux$1265 (A=1'0, B=\inAddr [1], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1297 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1266 (A=1'0, B=\inAddr [2], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1298 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1267 (A=1'0, B=\inAddr [3], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1299 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1268 (A=1'0, B=\inAddr [4], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1300 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1269 (A=1'0, B=\inAddr [5], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1301 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1275 (A=1'0, B=\inAddr [11], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1307 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1276 (A=1'0, B=\inAddr [12], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1308 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1278 (A=1'0, B=\inAddr [14], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1310 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1280 (A=1'0, B=\inAddr [16], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1312 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1290 (A=1'0, B=\inAddr [26], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1322 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1270 (A=1'0, B=\inAddr [6], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1302 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1277 (A=1'0, B=\inAddr [13], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1309 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1271 (A=1'0, B=\inAddr [7], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1303 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1279 (A=1'0, B=\inAddr [15], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1311 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1272 (A=1'0, B=\inAddr [8], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1304 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1286 (A=1'0, B=\inAddr [22], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1318 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1287 (A=1'0, B=\inAddr [23], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1319 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1289 (A=1'0, B=\inAddr [25], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1321 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1291 (A=1'0, B=\inAddr [27], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1323 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1281 (A=1'0, B=\inAddr [17], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1313 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1288 (A=1'0, B=\inAddr [24], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1320 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1282 (A=1'0, B=\inAddr [18], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1314 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1273 (A=1'0, B=\inAddr [9], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1305 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1283 (A=1'0, B=\inAddr [19], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1315 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1264 (A=1'0, B=\inAddr [0], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1296 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1292 (A=1'0, B=\inAddr [28], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1324 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1293 (A=1'0, B=\inAddr [29], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1325 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1284 (A=1'0, B=\inAddr [20], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1316 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1294 (A=1'0, B=\inAddr [30], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1326 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1274 (A=1'0, B=\inAddr [10], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1306 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1295 (A=1'0, B=\inAddr [31], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1327 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1285 (A=1'0, B=\inAddr [21], S=$auto$alumacc.cc:502:replace_alu$973 [13]) into $auto$simplemap.cc:420:simplemap_dff$1317 (SB_DFFE).
Merging set/reset $_MUX_ cells into SB_FFs in regfile.
Merging set/reset $_MUX_ cells into SB_FFs in sign_mask_gen.
Merging set/reset $_MUX_ cells into SB_FFs in top.

20.37. Executing ICE40_OPT pass (performing simple optimizations).

20.37.1. Running ICE40 specific optimizations.

20.37.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
<suppressed ~11 debug messages>
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
<suppressed ~2 debug messages>
Optimizing module alu.
<suppressed ~33 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~8 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
<suppressed ~46 debug messages>
Optimizing module regfile.
Optimizing module sign_mask_gen.
<suppressed ~4 debug messages>
Optimizing module top.
<suppressed ~2 debug messages>

20.37.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~243 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
<suppressed ~324 debug messages>
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 189 cells.

20.37.4. Executing OPT_RMDFF pass (remove dff with constant values).

20.37.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 32 unused cells and 2927 unused wires.
<suppressed ~42 debug messages>

20.37.6. Rerunning OPT passes. (Removed registers in this run.)

20.37.7. Running ICE40 specific optimizations.

20.37.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module DSPAdder.
Optimizing module DSPSubtractor.
Optimizing module ForwardingUnit.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

20.37.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\DSPAdder'.
Finding identical cells in module `\DSPSubtractor'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.37.10. Executing OPT_RMDFF pass (remove dff with constant values).

20.37.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \DSPAdder..
Finding unused cells or wires in module \DSPSubtractor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

20.37.12. Finished OPT passes. (There is nothing left to do.)

20.38. Executing TECHMAP pass (map to technology primitives).

20.38.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

20.38.2. Continuing TECHMAP pass.
No more expansions possible.

20.39. Executing ABC pass (technology mapping using ABC).

20.39.1. Extracting gate netlist of module `\ALUControl' to `<abc-temp-dir>/input.blif'..
Extracted 167 gates and 179 wires to a netlist network with 11 inputs and 7 outputs.

20.39.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      15.
ABC: Participating nodes from both networks       =      42.
ABC: Participating nodes from the first network   =      14. (  41.18 % of nodes)
ABC: Participating nodes from the second network  =      28. (  82.35 % of nodes)
ABC: Node pairs (any polarity)                    =      14. (  41.18 % of names can be moved)
ABC: Node pairs (same polarity)                   =       9. (  26.47 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       33
ABC RESULTS:        internal signals:      161
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        7
Removing temp directory.

20.39.2. Extracting gate netlist of module `\DSPAdder' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.3. Extracting gate netlist of module `\DSPSubtractor' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.4. Extracting gate netlist of module `\ForwardingUnit' to `<abc-temp-dir>/input.blif'..
Extracted 143 gates and 203 wires to a netlist network with 60 inputs and 4 outputs.

20.39.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      15.
ABC: Participating nodes from both networks       =      28.
ABC: Participating nodes from the first network   =      14. (  22.95 % of nodes)
ABC: Participating nodes from the second network  =      14. (  22.95 % of nodes)
ABC: Node pairs (any polarity)                    =      14. (  22.95 % of names can be moved)
ABC: Node pairs (same polarity)                   =       6. (   9.84 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.4.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       60
ABC RESULTS:        internal signals:      139
ABC RESULTS:           input signals:       60
ABC RESULTS:          output signals:        4
Removing temp directory.

20.39.5. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 1392 gates and 1532 wires to a netlist network with 139 inputs and 65 outputs.

20.39.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     321.
ABC: Participating nodes from both networks       =     699.
ABC: Participating nodes from the first network   =     320. (  49.31 % of nodes)
ABC: Participating nodes from the second network  =     379. (  58.40 % of nodes)
ABC: Node pairs (any polarity)                    =     320. (  49.31 % of names can be moved)
ABC: Node pairs (same polarity)                   =     140. (  21.57 % of names can be moved)
ABC: Total runtime =     0.03 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.5.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      648
ABC RESULTS:        internal signals:     1328
ABC RESULTS:           input signals:      139
ABC RESULTS:          output signals:       65
Removing temp directory.

20.39.6. Extracting gate netlist of module `\branch_decision' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 10 wires to a netlist network with 4 inputs and 3 outputs.

20.39.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       7.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       4. ( 100.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.6.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        3
Removing temp directory.

20.39.7. Extracting gate netlist of module `\branch_predictor' to `<abc-temp-dir>/input.blif'..
Extracted 11 gates and 15 wires to a netlist network with 4 inputs and 3 outputs.

20.39.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       6.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       3. (  75.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.7.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        8
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        3
Removing temp directory.

20.39.8. Extracting gate netlist of module `\control' to `<abc-temp-dir>/input.blif'..
Extracted 36 gates and 43 wires to a netlist network with 7 inputs and 12 outputs.

20.39.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      13.
ABC: Participating nodes from both networks       =      24.
ABC: Participating nodes from the first network   =      12. (  85.71 % of nodes)
ABC: Participating nodes from the second network  =      12. (  85.71 % of nodes)
ABC: Node pairs (any polarity)                    =      12. (  85.71 % of names can be moved)
ABC: Node pairs (same polarity)                   =      12. (  85.71 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.8.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       13
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:       12
Removing temp directory.

20.39.9. Extracting gate netlist of module `\cpu' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 3 outputs.

20.39.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       6.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       3. (  75.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.9.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        3
Removing temp directory.

20.39.10. Extracting gate netlist of module `\csr_file' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.11. Extracting gate netlist of module `\data_mem' to `<abc-temp-dir>/input.blif'..
Extracted 608 gates and 746 wires to a netlist network with 137 inputs and 104 outputs.

20.39.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      91.
ABC: Participating nodes from both networks       =     303.
ABC: Participating nodes from the first network   =     120. (  50.42 % of nodes)
ABC: Participating nodes from the second network  =     183. (  76.89 % of nodes)
ABC: Node pairs (any polarity)                    =     120. (  50.42 % of names can be moved)
ABC: Node pairs (same polarity)                   =     101. (  42.44 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.11.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      207
ABC RESULTS:        internal signals:      505
ABC RESULTS:           input signals:      137
ABC RESULTS:          output signals:      104
Removing temp directory.

20.39.12. Extracting gate netlist of module `\ex_mem' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.13. Extracting gate netlist of module `\id_ex' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.14. Extracting gate netlist of module `\if_id' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.15. Extracting gate netlist of module `\imm_gen' to `<abc-temp-dir>/input.blif'..
Extracted 231 gates and 260 wires to a netlist network with 29 inputs and 31 outputs.

20.39.15.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      48.
ABC: Participating nodes from both networks       =      95.
ABC: Participating nodes from the first network   =      47. (  88.68 % of nodes)
ABC: Participating nodes from the second network  =      48. (  90.57 % of nodes)
ABC: Node pairs (any polarity)                    =      47. (  88.68 % of names can be moved)
ABC: Node pairs (same polarity)                   =      46. (  86.79 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.15.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       52
ABC RESULTS:        internal signals:      200
ABC RESULTS:           input signals:       29
ABC RESULTS:          output signals:       31
Removing temp directory.

20.39.16. Extracting gate netlist of module `\instruction_memory' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.17. Extracting gate netlist of module `\mem_wb' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.39.18. Extracting gate netlist of module `\mux2to1' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 97 wires to a netlist network with 65 inputs and 32 outputs.

20.39.18.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      33.
ABC: Participating nodes from both networks       =      64.
ABC: Participating nodes from the first network   =      32. (  96.97 % of nodes)
ABC: Participating nodes from the second network  =      32. (  96.97 % of nodes)
ABC: Node pairs (any polarity)                    =      32. (  96.97 % of names can be moved)
ABC: Node pairs (same polarity)                   =      32. (  96.97 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.18.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

20.39.19. Extracting gate netlist of module `\program_counter' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 3 outputs.

20.39.19.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       6.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       3. (  75.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.19.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        3
Removing temp directory.

20.39.20. Extracting gate netlist of module `\regfile' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 216 wires to a netlist network with 118 inputs and 66 outputs.

20.39.20.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      69.
ABC: Participating nodes from both networks       =     138.
ABC: Participating nodes from the first network   =      69. (  84.15 % of nodes)
ABC: Participating nodes from the second network  =      69. (  84.15 % of nodes)
ABC: Node pairs (any polarity)                    =      69. (  84.15 % of names can be moved)
ABC: Node pairs (same polarity)                   =      67. (  81.71 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.20.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       81
ABC RESULTS:        internal signals:       32
ABC RESULTS:           input signals:      118
ABC RESULTS:          output signals:       66
Removing temp directory.

20.39.21. Extracting gate netlist of module `\sign_mask_gen' to `<abc-temp-dir>/input.blif'..
Extracted 13 gates and 16 wires to a netlist network with 3 inputs and 4 outputs.

20.39.21.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       5.
ABC: Participating nodes from both networks       =      11.
ABC: Participating nodes from the first network   =       4. (  80.00 % of nodes)
ABC: Participating nodes from the second network  =       7. ( 140.00 % of nodes)
ABC: Node pairs (any polarity)                    =       4. (  80.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       4. (  80.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.21.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        4
ABC RESULTS:        internal signals:        9
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        4
Removing temp directory.

20.39.22. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 3 outputs.

20.39.22.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       6.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       3. (  75.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

20.39.22.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        3
Removing temp directory.

20.40. Executing ICE40_WRAPCARRY pass (wrap carries).

20.41. Executing TECHMAP pass (map to technology primitives).

20.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

20.41.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 67 unused cells and 1529 unused wires.

20.42. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       33
  2-LUT                4
  3-LUT               10
  4-LUT               19

Eliminating LUTs.
Number of LUTs:       33
  2-LUT                4
  3-LUT               10
  4-LUT               19

Combining LUTs.
Number of LUTs:       33
  2-LUT                4
  3-LUT               10
  4-LUT               19
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:       60
  2-LUT                5
  3-LUT                8
  4-LUT               47

Eliminating LUTs.
Number of LUTs:       60
  2-LUT                5
  3-LUT                8
  4-LUT               47

Combining LUTs.
Number of LUTs:       60
  2-LUT                5
  3-LUT                8
  4-LUT               47
Discovering LUTs.
Number of LUTs:      649
  1-LUT               32
  2-LUT               60
  3-LUT              200
  4-LUT              357

Eliminating LUTs.
Number of LUTs:      649
  1-LUT               32
  2-LUT               60
  3-LUT              200
  4-LUT              357

Combining LUTs.
Number of LUTs:      648
  1-LUT               32
  2-LUT               60
  3-LUT              198
  4-LUT              358
Discovering LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1

Eliminating LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1

Combining LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1
Discovering LUTs.
Number of LUTs:       35
  2-LUT                2
  3-LUT               33

Eliminating LUTs.
Number of LUTs:       35
  2-LUT                2
  3-LUT               33

Combining LUTs.
Number of LUTs:       35
  2-LUT                2
  3-LUT               33
Discovering LUTs.
Number of LUTs:       13
  2-LUT                4
  3-LUT                4
  4-LUT                5

Eliminating LUTs.
Number of LUTs:       13
  2-LUT                4
  3-LUT                4
  4-LUT                5

Combining LUTs.
Number of LUTs:       13
  2-LUT                4
  3-LUT                4
  4-LUT                5
Discovering LUTs.
Number of LUTs:        3
  2-LUT                2
  4-LUT                1

Eliminating LUTs.
Number of LUTs:        3
  2-LUT                2
  4-LUT                1

Combining LUTs.
Number of LUTs:        3
  2-LUT                2
  4-LUT                1
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:      207
  2-LUT               32
  3-LUT               70
  4-LUT              105

Eliminating LUTs.
Number of LUTs:      207
  2-LUT               32
  3-LUT               70
  4-LUT              105

Combining LUTs.
Number of LUTs:      207
  2-LUT               32
  3-LUT               70
  4-LUT              105
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:       52
  2-LUT               19
  3-LUT               13
  4-LUT               20

Eliminating LUTs.
Number of LUTs:       52
  2-LUT               19
  3-LUT               13
  4-LUT               20

Combining LUTs.
Number of LUTs:       52
  2-LUT               19
  3-LUT               13
  4-LUT               20
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:       32
  3-LUT               32

Eliminating LUTs.
Number of LUTs:       32
  3-LUT               32

Combining LUTs.
Number of LUTs:       32
  3-LUT               32
Discovering LUTs.
Number of LUTs:       16
  1-LUT                2
  2-LUT               14

Eliminating LUTs.
Number of LUTs:       16
  1-LUT                2
  2-LUT               14

Combining LUTs.
Number of LUTs:       16
  1-LUT                2
  2-LUT               14
Discovering LUTs.
Number of LUTs:       81
  1-LUT                1
  2-LUT                3
  3-LUT                4
  4-LUT               73

Eliminating LUTs.
Number of LUTs:       81
  1-LUT                1
  2-LUT                3
  3-LUT                4
  4-LUT               73

Combining LUTs.
Number of LUTs:       81
  1-LUT                1
  2-LUT                3
  3-LUT                4
  4-LUT               73
Discovering LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3

Eliminating LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3

Combining LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3
Discovering LUTs.
Number of LUTs:        3
  1-LUT                1
  2-LUT                2

Eliminating LUTs.
Number of LUTs:        3
  1-LUT                1
  2-LUT                2

Combining LUTs.
Number of LUTs:        3
  1-LUT                1
  2-LUT                2

Eliminated 0 LUTs.
Combined 1 LUTs.
<suppressed ~6617 debug messages>

20.43. Executing TECHMAP pass (map to technology primitives).

20.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

20.43.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000010100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101011001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100000010110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111100010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110111001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101011111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001100000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001100111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101000111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111111000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011010010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010011101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101000011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011011100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101000111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101011110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
No more expansions possible.
<suppressed ~3283 debug messages>
Removed 0 unused cells and 2381 unused wires.

20.44. Executing AUTONAME pass.
Renamed 210 objects in module ALUControl (16 iterations).
Renamed 356 objects in module ForwardingUnit (10 iterations).
Renamed 6412 objects in module alu (24 iterations).
Renamed 3 objects in module branch_decision (2 iterations).
Renamed 172 objects in module branch_predictor (5 iterations).
Renamed 16 objects in module control (4 iterations).
Renamed 3 objects in module cpu (2 iterations).
Renamed 8 objects in module csr_file (2 iterations).
Renamed 1381 objects in module data_mem (22 iterations).
Renamed 155 objects in module ex_mem (2 iterations).
Renamed 178 objects in module id_ex (2 iterations).
Renamed 64 objects in module if_id (2 iterations).
Renamed 169 objects in module imm_gen (12 iterations).
Renamed 8 objects in module instruction_memory (2 iterations).
Renamed 117 objects in module mem_wb (2 iterations).
Renamed 32 objects in module mux2to1 (2 iterations).
Renamed 229 objects in module program_counter (8 iterations).
Renamed 262 objects in module regfile (14 iterations).
Renamed 4 objects in module sign_mask_gen (2 iterations).
Renamed 6 objects in module top (3 iterations).
<suppressed ~2950 debug messages>

20.45. Executing HIERARCHY pass (managing design hierarchy).

20.45.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \csr_file
Used module:         \program_counter
Used module:         \mux2to1
Used module:         \DSPAdder
Used module:         \ALUControl
Used module:         \alu
Used module:             \DSPSubtractor
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         \control
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen

20.45.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \csr_file
Used module:         \program_counter
Used module:         \mux2to1
Used module:         \DSPAdder
Used module:         \ALUControl
Used module:         \alu
Used module:             \DSPSubtractor
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         \control
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen
Removed 0 unused modules.

20.46. Printing statistics.

=== ALUControl ===

   Number of wires:                 29
   Number of wire bits:             44
   Number of public wires:          29
   Number of public wire bits:      44
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 33
     SB_LUT4                        33

=== DSPAdder ===

   Number of wires:                  3
   Number of wire bits:             96
   Number of public wires:           3
   Number of public wire bits:      96
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     SB_MAC16                        1

=== DSPSubtractor ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     SB_MAC16                        1

=== ForwardingUnit ===

   Number of wires:                 71
   Number of wire bits:            120
   Number of public wires:          71
   Number of public wire bits:     120
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 60
     SB_LUT4                        60

=== alu ===

   Number of wires:                628
   Number of wire bits:            851
   Number of public wires:         628
   Number of public wire bits:     851
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                714
     DSPAdder                        1
     DSPSubtractor                   1
     SB_CARRY                       64
     SB_LUT4                       648

=== branch_decision ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     SB_LUT4                         3

=== branch_predictor ===

   Number of wires:                 12
   Number of wire bits:            138
   Number of public wires:          12
   Number of public wire bits:     138
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 69
     SB_CARRY                       31
     SB_DFFE                         2
     SB_DFFN                         1
     SB_LUT4                        35

=== control ===

   Number of wires:                 14
   Number of wire bits:             20
   Number of public wires:          14
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     SB_LUT4                        13

=== cpu ===

   Number of wires:                 72
   Number of wire bits:           1772
   Number of public wires:          72
   Number of public wire bits:    1772
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     ALUControl                      1
     DSPAdder                        2
     ForwardingUnit                  1
     SB_LUT4                         3
     alu                             1
     branch_decision                 1
     branch_predictor                1
     control                         1
     csr_file                        1
     ex_mem                          1
     id_ex                           1
     if_id                           1
     imm_gen                         1
     mem_wb                          1
     mux2to1                        24
     program_counter                 1
     regfile                         1
     sign_mask_gen                   1

=== csr_file ===

   Number of wires:                 14
   Number of wire bits:            218
   Number of public wires:          14
   Number of public wire bits:     218
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     SB_RAM40_4K                     8

=== data_mem ===

   Number of wires:                181
   Number of wire bits:            848
   Number of public wires:         181
   Number of public wire bits:     848
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                337
     SB_DFFE                       122
     SB_LUT4                       207
     SB_RAM40_4K                     8

=== ex_mem ===

   Number of wires:                  3
   Number of wire bits:            311
   Number of public wires:           3
   Number of public wire bits:     311
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                155
     SB_DFF                        155

=== id_ex ===

   Number of wires:                  3
   Number of wire bits:            357
   Number of public wires:           3
   Number of public wire bits:     357
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                178
     SB_DFF                        178

=== if_id ===

   Number of wires:                  3
   Number of wire bits:            129
   Number of public wires:           3
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 64
     SB_DFF                         64

=== imm_gen ===

   Number of wires:                 23
   Number of wire bits:             85
   Number of public wires:          23
   Number of public wire bits:      85
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     SB_LUT4                        52

=== instruction_memory ===

   Number of wires:                 11
   Number of wire bits:            193
   Number of public wires:          11
   Number of public wire bits:     193
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     SB_RAM40_4K                     8

=== mem_wb ===

   Number of wires:                  3
   Number of wire bits:            235
   Number of public wires:           3
   Number of public wire bits:     235
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                117
     SB_DFF                        117

=== mux2to1 ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     SB_LUT4                        32

=== program_counter ===

   Number of wires:                 11
   Number of wire bits:            114
   Number of public wires:          11
   Number of public wire bits:     114
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 77
     SB_CARRY                       14
     SB_DFFE                        15
     SB_DFFESR                      32
     SB_LUT4                        16

=== regfile ===

   Number of wires:                 32
   Number of wire bits:            273
   Number of public wires:          32
   Number of public wire bits:     273
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     SB_DFF                         48
     SB_LUT4                        81
     SB_RAM40_4K                     4

=== sign_mask_gen ===

   Number of wires:                  3
   Number of wire bits:             10
   Number of public wires:           3
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     SB_LUT4                         4

=== top ===

   Number of wires:                 17
   Number of wire bits:            182
   Number of public wires:          17
   Number of public wire bits:     182
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     SB_DFF                          1
     SB_HFOSC                        1
     SB_LUT4                         3
     cpu                             1
     data_mem                        1
     instruction_memory              1

=== design hierarchy ===

   top                               1
     cpu                             1
       ALUControl                    1
       DSPAdder                      2
       ForwardingUnit                1
       alu                           1
         DSPAdder                    1
         DSPSubtractor               1
       branch_decision               1
       branch_predictor              1
       control                       1
       csr_file                      1
       ex_mem                        1
       id_ex                         1
       if_id                         1
       imm_gen                       1
       mem_wb                        1
       mux2to1                      24
       program_counter               1
       regfile                       1
       sign_mask_gen                 1
     data_mem                        1
     instruction_memory              1

   Number of wires:               1246
   Number of wire bits:           8620
   Number of public wires:        1246
   Number of public wire bits:    8620
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2803
     SB_CARRY                      109
     SB_DFF                        563
     SB_DFFE                       139
     SB_DFFESR                      32
     SB_DFFN                         1
     SB_HFOSC                        1
     SB_LUT4                      1926
     SB_MAC16                        4
     SB_RAM40_4K                    28

20.47. Executing CHECK pass (checking for obvious problems).
checking module ALUControl..
Warning: Wire ALUControl.ALUCtl has an unprocessed 'init' attribute.
checking module DSPAdder..
checking module DSPSubtractor..
checking module ForwardingUnit..
checking module alu..
Warning: Wire alu.ALUOut has an unprocessed 'init' attribute.
Warning: Wire alu.Branch_Enable has an unprocessed 'init' attribute.
checking module branch_decision..
checking module branch_predictor..
checking module control..
checking module cpu..
checking module csr_file..
checking module data_mem..
checking module ex_mem..
checking module id_ex..
checking module if_id..
checking module imm_gen..
Warning: Wire imm_gen.imm has an unprocessed 'init' attribute.
checking module instruction_memory..
checking module mem_wb..
checking module mux2to1..
checking module program_counter..
checking module regfile..
checking module sign_mask_gen..
checking module top..
found and reported 4 problems.

20.48. Executing BLIF backend.

21. Executing JSON backend.

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: 8fbe394e31, CPU: user 5.24s system 0.28s, MEM: 322.21 MB peak
Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 34% 7x techmap (1 sec), 13% 22x opt_expr (0 sec), ...
